<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN"[]>
<book id="hipl-kernelspace-api">
 <bookinfo>
  <title>HIP for Linux Kernel Module Internal API Reference Manual</title>

  <authorgroup>
    <author>
      <firstname>Miika</firstname>
      <surname>Komu</surname>
      <affiliation>
        <address>
          <email>miika@iki.fi</email>
        </address>
      </affiliation>
    </author>
    <author>
      <firstname>Mika</firstname>
      <surname>Kousa</surname>
      <affiliation>
        <address>
          <email>mika.kousa@hiit.fi</email>
        </address>
      </affiliation>
    </author>
    <author>
      <firstname>Kristian</firstname>
      <surname>Slavov</surname>
      <affiliation>
        <address>
          <email>ksl@iki.fi</email>
        </address>
      </affiliation>
    </author>
  </authorgroup>

  <copyright>
   <year>2002</year>
   <holder>Helsinki Institute for Information Technology</holder>
  </copyright>
 
  <legalnotice>

   <para>
     This documentation is free software; you can redistribute
     it and/or modify it under the terms of the GNU General Public
     License as published by the Free Software Foundation; either
     version 2 of the License, or (at your option) any later
     version.
   </para>

   <para>
    This program is distributed in the hope that it will be
    useful, but WITHOUT ANY WARRANTY; without even the implied
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.
   </para>
   
   <para>
    You should have received a copy of the GNU General Public
    License along with this program; if not, write to the Free
    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
    MA 02111-1307 USA
   </para>
   
   <para>
    For more details see the file COPYING in the source
    distribution of Linux.
   </para>

  </legalnotice>

 </bookinfo>

<toc></toc>

<!-- ######### See linux/doc/kernel-doc-nano-HOWTO.txt for instructions on
     ######### how to use the docbook! -->

  <preface id="intro">
     <title>Introduction</title>

     <para>

     <ulink url="http://hipl.hiit.fi/hipl/">Host Identity Protocol for
     Linux (HIPL)</ulink> is implemented both in the Linux kernelspace
     and userspace in C language. The kernelspace function interfaces
     are described here. Most of the kernelspace functions are only to
     be used internally by the implementation; using them outside the
     implementation is not recommended.

     </para>

     <para>
     All the file names are relative to the main HIP kernel directory
     <filename>hipl/linux/net/ipv6/hip</filename>. Some of the files
     are shared between kernelspace and userspace. In those cases, the
     file is located in the kernelspace source directory,
     <filename>hip/linux/net/ipv6/hip</filename>, to emphasize the
     fact that the kernelspace has a very restricted set of utility
     functions, and the shared code should survive without any
     external libraries.
     </para>

  </preface>

  <chapter id="db">
     <title>Database Functions</title>

     <para>
     The database functions in <filename>db.c</filename> are
     responsible of storing HIP related data. The functions store
     information about ESP (SPD, SA, SPI), HITs and IPv6 addresses
     (local and peer) and cookies sent to the peers. The data is
     usually stored into local variables or in the case of ESP related
     data, it is stored using the PF_KEY interface into elsewhere in
     the kernel.  The data is always accessed using accessor functions
     which hide the locking issues from the caller.
     </para>

!Inet/ipv6/hip/db.c

  </chapter>

  <chapter id="builder">
     <title>Message Builder</title>

     <!-- Note: the text below is also in hipl-userspace-api.tmpl. If
          you make changes to the text below, copy the text also into
          hipl-userspace-api.tmpl -->

     <para>
     The HIP daemon reuses the same TLV structure as the HIP kernel
     module so that the userspace and kernelspace may share the same
     library for building messages. The header of a daemon message is
     used a bit differently; it is used for carrying errors and the
     type of the operation to be performed on the daemon. The rest of
     the TLV structures are the same as in HIP drafts but there are
     some "extended" types that serve their purpose only in the
     context of the HIP daemon (such as querying the public-private
     DSA key pair of the host). The message builder is located in
     <filename>linux/net/ipv6/hip/builder.c</filename>
     </para>

     <para>
     The are one major benefits in using the builder interface. It
     keeps the code simple because the details of building parameters
     can be separated from "control" code. Doing otherwise results in
     spaghetti code. The builder interface introduces an extra layer
     of indirection which can be seen also as a slight performance
     drawback. The benefits from the better readability of the code and
     less bugs in the code are undisputable and they weight more than
     slight than slight performance optimizations. 
     </para>

     <para>
     The extra layer of indirection is realized with builder accessors
     functions that manipulate the HIP parameter data structures. This
     means that the members in the structures should not be accesses
     directly in the code; it is the responsibility of the accessor
     functions to manipulate the members in structures and hide the
     details of network byte ordering, padding issues and size
     conversion.
     </para>

!Inet/ipv6/hip/builder.c

  </chapter>

  <chapter id="handling">
     <title>Packet Handling</title>

     <sect1><title>Input</title>

     <para>
     Packet handling in <filename>input.c</filename>consists of
     handling incoming packets or events triggered by the hooks in
     IPv6 code. The incoming packets or events are checked for
     validity and a HIP packet is output as a response when
     needed. Base exchange, ESP protection and readdressing are all
     handled here.
     </para>

!Inet/ipv6/hip/input.c

     </sect1>

     <sect1><title>Output</title>

     <para>
     Output functions in <filename>output.c</filename> are related to
     the transmission of HIP related data from the localhost to a
     peer. The functions are usually triggered by HIP input code, IPv6
     packet output transmission or changes in the localhost
     locators. Checksums are also implemented here.
     </para>

!Inet/ipv6/hip/output.c

     </sect1>

     <sect1><title>Keying Material Handling</title>

     <para>
     Keying material handling for ESP in <filename>keymat.c</filename>
     is separated into its own set of functions. Keying material
     handling consists of generation and drawing of the keys from the
     data received from the peer.
     </para>

!Inet/ipv6/hip/keymat.c

     </sect1>

     <sect1><title>HIP Initialization and Other General Functions</title>

     <para>
     The initialization of the HIP module is handled in
     <filename>hip.c</filename>. It also includes other more or less
     general functions.
     </para>

!Inet/ipv6/hip/hip.c

     </sect1>

     <sect1><title>Cookie Processing</title>

     <para>
     File <filename>cookie.c</filename> includes all the functions
     related to processing HIP cookies. It includes indexing and creation
     of cookie at responder end, and solving of cookies at responder end.
     </para>

!Inet/ipv6/hip/cookie.c

     </sect1>

     <sect1><title>Host Association Database (HADB)</title>

     <para>
     File <filename>hadb.c</filename> contains the functions needed for
     storing and retrieving HIP state. The databases are indexed by both
     SPI and HIT.
     </para>

!Inet/ipv6/hip/hadb.c

     </sect1>

     <sect1><title>Hashtable</title>

     <para>
     File <filename>hashtable.c</filename> contains are generic implementation
     of a hashtable.
     </para>

!Inet/ipv6/hip/hashtable.c

     </sect1>

     <sect1><title>Readdressing</title>

     <para>
     File <filename>rea.c</filename> contains the code needed for readdressing
     signalling in HIP.
     </para>

!Inet/ipv6/hip/rea.c

     </sect1>

     <sect1><title>Rendezvous Server</title>

     <para>
     File <filename>rvs.c</filename> implements the rendezvous module
     functionality.
     </para>

!Inet/ipv6/hip/rvs.c

     </sect1>

     <sect1><title>Security Assocation Related Functions</title>

     <para>
     File <filename>security.c</filename> includes the functionality needed
     to set up proper IPsec security association using the standard kernel
     interfaces.
     </para>

!Inet/ipv6/hip/security.c

     </sect1>

     <sect1><title>Workqueue</title>

     <para>
     File <filename>workqueue.c</filename> contains the HIP work queue
     implementation. The main task of the work queues is to handle the
     long lasting asymmetric cryptographic operations. Incoming HIP packets
     are put into queue when other packets are being processed. This way,
     incoming HIP packets do not need to be dropped while others are being
     processed.
     </para>

     </sect1>

     <sect1><title>Miscellaneous Functions</title>

     <para>
     File <filename>misc.c</filename> contains miscellaneous functions that
     have not been categorized yet.
     </para>

!Inet/ipv6/hip/misc.c

     </sect1>

     <sect1><title>Debugging utilities</title>

     <para>
     Files <filename>debug.c</filename> and <filename>debug.h</filename>
     contain the functions used for debugging HIP module. The messages
     are sent to disk using the standard syslog facility.
     </para>

!Inet/ipv6/hip/debug.c

     </sect1>

  </chapter>

  <chapter id="unit">

     <title>Unit Test Environment</title>

     <para>
     Unit testing related functions are located in <filename>unit.c</filename>
     and <filename>test.c</filename>.
     </para>

     <sect1><title>Unit Testing Framework</title>

     <para>
     The unit testing environment in
     <filename>linux/net/ipv6/hip/unit.c</filename> is used for
     triggering unit tests from the command line. The unit testing
     environment separates test cases a special kind of hierarchy:
     testspaces, testsuites and testcases. The testspace divides the
     testcases to those that will be executed in the userspace and to
     those that will be executed in the kernelspace. Testsuites can
     refer to e.g. "crypto", "message" in the context of the
     testspace.  Testcases name the individual testcases in the
     context of the testspace.
     </para>

!Inet/ipv6/hip/unit.c

     </sect1>

     <sect1><title>Unit Testcases</title>

     <para>
     File <filename>test.c</filename> contains the test cases for the
     unit test environment.
     </para>

!Inet/ipv6/hip/test.c

     </sect1>

  </chapter>

  <chapter id="userspace-comm">
     <title>Userspace Communication</title>

     <para>
     Manual configuration of the HIP module from the userspace is handled
     in <filename>daemon.c</filename>. The actual message transfer mechanism
     is implemented in <filename>ioctl.c</filename>. HIP socket handler
     is defined in <filename>socket.c</filename>.
     </para>

     <sect1><title>Daemon</title>

     <para>
     File <filename>daemon.c</filename> provides an "higher" level interface
     to handle the manual configuration of the HIP module (the filename is a
     bit misleading for historical reasons). The actual bits and pieces are
     handled in the <filename>ioctl.c</filename>.
     </para>

!Inet/ipv6/hip/daemon.c

     </sect1>

     <sect1><title>IOCTL</title>

     <para>
     <filename>ioctl.c</filename> handles the details of the actual
     message copying between userspace and kernelspace. It is
     implemented using <function>ioctl</function> calls. At some point in
     the future, the <function>ioctl</function> mechanism will be replaced
     with a better mechanism.
     </para>

!Inet/ipv6/hip/ioctl.c

     </sect1>

     <sect1><title>Socket</title>

     <para>
     File <filename>socket.c</filename> implements the kernel socket handler
     interface. It handles the assignment of new EID numbers,
     EID-to-HIT translation and socket options. All userspace sockets API
     function calls, such as <function>bind</function>,
     <function>connect</function> etc. translate eventually to this file if
     the family of the socket is PF_HIP.
     </para>

     <para>
     In effect, the HIP socket handler is a wrapper for the IP socket handlers.
     The main purpose of the HIP socket handler is to catch the HIP socket
     options and provide the EID-to-HIT translation service.
     </para>

!Inet/ipv6/hip/socket.c

     </sect1>

  </chapter>

</book>
