Linux BEET-mode patch

Authors:	Abhinav Pathak <abpathak@iitk.ac.in>
		Diego Beltrami <diego.beltrami@gmail.com>
		Miika Komu <miika@iki.fi>
		Kristian Slavov <kristian.slavov@nomadiclab.com>
		Jeff Ahrenholz <jeffrey.m.ahrenholz@boeing.com>


Changelog:	May 25, 2005 this document created


Description
-----------
This patch extends the native Linux 2.6 kernel IPsec to support 
Bound-End-to-End-Tunnel (BEET) mode:

Abstract

   This document specifies a new mode, called Bound End-to-End Tunnel
   (BEET) mode, for IPsec ESP.  The new mode augments the existing ESP
   tunnel and transport modes.  For end-to-end tunnels, the new mode
   provides limited tunnel mode semantics without the regular tunnel
   mode overhead.  The mode is intended to support new uses of ESP,
   including mobility and multi-address multi-homing.

http://www.ietf.org/internet-drafts/draft-nikander-esp-beet-mode-03.txt

Data Structures
---------------

* policy = inner = selector.family
* SA = outer = props.family

About protocol support
----------------------

The BEET mode supports both ESP and AH (IPComp is not meant to work alone with
BEET because there is lack of information of xfrm_state: IPComp does not
compress packets whose size is less than a certain threshold -see RFC 2394-).

This patch allows only for plain family transform, meaning the inner and outer 
families are the same.
A second patch which deals with different family will be created.


Packet en/decapsulation
-----------------------

Note: the family of the xfrm function in the input side is
different. For example, in the inner=4, outer=6 case, xfrm4_output is
called (because the socket is IPv4 socket) on the output side, and
xfrm6_rcv_encap() is called on the input side (because the packet
received is an IPv6 packet).


****** OUTPUT ******

When entering xfrm[4-6]_output() the packet is:

	---------------------
	|IP Hdr|     |      |
	|INNER | TCP | Data |
	---------------------
		  |
		  |
	    xfrm[4-6]_encap()
		  |
		  |
		  V
	------------------------------
	|IP Hdr|        |     |      |
	|INNER |        | TCP | Data |
	------------------------------
		  |
		  |
       changing the IP hdr inner->outer
		  |
		  |
		  V
	------------------------------
	|IP Hdr|        |     |      |
	|OUTER |        | TCP | Data |
	------------------------------
		  |
		  |
		  |
	   x->type->output()
		  |
		  |
		  V
	-------------------------------------------
	|IP Hdr| ESP or |     |      | ESP   | ESP|
	|INNER | AH hdr | TCP | Data |Trailer|Auth|
	-------------------------------------------
		  |                  |<---------->|
		  |                    only if ESP is used
		  |
		  V
	    packet to be sent



****** INPUT ******

The packet is received and the function xfrm[4-6]_rcv_encap() is invoked.
The received packet is in the same format as it has been sent:

	-------------------------------------------
	|IP Hdr| ESP or |     |      | ESP   | ESP|
	|OUTER | AH hdr | TCP | Data |Trailer|Auth|
	-------------------------------------------
		  |                  |<---------->|
		  |                    only if ESP is used
		  |
       	      x->type->input()
		  |
		  |
		  V
	---------------------
	|IP Hdr|     |      |
	|OUTER | TCP | Data |
	---------------------
		  |
		  |
	 if mode==BEET the IP hdr is pushed
	 (the length field is correctly readjusted and
	  in case of IPv4 the checksum is properly set)
		  |
		  |
		  V
	------------------------------
	|IP Hdr|        |     |      |
	|INNER |        | TCP | Data |
	------------------------------
		  |
		  |
       	   Changing IPHdr outer->inner
		  |
		  |
		  V
	---------------------
	|IP Hdr|     |      |
	|INNER | TCP | Data |
	---------------------
		  |
		  |
		  |
		  V
	      netif_rx()
