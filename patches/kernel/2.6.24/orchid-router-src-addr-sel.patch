diff -uprN linux-2.6.24.2/include/net/ipv6.h linux-2.6.24.2-saddr-fix/include/net/ipv6.h
--- linux-2.6.24.2/include/net/ipv6.h	2008-02-11 07:51:11.000000000 +0200
+++ linux-2.6.24.2-saddr-fix/include/net/ipv6.h	2008-02-21 02:46:24.000000000 +0200
@@ -401,6 +401,16 @@ static inline int ipv6_addr_v4mapped(con
 }
 
 /*
+ * Check for a RFC 4843 ORCHID address 
+ * (Overlay Routable Cryptographic Hash Identifiers)
+ */
+static inline int ipv6_addr_orchid(const struct in6_addr *a)
+{
+	return ((a->s6_addr32[0] & htonl(0xfffffff0))
+		== htonl(0x20010010));
+}
+
+/*
  * find the first different bit between two addresses
  * length of address must be a multiple of 32bits
  */
diff -uprN linux-2.6.24.2/net/ipv6/addrconf.c linux-2.6.24.2-saddr-fix/net/ipv6/addrconf.c
--- linux-2.6.24.2/net/ipv6/addrconf.c	2008-02-11 07:51:11.000000000 +0200
+++ linux-2.6.24.2-saddr-fix/net/ipv6/addrconf.c	2008-02-21 11:23:54.000000000 +0200
@@ -889,6 +889,7 @@ static inline int ipv6_saddr_label(const
   * 	::ffff:0:0/96		4
   *	fc00::/7		5
   * 	2001::/32		6
+  *	2001:10::/28		7
   */
 	if (type & IPV6_ADDR_LOOPBACK)
 		return 0;
@@ -898,6 +899,8 @@ static inline int ipv6_saddr_label(const
 		return 4;
 	else if (addr->s6_addr32[0] == htonl(0x20010000))
 		return 6;
+	else if ((addr->s6_addr32[0] & htonl(0xfffffff0)) == htonl(0x20010010))
+		return 7;
 	else if (addr->s6_addr16[0] == htons(0x2002))
 		return 2;
 	else if ((addr->s6_addr[0] & 0xfe) == 0xfc)
@@ -1125,6 +1128,11 @@ int ipv6_dev_get_saddr(struct net_device
 			if (hiscore.rule < 7)
 				hiscore.rule++;
 #endif
+
+			/* Skip rule 8 for orchid -> non-orchid address pairs. */
+			if (ipv6_addr_orchid(&ifa->addr) && !ipv6_addr_orchid(daddr))
+				continue;
+
 			/* Rule 8: Use longest matching prefix */
 			if (hiscore.rule < 8) {
 				hiscore.matchlen = ipv6_addr_diff(&ifa_result->addr, daddr);
