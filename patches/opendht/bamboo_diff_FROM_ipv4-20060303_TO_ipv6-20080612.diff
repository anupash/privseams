diff -urN bamboo/bin/output bamboo1/bin/output
--- bamboo/bin/output	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/bin/output	2008-05-23 13:27:03.000000000 +0300
@@ -0,0 +1,184 @@
+2008-05-23 10:29:25,762 INFO  bamboo.lss.DustDevil: DustDevil version 0.1
+2008-05-23 10:29:26,926 INFO  bamboo.lss.Network: Network /192.168.0.3 now listening on port 5850
+2008-05-23 10:29:26,934 FATAL bamboo.lss.Network: could not require inbound = false for bamboo.router.LookupNodeidReq
+2008-05-23 10:29:26,935 INFO  bamboo.lss.Network: config.drop_prob=0.0
+2008-05-23 10:29:26,935 INFO  bamboo.lss.Network: config.separate_thread=false
+2008-05-23 10:29:26,943 INFO  bamboo.lss.UdpCC: the address is:/192.168.0.3:5850
+2008-05-23 10:29:27,138 INFO  bamboo.lss.Network: config.udpcc_debug_level=-1
+2008-05-23 10:29:27,138 INFO  bamboo.lss.Network: config.udpcc_rx_sockbuf_size=-1
+2008-05-23 10:29:27,138 INFO  bamboo.lss.Network: config.timeout_factor=-1.0
+2008-05-23 10:29:27,138 INFO  bamboo.lss.Network: config.timeout_diff=-1.0
+2008-05-23 10:29:27,138 INFO  bamboo.lss.Network: config.mac_key_file=null
+2008-05-23 10:29:27,139 INFO  bamboo.lss.Network: Network /2001:250:1800:1:0:0:0:88 now listening on port 5853
+2008-05-23 10:29:27,140 FATAL bamboo.lss.Network: could not require inbound = false for bamboo.router.LookupNodeidReq
+2008-05-23 10:29:27,140 INFO  bamboo.lss.Network: config.drop_prob=0.0
+2008-05-23 10:29:27,140 INFO  bamboo.lss.Network: config.separate_thread=false
+2008-05-23 10:29:27,140 INFO  bamboo.lss.UdpCC: the address is:/2001:250:1800:1:0:0:0:88:5853
+2008-05-23 10:29:27,140 INFO  bamboo.lss.Network: config.udpcc_debug_level=-1
+2008-05-23 10:29:27,140 INFO  bamboo.lss.Network: config.udpcc_rx_sockbuf_size=-1
+2008-05-23 10:29:27,141 INFO  bamboo.lss.Network: config.timeout_factor=-1.0
+2008-05-23 10:29:27,141 INFO  bamboo.lss.Network: config.timeout_diff=-1.0
+2008-05-23 10:29:27,141 INFO  bamboo.lss.Network: config.mac_key_file=null
+2008-05-23 10:29:27,679 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: config.vc_type=2.5d
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: Using 2.5D virtual coordinates
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: config.use_reverse_ping=true
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: config.generate_pings=true
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: config.eavesdrop_pings=false
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: config.ping_period=10000
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: config.status_period=-1
+2008-05-23 10:29:27,683 INFO  bamboo.vivaldi.Vivaldi: config.seed=-1
+2008-05-23 10:29:27,683 INFO  bamboo.vivaldi.Vivaldi: config.update_start=-1
+2008-05-23 10:29:27,683 INFO  bamboo.vivaldi.Vivaldi: config.track_initial=-1
+2008-05-23 10:29:27,683 INFO  bamboo.vivaldi.Vivaldi: config.version=1
+2008-05-23 10:29:27,683 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:27,683 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:27,684 INFO  bamboo.www.WebInterface: config.build_file=null
+2008-05-23 10:29:27,684 INFO  bamboo.www.WebInterface: config.include_logs=false
+2008-05-23 10:29:27,684 INFO  bamboo.www.WebInterface: config.storage_manager_stage=StorageManager
+2008-05-23 10:29:27,698 WARN  bamboo.util.GetTimeOfDayCC: GetTimeOfDayCC not available
+2008-05-23 10:29:27,730 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:27,734 INFO  bamboo.db.StorageManager: config.homedir=/home/xiaopeng/store/store-ipv4-5850
+2008-05-23 10:29:27,754 INFO  bamboo.db.StorageManager: config.print_open_cursors=false
+2008-05-23 10:29:27,754 INFO  bamboo.db.StorageManager: config.libdb_cache_size=-1
+2008-05-23 10:29:28,080 INFO  bamboo.db.StorageManager: Testing database
+2008-05-23 10:29:28,119 INFO  bamboo.db.StorageManager: Test successful
+2008-05-23 10:29:28,120 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.desired_replicas=2147483646
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.iterative_routing=false
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.merkle_tree_expansion=-1
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.ae_period=-1
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.required_acks=2
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.put_retry_time=-1
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.put_give_up_time=-1
+2008-05-23 10:29:28,131 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:28,133 INFO  bamboo.dht.Dht: config.get_timeout=5000
+2008-05-23 10:29:28,134 INFO  bamboo.dht.Dht: config.iterative_routing=false
+2008-05-23 10:29:28,134 INFO  bamboo.dht.Dht: config.storage_manager_stage=StorageManager
+2008-05-23 10:29:28,134 INFO  bamboo.dht.Dht: config.min_replica_count=1
+2008-05-23 10:29:28,134 INFO  bamboo.dht.Dht: config.virtual_disks=-1
+2008-05-23 10:29:28,198 INFO  bamboo.dht.Dht: ttl=1 hour, disk size=56.25 MBs, rate=16 KBs/s
+2008-05-23 10:29:28,209 INFO  bamboo.dht.Dht: ttl=1 day, disk size=1.32 GBs, rate=16 KBs/s
+2008-05-23 10:29:28,210 INFO  bamboo.dht.Dht: ttl=1 week, disk size=9.23 GBs, rate=16 KBs/s
+2008-05-23 10:29:28,210 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:28,213 FATAL bamboo.router.Router: could not require inbound = true for bamboo.router.LookupNodeidReq
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: now we are in init function of Router class. call by DustDevil init_node()
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.no_rexmit_routes=false
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.ignore_possibly_down=false
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.ignore_proximity=false
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.digit_values=2
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.partition_check_alarm_period=60
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.periodic_ping_period=20
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.ls_alarm_period=4
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.near_rt_alarm_period=10
+2008-05-23 10:29:28,223 INFO  bamboo.router.Router: config.far_rt_alarm_period=20
+2008-05-23 10:29:28,223 INFO  bamboo.router.Router: config.lookup_rt_alarm_period=0
+2008-05-23 10:29:28,223 INFO  bamboo.router.Router: config.explicit_guid=null
+2008-05-23 10:29:28,223 INFO  bamboo.router.Router: config.pkey=null
+2008-05-23 10:29:28,242 INFO  bamboo.router.Router: the network of router is: bamboo.lss.Network@cb6009
+2008-05-23 10:29:28,242 INFO  bamboo.router.Router: the network of router is: bamboo.lss.Network@e28b9
+2008-05-23 10:29:28,243 INFO  bamboo.router.Router: the my_neighbor_info of router is: ( peer:2001:250:1800:1:0:0:0:88:5853, node_id:192.168.0.3:5850, 0xfacc4f7c)
+2008-05-23 10:29:28,243 INFO  bamboo.router.Router: config.gateway_count=-1
+2008-05-23 10:29:28,243 INFO  bamboo.router.Router: config.gateway=192.168.0.3:5850
+2008-05-23 10:29:28,244 INFO  bamboo.router.Router: Bamboo node 192.168.0.3:5850 has guid 0xfacc4f7c
+2008-05-23 10:29:28,244 INFO  bamboo.router.Router: config.leaf_set_size=4
+2008-05-23 10:29:28,255 INFO  bamboo.router.Router: the my_neighbor_info of router is:   0	( peer:2001:250:1800:1:0:0:0:88:5853, node_id:192.168.0.3:5850, 0xfacc4f7c)
+
+2008-05-23 10:29:28,255 INFO  bamboo.router.Router: config.rt_scale=-1.0
+2008-05-23 10:29:28,270 INFO  bamboo.router.Router: config.location_cache_size=0
+2008-05-23 10:29:28,271 INFO  bamboo.router.Router: config.immediate_join=true
+2008-05-23 10:29:28,271 INFO  bamboo.router.Router: end of init function of router
+2008-05-23 10:29:28,271 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:28,271 INFO  bamboo.dht.Gateway: config.allow_unauth_rm=false
+2008-05-23 10:29:28,275 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:28,286 INFO  bamboo.dmgr.DataManager: DataManager starts workseda.sandStorm.api.StagesInitializedSignal@1835282
+Sandstorm: Ready
+2008-05-23 10:29:28,286 INFO  bamboo.lss.ASyncCoreImpl: async_main called
+2008-05-23 10:29:28,313 INFO  bamboo.dht.Dht: client 32.1.2.80 usage now 5.97 KBs of 5.97 KBs total.
+2008-05-23 10:29:28,314 INFO  bamboo.dht.Dht: client 192.168.0.3 usage now 346 bytes of 6.3 KBs total.
+2008-05-23 10:29:28,314 INFO  bamboo.dht.Dht: client 192.168.0.7 usage now 2.01 KBs of 8.32 KBs total.
+2008-05-23 10:29:28,332 INFO  bamboo.router.Router: Joined through gateway 192.168.0.3:5850
+Tapestry: ready
+2008-05-23 10:29:28,339 INFO  bamboo.router.Router: 
+in the ready,... the end of ready
+
+2008-05-23 10:29:30,587 INFO  bamboo.dht.Gateway: got connection from 192.168.0.7:37606
+2008-05-23 10:29:30,663 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+
+2008-05-23 10:29:30,667 INFO  bamboo.dht.Gateway: put req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965292 key=0xf00b8f48 secret_hash=0x00000000 value_hash=0xf00b8f48 size=1024 ttl=86400
+2008-05-23 10:29:30,671 INFO  bamboo.dmgr.DataManager: got key=0xf00b8f48 secret_hash=0x00000000 data_hash=0xf00b8f48 time_usec=0x44de1a0fb9fe0 ttl=86400 client_id=192.168.0.7 size=1024 as root
+2008-05-23 10:29:30,694 INFO  bamboo.dht.Gateway: put req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965293 key=0xf342e9f4 secret_hash=0x00000000 value_hash=0xf342e9f4 size=64 ttl=86400
+2008-05-23 10:29:30,694 INFO  bamboo.dmgr.DataManager: got key=0xf342e9f4 secret_hash=0x00000000 data_hash=0xf342e9f4 time_usec=0x44de1a0fc0570 ttl=86400 client_id=192.168.0.7 size=64 as root
+2008-05-23 10:29:30,695 INFO  bamboo.dht.Gateway: put req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965294 key=0xc83e5518 secret_hash=0x00000000 value_hash=0xc83e5518 size=128 ttl=3600
+2008-05-23 10:29:30,695 INFO  bamboo.dmgr.DataManager: got key=0xc83e5518 secret_hash=0x00000000 data_hash=0xc83e5518 time_usec=0x44de1a0fc0958 ttl=3600 client_id=192.168.0.7 size=128 as root
+2008-05-23 10:29:30,736 INFO  bamboo.db.StorageManager: client 192.168.0.7, +1101 bytes, old=2.01 KBs, new=3.09 KBs
+2008-05-23 10:29:30,737 INFO  bamboo.dht.Dht: client 192.168.0.7 usage now 3.09 KBs of 9.39 KBs total.
+2008-05-23 10:29:30,738 INFO  bamboo.db.StorageManager: put key=0xf00b8f48 time_usec=0x44de1a0fb9fe0 ttl=86400 client_id=192.168.0.7 secret_hash=0x00000000 data_hash=0xf00b8f48 size=1024
+2008-05-23 10:29:30,739 INFO  bamboo.db.StorageManager: client 192.168.0.7, +141 bytes, old=3.09 KBs, new=3.23 KBs
+2008-05-23 10:29:30,739 INFO  bamboo.db.StorageManager: put key=0xf342e9f4 time_usec=0x44de1a0fc0570 ttl=86400 client_id=192.168.0.7 secret_hash=0x00000000 data_hash=0xf342e9f4 size=64
+2008-05-23 10:29:30,740 INFO  bamboo.db.StorageManager: client 192.168.0.7, +205 bytes, old=3.23 KBs, new=3.43 KBs
+2008-05-23 10:29:30,740 INFO  bamboo.db.StorageManager: put key=0xc83e5518 time_usec=0x44de1a0fc0958 ttl=3600 client_id=192.168.0.7 secret_hash=0x00000000 data_hash=0xc83e5518 size=128
+2008-05-23 10:29:30,798 INFO  bamboo.dht.Dht: client 192.168.0.7 usage now 3.23 KBs of 9.53 KBs total.
+2008-05-23 10:29:30,799 INFO  bamboo.dht.Dht: client 192.168.0.7 usage now 3.43 KBs of 9.73 KBs total.
+2008-05-23 10:29:30,820 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:30,821 INFO  bamboo.dht.Gateway: put resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965292 key=0xf00b8f48 value hash=0x00000000 value hash=0xf00b8f48 size=1024 ttl=86400 stat=0 lat=154 ms
+2008-05-23 10:29:30,821 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:30,822 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:30,822 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:30,822 INFO  bamboo.dht.Gateway: put resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965293 key=0xf342e9f4 value hash=0x00000000 value hash=0xf342e9f4 size=64 ttl=86400 stat=0 lat=128 ms
+2008-05-23 10:29:30,823 INFO  bamboo.dht.Gateway: put resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965294 key=0xc83e5518 value hash=0x00000000 value hash=0xc83e5518 size=128 ttl=3600 stat=0 lat=128 ms
+2008-05-23 10:29:30,823 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:32,080 INFO  bamboo.dht.Gateway: put req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965295 key=0xda3fc5d2 secret_hash=0x00000000 value_hash=0xda3fc5d2 size=128 ttl=3600
+2008-05-23 10:29:32,081 INFO  bamboo.dmgr.DataManager: got key=0xda3fc5d2 secret_hash=0x00000000 data_hash=0xda3fc5d2 time_usec=0x44de1a1112b80 ttl=3600 client_id=192.168.0.7 size=128 as root
+2008-05-23 10:29:32,082 INFO  bamboo.db.StorageManager: client 192.168.0.7, +205 bytes, old=3.43 KBs, new=3.63 KBs
+2008-05-23 10:29:32,082 INFO  bamboo.db.StorageManager: put key=0xda3fc5d2 time_usec=0x44de1a1112b80 ttl=3600 client_id=192.168.0.7 secret_hash=0x00000000 data_hash=0xda3fc5d2 size=128
+2008-05-23 10:29:32,082 INFO  bamboo.dht.Dht: client 192.168.0.7 usage now 3.63 KBs of 9.93 KBs total.
+2008-05-23 10:29:32,083 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:32,083 INFO  bamboo.dht.Gateway: put resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965295 key=0xda3fc5d2 value hash=0x00000000 value hash=0xda3fc5d2 size=128 ttl=3600 stat=0 lat=3 ms
+2008-05-23 10:29:32,083 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:32,906 INFO  bamboo.dht.Gateway: get req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965296 key=0xf342e9f4 maxvals=1 placemark=(NONE)
+2008-05-23 10:29:32,908 INFO  bamboo.dht.Dht: upcall for get req key=0xf342e9f4 return addr=( peer:192.168.0.3:5850, node_id:192.168.0.7:37606, 0xfacc4f7c) seq=4832815153398794936 reached replica, new recur style, replicas=[192.168.0.3:5850], synced=[]
+2008-05-23 10:29:32,924 INFO  bamboo.dht.Dht: local read done for new style recur get req seq=4832815153398794936
+2008-05-23 10:29:32,940 INFO  bamboo.dht.Dht: got new recur get resp key=0xf342e9f4 return addr=192.168.0.3:5850 seq=4832815153398794936 from 192.168.0.3:5850 replicas=[192.168.0.3:5850] synced=[]
+2008-05-23 10:29:32,940 INFO  bamboo.dht.Dht:  iterative get req key=0xf342e9f4 return addr=192.168.0.3:5850 seq=4832815153398794936 done
+2008-05-23 10:29:32,945 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:32,946 INFO  bamboo.dht.Gateway: get resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965296 key=0xf342e9f4 maxvals=2021654529 req placemark=(NONE) values=[(64, SHA 0x00000000, 0xf342e9f4, 86397)] resp placemark=(NONE) lat=49 ms
+2008-05-23 10:29:32,946 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:35,371 INFO  bamboo.dht.Gateway: get req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965297 key=0xf00b8f48 maxvals=1 placemark=(NONE)
+2008-05-23 10:29:35,372 INFO  bamboo.dht.Dht: upcall for get req key=0xf00b8f48 return addr=( peer:192.168.0.3:5850, node_id:192.168.0.7:37606, 0xfacc4f7c) seq=4832815153398794937 reached replica, new recur style, replicas=[192.168.0.3:5850], synced=[]
+2008-05-23 10:29:35,380 INFO  bamboo.db.StorageManager: client 32.1.2.80, -205 bytes, old=5.97 KBs, new=5.77 KBs
+2008-05-23 10:29:35,380 INFO  bamboo.db.StorageManager: dropping expired key=0xf02633f1 time_usec=0x44dd225a8b170 ttl=3600 client_id=32.1.2.80 data_hash=0xf02633f1 size=128
+2008-05-23 10:29:35,380 INFO  bamboo.dht.Dht: client 32.1.2.80 usage now 5.77 KBs of 9.73 KBs total.
+2008-05-23 10:29:35,381 INFO  bamboo.dht.Dht: local read done for new style recur get req seq=4832815153398794937
+2008-05-23 10:29:35,381 INFO  bamboo.dht.Dht: got new recur get resp key=0xf00b8f48 return addr=192.168.0.3:5850 seq=4832815153398794937 from 192.168.0.3:5850 replicas=[192.168.0.3:5850] synced=[]
+2008-05-23 10:29:35,382 INFO  bamboo.dht.Dht:  iterative get req key=0xf00b8f48 return addr=192.168.0.3:5850 seq=4832815153398794937 done
+2008-05-23 10:29:35,382 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:35,382 INFO  bamboo.dht.Gateway: get resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965297 key=0xf00b8f48 maxvals=2021654529 req placemark=(NONE) values=[(1024, SHA 0x00000000, 0xf00b8f48, 86395)] resp placemark=(NONE) lat=11 ms
+2008-05-23 10:29:35,382 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:38,295 INFO  bamboo.lss.ASyncCoreImpl: watchdog awakened
+2008-05-23 10:29:40,776 INFO  bamboo.dht.Gateway: get req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965298 key=0xf342e9f4 maxvals=1 placemark=(NONE)
+2008-05-23 10:29:40,776 INFO  bamboo.dht.Dht: upcall for get req key=0xf342e9f4 return addr=( peer:192.168.0.3:5850, node_id:192.168.0.7:37606, 0xfacc4f7c) seq=4832815153398794938 reached replica, new recur style, replicas=[192.168.0.3:5850], synced=[]
+2008-05-23 10:29:40,777 INFO  bamboo.dht.Dht: local read done for new style recur get req seq=4832815153398794938
+2008-05-23 10:29:40,778 INFO  bamboo.dht.Dht: got new recur get resp key=0xf342e9f4 return addr=192.168.0.3:5850 seq=4832815153398794938 from 192.168.0.3:5850 replicas=[192.168.0.3:5850] synced=[]
+2008-05-23 10:29:40,778 INFO  bamboo.dht.Dht:  iterative get req key=0xf342e9f4 return addr=192.168.0.3:5850 seq=4832815153398794938 done
+2008-05-23 10:29:40,778 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:40,779 INFO  bamboo.dht.Gateway: get resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965298 key=0xf342e9f4 maxvals=2021654529 req placemark=(NONE) values=[(64, SHA 0x00000000, 0xf342e9f4, 86389)] resp placemark=(NONE) lat=4 ms
+2008-05-23 10:29:40,779 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:42,794 INFO  bamboo.dht.Gateway: put req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965299 key=0x55115181 secret_hash=0x00000000 value_hash=0x55115181 size=512 ttl=86400
+2008-05-23 10:29:42,795 INFO  bamboo.dmgr.DataManager: got key=0x55115181 secret_hash=0x00000000 data_hash=0x55115181 time_usec=0x44de1a1b4a710 ttl=86400 client_id=192.168.0.7 size=512 as root
+2008-05-23 10:29:42,796 INFO  bamboo.db.StorageManager: client 192.168.0.7, +589 bytes, old=3.63 KBs, new=4.2 KBs
+2008-05-23 10:29:42,796 INFO  bamboo.db.StorageManager: put key=0x55115181 time_usec=0x44de1a1b4a710 ttl=86400 client_id=192.168.0.7 secret_hash=0x00000000 data_hash=0x55115181 size=512
+2008-05-23 10:29:42,796 INFO  bamboo.dht.Dht: client 192.168.0.7 usage now 4.2 KBs of 10.31 KBs total.
+2008-05-23 10:29:42,797 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:42,797 INFO  bamboo.dht.Gateway: put resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965299 key=0x55115181 value hash=0x00000000 value hash=0x55115181 size=512 ttl=86400 stat=0 lat=3 ms
+2008-05-23 10:29:42,797 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:43,277 INFO  bamboo.db.StorageManager: shutdown hook checkpointing database
+2008-05-23 10:29:43,297 INFO  bamboo.db.StorageManager: shutdown hook checkpoint complete
diff -urN bamboo/bin/output~ bamboo1/bin/output~
--- bamboo/bin/output~	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/bin/output~	2008-05-23 11:29:43.000000000 +0300
@@ -0,0 +1,183 @@
+2008-05-23 10:29:25,762 INFO  bamboo.lss.DustDevil: DustDevil version 0.1
+2008-05-23 10:29:26,926 INFO  bamboo.lss.Network: Network /192.168.0.3 now listening on port 5850
+2008-05-23 10:29:26,934 FATAL bamboo.lss.Network: could not require inbound = false for bamboo.router.LookupNodeidReq
+2008-05-23 10:29:26,935 INFO  bamboo.lss.Network: config.drop_prob=0.0
+2008-05-23 10:29:26,935 INFO  bamboo.lss.Network: config.separate_thread=false
+2008-05-23 10:29:26,943 INFO  bamboo.lss.UdpCC: the address is:/192.168.0.3:5850
+2008-05-23 10:29:27,138 INFO  bamboo.lss.Network: config.udpcc_debug_level=-1
+2008-05-23 10:29:27,138 INFO  bamboo.lss.Network: config.udpcc_rx_sockbuf_size=-1
+2008-05-23 10:29:27,138 INFO  bamboo.lss.Network: config.timeout_factor=-1.0
+2008-05-23 10:29:27,138 INFO  bamboo.lss.Network: config.timeout_diff=-1.0
+2008-05-23 10:29:27,138 INFO  bamboo.lss.Network: config.mac_key_file=null
+2008-05-23 10:29:27,139 INFO  bamboo.lss.Network: Network /2001:250:1800:1:0:0:0:88 now listening on port 5853
+2008-05-23 10:29:27,140 FATAL bamboo.lss.Network: could not require inbound = false for bamboo.router.LookupNodeidReq
+2008-05-23 10:29:27,140 INFO  bamboo.lss.Network: config.drop_prob=0.0
+2008-05-23 10:29:27,140 INFO  bamboo.lss.Network: config.separate_thread=false
+2008-05-23 10:29:27,140 INFO  bamboo.lss.UdpCC: the address is:/2001:250:1800:1:0:0:0:88:5853
+2008-05-23 10:29:27,140 INFO  bamboo.lss.Network: config.udpcc_debug_level=-1
+2008-05-23 10:29:27,140 INFO  bamboo.lss.Network: config.udpcc_rx_sockbuf_size=-1
+2008-05-23 10:29:27,141 INFO  bamboo.lss.Network: config.timeout_factor=-1.0
+2008-05-23 10:29:27,141 INFO  bamboo.lss.Network: config.timeout_diff=-1.0
+2008-05-23 10:29:27,141 INFO  bamboo.lss.Network: config.mac_key_file=null
+2008-05-23 10:29:27,679 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: config.vc_type=2.5d
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: Using 2.5D virtual coordinates
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: config.use_reverse_ping=true
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: config.generate_pings=true
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: config.eavesdrop_pings=false
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: config.ping_period=10000
+2008-05-23 10:29:27,682 INFO  bamboo.vivaldi.Vivaldi: config.status_period=-1
+2008-05-23 10:29:27,683 INFO  bamboo.vivaldi.Vivaldi: config.seed=-1
+2008-05-23 10:29:27,683 INFO  bamboo.vivaldi.Vivaldi: config.update_start=-1
+2008-05-23 10:29:27,683 INFO  bamboo.vivaldi.Vivaldi: config.track_initial=-1
+2008-05-23 10:29:27,683 INFO  bamboo.vivaldi.Vivaldi: config.version=1
+2008-05-23 10:29:27,683 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:27,683 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:27,684 INFO  bamboo.www.WebInterface: config.build_file=null
+2008-05-23 10:29:27,684 INFO  bamboo.www.WebInterface: config.include_logs=false
+2008-05-23 10:29:27,684 INFO  bamboo.www.WebInterface: config.storage_manager_stage=StorageManager
+2008-05-23 10:29:27,698 WARN  bamboo.util.GetTimeOfDayCC: GetTimeOfDayCC not available
+2008-05-23 10:29:27,730 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:27,734 INFO  bamboo.db.StorageManager: config.homedir=/home/xiaopeng/store/store-ipv4-5850
+2008-05-23 10:29:27,754 INFO  bamboo.db.StorageManager: config.print_open_cursors=false
+2008-05-23 10:29:27,754 INFO  bamboo.db.StorageManager: config.libdb_cache_size=-1
+2008-05-23 10:29:28,080 INFO  bamboo.db.StorageManager: Testing database
+2008-05-23 10:29:28,119 INFO  bamboo.db.StorageManager: Test successful
+2008-05-23 10:29:28,120 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.desired_replicas=2147483646
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.iterative_routing=false
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.merkle_tree_expansion=-1
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.ae_period=-1
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.required_acks=2
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.put_retry_time=-1
+2008-05-23 10:29:28,131 INFO  bamboo.dmgr.DataManager: config.put_give_up_time=-1
+2008-05-23 10:29:28,131 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:28,133 INFO  bamboo.dht.Dht: config.get_timeout=5000
+2008-05-23 10:29:28,134 INFO  bamboo.dht.Dht: config.iterative_routing=false
+2008-05-23 10:29:28,134 INFO  bamboo.dht.Dht: config.storage_manager_stage=StorageManager
+2008-05-23 10:29:28,134 INFO  bamboo.dht.Dht: config.min_replica_count=1
+2008-05-23 10:29:28,134 INFO  bamboo.dht.Dht: config.virtual_disks=-1
+2008-05-23 10:29:28,198 INFO  bamboo.dht.Dht: ttl=1 hour, disk size=56.25 MBs, rate=16 KBs/s
+2008-05-23 10:29:28,209 INFO  bamboo.dht.Dht: ttl=1 day, disk size=1.32 GBs, rate=16 KBs/s
+2008-05-23 10:29:28,210 INFO  bamboo.dht.Dht: ttl=1 week, disk size=9.23 GBs, rate=16 KBs/s
+2008-05-23 10:29:28,210 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:28,213 FATAL bamboo.router.Router: could not require inbound = true for bamboo.router.LookupNodeidReq
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: now we are in init function of Router class. call by DustDevil init_node()
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.no_rexmit_routes=false
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.ignore_possibly_down=false
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.ignore_proximity=false
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.digit_values=2
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.partition_check_alarm_period=60
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.periodic_ping_period=20
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.ls_alarm_period=4
+2008-05-23 10:29:28,222 INFO  bamboo.router.Router: config.near_rt_alarm_period=10
+2008-05-23 10:29:28,223 INFO  bamboo.router.Router: config.far_rt_alarm_period=20
+2008-05-23 10:29:28,223 INFO  bamboo.router.Router: config.lookup_rt_alarm_period=0
+2008-05-23 10:29:28,223 INFO  bamboo.router.Router: config.explicit_guid=null
+2008-05-23 10:29:28,223 INFO  bamboo.router.Router: config.pkey=null
+2008-05-23 10:29:28,242 INFO  bamboo.router.Router: the network of router is: bamboo.lss.Network@cb6009
+2008-05-23 10:29:28,242 INFO  bamboo.router.Router: the network of router is: bamboo.lss.Network@e28b9
+2008-05-23 10:29:28,243 INFO  bamboo.router.Router: the my_neighbor_info of router is: ( peer:2001:250:1800:1:0:0:0:88:5853, node_id:192.168.0.3:5850, 0xfacc4f7c)
+2008-05-23 10:29:28,243 INFO  bamboo.router.Router: config.gateway_count=-1
+2008-05-23 10:29:28,243 INFO  bamboo.router.Router: config.gateway=192.168.0.3:5850
+2008-05-23 10:29:28,244 INFO  bamboo.router.Router: Bamboo node 192.168.0.3:5850 has guid 0xfacc4f7c
+2008-05-23 10:29:28,244 INFO  bamboo.router.Router: config.leaf_set_size=4
+2008-05-23 10:29:28,255 INFO  bamboo.router.Router: the my_neighbor_info of router is:   0	( peer:2001:250:1800:1:0:0:0:88:5853, node_id:192.168.0.3:5850, 0xfacc4f7c)
+
+2008-05-23 10:29:28,255 INFO  bamboo.router.Router: config.rt_scale=-1.0
+2008-05-23 10:29:28,270 INFO  bamboo.router.Router: config.location_cache_size=0
+2008-05-23 10:29:28,271 INFO  bamboo.router.Router: config.immediate_join=true
+2008-05-23 10:29:28,271 INFO  bamboo.router.Router: end of init function of router
+2008-05-23 10:29:28,271 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-05-23 10:29:28,271 INFO  bamboo.dht.Gateway: config.allow_unauth_rm=false
+2008-05-23 10:29:28,275 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:28,286 INFO  bamboo.dmgr.DataManager: DataManager starts workseda.sandStorm.api.StagesInitializedSignal@1835282
+Sandstorm: Ready
+2008-05-23 10:29:28,286 INFO  bamboo.lss.ASyncCoreImpl: async_main called
+2008-05-23 10:29:28,313 INFO  bamboo.dht.Dht: client 32.1.2.80 usage now 5.97 KBs of 5.97 KBs total.
+2008-05-23 10:29:28,314 INFO  bamboo.dht.Dht: client 192.168.0.3 usage now 346 bytes of 6.3 KBs total.
+2008-05-23 10:29:28,314 INFO  bamboo.dht.Dht: client 192.168.0.7 usage now 2.01 KBs of 8.32 KBs total.
+2008-05-23 10:29:28,332 INFO  bamboo.router.Router: Joined through gateway 192.168.0.3:5850
+Tapestry: ready
+2008-05-23 10:29:28,339 INFO  bamboo.router.Router: 
+in the ready,... the end of ready
+
+2008-05-23 10:29:30,587 INFO  bamboo.dht.Gateway: got connection from 192.168.0.7:37606
+2008-05-23 10:29:30,663 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:30,667 INFO  bamboo.dht.Gateway: put req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965292 key=0xf00b8f48 secret_hash=0x00000000 value_hash=0xf00b8f48 size=1024 ttl=86400
+2008-05-23 10:29:30,671 INFO  bamboo.dmgr.DataManager: got key=0xf00b8f48 secret_hash=0x00000000 data_hash=0xf00b8f48 time_usec=0x44de1a0fb9fe0 ttl=86400 client_id=192.168.0.7 size=1024 as root
+2008-05-23 10:29:30,694 INFO  bamboo.dht.Gateway: put req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965293 key=0xf342e9f4 secret_hash=0x00000000 value_hash=0xf342e9f4 size=64 ttl=86400
+2008-05-23 10:29:30,694 INFO  bamboo.dmgr.DataManager: got key=0xf342e9f4 secret_hash=0x00000000 data_hash=0xf342e9f4 time_usec=0x44de1a0fc0570 ttl=86400 client_id=192.168.0.7 size=64 as root
+2008-05-23 10:29:30,695 INFO  bamboo.dht.Gateway: put req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965294 key=0xc83e5518 secret_hash=0x00000000 value_hash=0xc83e5518 size=128 ttl=3600
+2008-05-23 10:29:30,695 INFO  bamboo.dmgr.DataManager: got key=0xc83e5518 secret_hash=0x00000000 data_hash=0xc83e5518 time_usec=0x44de1a0fc0958 ttl=3600 client_id=192.168.0.7 size=128 as root
+2008-05-23 10:29:30,736 INFO  bamboo.db.StorageManager: client 192.168.0.7, +1101 bytes, old=2.01 KBs, new=3.09 KBs
+2008-05-23 10:29:30,737 INFO  bamboo.dht.Dht: client 192.168.0.7 usage now 3.09 KBs of 9.39 KBs total.
+2008-05-23 10:29:30,738 INFO  bamboo.db.StorageManager: put key=0xf00b8f48 time_usec=0x44de1a0fb9fe0 ttl=86400 client_id=192.168.0.7 secret_hash=0x00000000 data_hash=0xf00b8f48 size=1024
+2008-05-23 10:29:30,739 INFO  bamboo.db.StorageManager: client 192.168.0.7, +141 bytes, old=3.09 KBs, new=3.23 KBs
+2008-05-23 10:29:30,739 INFO  bamboo.db.StorageManager: put key=0xf342e9f4 time_usec=0x44de1a0fc0570 ttl=86400 client_id=192.168.0.7 secret_hash=0x00000000 data_hash=0xf342e9f4 size=64
+2008-05-23 10:29:30,740 INFO  bamboo.db.StorageManager: client 192.168.0.7, +205 bytes, old=3.23 KBs, new=3.43 KBs
+2008-05-23 10:29:30,740 INFO  bamboo.db.StorageManager: put key=0xc83e5518 time_usec=0x44de1a0fc0958 ttl=3600 client_id=192.168.0.7 secret_hash=0x00000000 data_hash=0xc83e5518 size=128
+2008-05-23 10:29:30,798 INFO  bamboo.dht.Dht: client 192.168.0.7 usage now 3.23 KBs of 9.53 KBs total.
+2008-05-23 10:29:30,799 INFO  bamboo.dht.Dht: client 192.168.0.7 usage now 3.43 KBs of 9.73 KBs total.
+2008-05-23 10:29:30,820 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:30,821 INFO  bamboo.dht.Gateway: put resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965292 key=0xf00b8f48 value hash=0x00000000 value hash=0xf00b8f48 size=1024 ttl=86400 stat=0 lat=154 ms
+2008-05-23 10:29:30,821 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:30,822 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:30,822 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:30,822 INFO  bamboo.dht.Gateway: put resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965293 key=0xf342e9f4 value hash=0x00000000 value hash=0xf342e9f4 size=64 ttl=86400 stat=0 lat=128 ms
+2008-05-23 10:29:30,823 INFO  bamboo.dht.Gateway: put resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965294 key=0xc83e5518 value hash=0x00000000 value hash=0xc83e5518 size=128 ttl=3600 stat=0 lat=128 ms
+2008-05-23 10:29:30,823 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:32,080 INFO  bamboo.dht.Gateway: put req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965295 key=0xda3fc5d2 secret_hash=0x00000000 value_hash=0xda3fc5d2 size=128 ttl=3600
+2008-05-23 10:29:32,081 INFO  bamboo.dmgr.DataManager: got key=0xda3fc5d2 secret_hash=0x00000000 data_hash=0xda3fc5d2 time_usec=0x44de1a1112b80 ttl=3600 client_id=192.168.0.7 size=128 as root
+2008-05-23 10:29:32,082 INFO  bamboo.db.StorageManager: client 192.168.0.7, +205 bytes, old=3.43 KBs, new=3.63 KBs
+2008-05-23 10:29:32,082 INFO  bamboo.db.StorageManager: put key=0xda3fc5d2 time_usec=0x44de1a1112b80 ttl=3600 client_id=192.168.0.7 secret_hash=0x00000000 data_hash=0xda3fc5d2 size=128
+2008-05-23 10:29:32,082 INFO  bamboo.dht.Dht: client 192.168.0.7 usage now 3.63 KBs of 9.93 KBs total.
+2008-05-23 10:29:32,083 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:32,083 INFO  bamboo.dht.Gateway: put resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965295 key=0xda3fc5d2 value hash=0x00000000 value hash=0xda3fc5d2 size=128 ttl=3600 stat=0 lat=3 ms
+2008-05-23 10:29:32,083 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:32,906 INFO  bamboo.dht.Gateway: get req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965296 key=0xf342e9f4 maxvals=1 placemark=(NONE)
+2008-05-23 10:29:32,908 INFO  bamboo.dht.Dht: upcall for get req key=0xf342e9f4 return addr=( peer:192.168.0.3:5850, node_id:192.168.0.7:37606, 0xfacc4f7c) seq=4832815153398794936 reached replica, new recur style, replicas=[192.168.0.3:5850], synced=[]
+2008-05-23 10:29:32,924 INFO  bamboo.dht.Dht: local read done for new style recur get req seq=4832815153398794936
+2008-05-23 10:29:32,940 INFO  bamboo.dht.Dht: got new recur get resp key=0xf342e9f4 return addr=192.168.0.3:5850 seq=4832815153398794936 from 192.168.0.3:5850 replicas=[192.168.0.3:5850] synced=[]
+2008-05-23 10:29:32,940 INFO  bamboo.dht.Dht:  iterative get req key=0xf342e9f4 return addr=192.168.0.3:5850 seq=4832815153398794936 done
+2008-05-23 10:29:32,945 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:32,946 INFO  bamboo.dht.Gateway: get resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965296 key=0xf342e9f4 maxvals=2021654529 req placemark=(NONE) values=[(64, SHA 0x00000000, 0xf342e9f4, 86397)] resp placemark=(NONE) lat=49 ms
+2008-05-23 10:29:32,946 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:35,371 INFO  bamboo.dht.Gateway: get req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965297 key=0xf00b8f48 maxvals=1 placemark=(NONE)
+2008-05-23 10:29:35,372 INFO  bamboo.dht.Dht: upcall for get req key=0xf00b8f48 return addr=( peer:192.168.0.3:5850, node_id:192.168.0.7:37606, 0xfacc4f7c) seq=4832815153398794937 reached replica, new recur style, replicas=[192.168.0.3:5850], synced=[]
+2008-05-23 10:29:35,380 INFO  bamboo.db.StorageManager: client 32.1.2.80, -205 bytes, old=5.97 KBs, new=5.77 KBs
+2008-05-23 10:29:35,380 INFO  bamboo.db.StorageManager: dropping expired key=0xf02633f1 time_usec=0x44dd225a8b170 ttl=3600 client_id=32.1.2.80 data_hash=0xf02633f1 size=128
+2008-05-23 10:29:35,380 INFO  bamboo.dht.Dht: client 32.1.2.80 usage now 5.77 KBs of 9.73 KBs total.
+2008-05-23 10:29:35,381 INFO  bamboo.dht.Dht: local read done for new style recur get req seq=4832815153398794937
+2008-05-23 10:29:35,381 INFO  bamboo.dht.Dht: got new recur get resp key=0xf00b8f48 return addr=192.168.0.3:5850 seq=4832815153398794937 from 192.168.0.3:5850 replicas=[192.168.0.3:5850] synced=[]
+2008-05-23 10:29:35,382 INFO  bamboo.dht.Dht:  iterative get req key=0xf00b8f48 return addr=192.168.0.3:5850 seq=4832815153398794937 done
+2008-05-23 10:29:35,382 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:35,382 INFO  bamboo.dht.Gateway: get resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965297 key=0xf00b8f48 maxvals=2021654529 req placemark=(NONE) values=[(1024, SHA 0x00000000, 0xf00b8f48, 86395)] resp placemark=(NONE) lat=11 ms
+2008-05-23 10:29:35,382 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:38,295 INFO  bamboo.lss.ASyncCoreImpl: watchdog awakened
+2008-05-23 10:29:40,776 INFO  bamboo.dht.Gateway: get req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965298 key=0xf342e9f4 maxvals=1 placemark=(NONE)
+2008-05-23 10:29:40,776 INFO  bamboo.dht.Dht: upcall for get req key=0xf342e9f4 return addr=( peer:192.168.0.3:5850, node_id:192.168.0.7:37606, 0xfacc4f7c) seq=4832815153398794938 reached replica, new recur style, replicas=[192.168.0.3:5850], synced=[]
+2008-05-23 10:29:40,777 INFO  bamboo.dht.Dht: local read done for new style recur get req seq=4832815153398794938
+2008-05-23 10:29:40,778 INFO  bamboo.dht.Dht: got new recur get resp key=0xf342e9f4 return addr=192.168.0.3:5850 seq=4832815153398794938 from 192.168.0.3:5850 replicas=[192.168.0.3:5850] synced=[]
+2008-05-23 10:29:40,778 INFO  bamboo.dht.Dht:  iterative get req key=0xf342e9f4 return addr=192.168.0.3:5850 seq=4832815153398794938 done
+2008-05-23 10:29:40,778 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:40,779 INFO  bamboo.dht.Gateway: get resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965298 key=0xf342e9f4 maxvals=2021654529 req placemark=(NONE) values=[(64, SHA 0x00000000, 0xf342e9f4, 86389)] resp placemark=(NONE) lat=4 ms
+2008-05-23 10:29:40,779 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:42,794 INFO  bamboo.dht.Gateway: put req client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965299 key=0x55115181 secret_hash=0x00000000 value_hash=0x55115181 size=512 ttl=86400
+2008-05-23 10:29:42,795 INFO  bamboo.dmgr.DataManager: got key=0x55115181 secret_hash=0x00000000 data_hash=0x55115181 time_usec=0x44de1a1b4a710 ttl=86400 client_id=192.168.0.7 size=512 as root
+2008-05-23 10:29:42,796 INFO  bamboo.db.StorageManager: client 192.168.0.7, +589 bytes, old=3.63 KBs, new=4.2 KBs
+2008-05-23 10:29:42,796 INFO  bamboo.db.StorageManager: put key=0x55115181 time_usec=0x44de1a1b4a710 ttl=86400 client_id=192.168.0.7 secret_hash=0x00000000 data_hash=0x55115181 size=512
+2008-05-23 10:29:42,796 INFO  bamboo.dht.Dht: client 192.168.0.7 usage now 4.2 KBs of 10.31 KBs total.
+2008-05-23 10:29:42,797 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+2008-05-23 10:29:42,797 INFO  bamboo.dht.Gateway: put resp client=192.168.0.7:37606 client_library="bamboo.dht.GatewayClient $Revision: 1.16 $" application="bamboo.dht.PutGetTest $Revision: 1.17 $" xact_id=0xf2965299 key=0x55115181 value hash=0x00000000 value hash=0x55115181 size=512 ttl=86400 stat=0 lat=3 ms
+2008-05-23 10:29:42,797 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable in unregisterselectable function
+2008-05-23 10:29:43,277 INFO  bamboo.db.StorageManager: shutdown hook checkpointing database
+2008-05-23 10:29:43,297 INFO  bamboo.db.StorageManager: shutdown hook checkpoint complete
diff -urN bamboo/doc/async-tutorial/async-tutorial.aux bamboo1/doc/async-tutorial/async-tutorial.aux
--- bamboo/doc/async-tutorial/async-tutorial.aux	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/doc/async-tutorial/async-tutorial.aux	2008-01-10 16:52:37.000000000 +0200
@@ -0,0 +1,14 @@
+\relax 
+\@writefile{toc}{\contentsline {section}{\numberline {1}Preliminaries}{1}}
+\@writefile{toc}{\contentsline {section}{\numberline {2}Introduction}{1}}
+\@writefile{toc}{\contentsline {section}{\numberline {3}The Bamboo Event Model}{3}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Callbacks and \texttt  {registerTimer}}{3}}
+\@writefile{lol}{\contentsline {lstlisting}{DelayedHelloWorld.java}{4}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Passing Arguments to Callbacks}{4}}
+\@writefile{lol}{\contentsline {lstlisting}{BadDelayedEcho.java}{4}}
+\@writefile{lol}{\contentsline {lstlisting}{BetterDelayedEcho.java}{5}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}The \texttt  {curry} Function}{5}}
+\@writefile{lol}{\contentsline {lstlisting}{DelayedEcho.java}{6}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {3.4}Using Channels}{7}}
+\@writefile{lol}{\contentsline {lstlisting}{HttpGet.java}{7}}
+\@writefile{lol}{\contentsline {lstlisting}{EchoServer.java}{9}}
Binary files bamboo/doc/async-tutorial/async-tutorial.dvi and bamboo1/doc/async-tutorial/async-tutorial.dvi differ
diff -urN bamboo/doc/async-tutorial/async-tutorial.log bamboo1/doc/async-tutorial/async-tutorial.log
--- bamboo/doc/async-tutorial/async-tutorial.log	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/doc/async-tutorial/async-tutorial.log	2008-01-10 16:52:37.000000000 +0200
@@ -0,0 +1,242 @@
+This is pdfeTeX, Version 3.141592-1.21a-2.2 (Web2C 7.5.4) (format=latex 2008.1.10)  10 JAN 2008 16:52
+entering extended mode
+**async-tutorial.tex
+(./async-tutorial.tex
+LaTeX2e <2003/12/01>
+Babel <v3.8d> and hyphenation patterns for american, french, german, ngerman, b
+ahasa, basque, bulgarian, catalan, croatian, czech, danish, dutch, esperanto, e
+stonian, finnish, greek, icelandic, irish, italian, latin, magyar, norsk, polis
+h, portuges, romanian, russian, serbian, slovak, slovene, spanish, swedish, tur
+kish, ukrainian, nohyphenation, loaded.
+(/usr/share/texmf-tetex/tex/latex/base/article.cls
+Document Class: article 2004/02/16 v1.4f Standard LaTeX document class
+(/usr/share/texmf-tetex/tex/latex/base/size11.clo
+File: size11.clo 2004/02/16 v1.4f Standard LaTeX file (size option)
+)
+\c@part=\count79
+\c@section=\count80
+\c@subsection=\count81
+\c@subsubsection=\count82
+\c@paragraph=\count83
+\c@subparagraph=\count84
+\c@figure=\count85
+\c@table=\count86
+\abovecaptionskip=\skip41
+\belowcaptionskip=\skip42
+\bibindent=\dimen102
+) (./listings.sty
+(/usr/share/texmf-tetex/tex/latex/graphics/keyval.sty
+Package: keyval 1999/03/16 v1.13 key=value parser (DPC)
+\KV@toks@=\toks14
+)
+\lst@mode=\count87
+\lst@gtempboxa=\box26
+\lst@token=\toks15
+\lst@length=\count88
+\lst@currlwidth=\dimen103
+\lst@column=\count89
+\lst@pos=\count90
+\lst@lostspace=\dimen104
+\lst@width=\dimen105
+\lst@newlines=\count91
+\lst@lineno=\count92
+\c@lstlisting=\count93
+\lst@maxwidth=\dimen106
+ (./lstpatch.sty
+File: lstpatch.sty 2004/10/17 1.3b (Carsten Heinz)
+)
+(./lstmisc.sty
+File: lstmisc.sty 2004/09/07 1.3 (Carsten Heinz)
+\c@lstnumber=\count94
+\lst@skipnumbers=\count95
+\lst@framebox=\box27
+) (/usr/share/texmf-tetex/tex/latex/listings/listings.cfg
+File: listings.cfg 2004/09/05 1.3 listings configuration
+))
+Package: listings 2004/10/17 1.3b (Carsten Heinz)
+
+(/usr/share/texmf-tetex/tex/latex/url/url.sty
+\Urlmuskip=\muskip10
+Package: url 2004/03/15  ver 3.1  Verb mode for urls, etc.
+)
+(/usr/share/texmf-tetex/tex/latex/tools/verbatim.sty
+Package: verbatim 2003/08/22 v1.5q LaTeX2e package for verbatim enhancements
+\every@verbatim=\toks16
+\verbatim@line=\toks17
+\verbatim@in@stream=\read1
+)
+(/usr/share/texmf-tetex/tex/latex/psnfss/times.sty
+Package: times 2004/09/15 PSNFSS-v9.2 (SPQR) 
+)
+(/usr/share/texmf-tetex/tex/latex/psnfss/courier.sty
+Package: courier 2004/09/15 PSNFSS-v9.2 (WaS) 
+)
+No file async-tutorial.aux.
+\openout1 = `async-tutorial.aux'.
+
+LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 18.
+LaTeX Font Info:    ... okay on input line 18.
+LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 18.
+LaTeX Font Info:    ... okay on input line 18.
+LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 18.
+LaTeX Font Info:    ... okay on input line 18.
+LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 18.
+LaTeX Font Info:    ... okay on input line 18.
+LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 18.
+LaTeX Font Info:    ... okay on input line 18.
+LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 18.
+LaTeX Font Info:    ... okay on input line 18.
+LaTeX Font Info:    Try loading font information for OT1+ptm on input line 18.
+(/usr/share/texmf-tetex/tex/latex/psnfss/ot1ptm.fd
+File: ot1ptm.fd 2001/06/04 font definitions for OT1/ptm.
+)
+LaTeX Font Info:    External font `cmex10' loaded for size
+(Font)              <12> on input line 20.
+LaTeX Font Info:    External font `cmex10' loaded for size
+(Font)              <8> on input line 20.
+LaTeX Font Info:    External font `cmex10' loaded for size
+(Font)              <6> on input line 20.
+LaTeX Font Info:    Font shape `OT1/ptm/bx/n' in size <14.4> not available
+(Font)              Font shape `OT1/ptm/b/n' tried instead on input line 22.
+LaTeX Font Info:    External font `cmex10' loaded for size
+(Font)              <10.95> on input line 30.
+LaTeX Font Info:    External font `cmex10' loaded for size
+(Font)              <9> on input line 30.
+LaTeX Font Info:    External font `cmex10' loaded for size
+(Font)              <5> on input line 30.
+LaTeX Font Info:    Try loading font information for OT1+pcr on input line 30.
+
+(/usr/share/texmf-tetex/tex/latex/psnfss/ot1pcr.fd
+File: ot1pcr.fd 2001/06/04 font definitions for OT1/pcr.
+) (./lstlang1.sty
+File: lstlang1.sty 2004/09/05 1.3 listings language file
+)
+LaTeX Font Info:    Font shape `OT1/ptm/bx/n' in size <10> not available
+(Font)              Font shape `OT1/ptm/b/n' tried instead on input line 45.
+LaTeX Font Info:    Try loading font information for OMS+ptm on input line 45.
+
+(/usr/share/texmf-tetex/tex/latex/psnfss/omsptm.fd
+File: omsptm.fd 
+)
+LaTeX Font Info:    Font shape `OMS/ptm/m/n' in size <10> not available
+(Font)              Font shape `OMS/cmsy/m/n' tried instead on input line 45.
+ [1
+
+]
+Overfull \hbox (16.99953pt too wide) in paragraph at lines 123--124
+[][][][][][][][][][][][][][][][][][][][][][][][][][] 
+ []
+
+[2]
+LaTeX Font Info:    Font shape `OT1/ptm/bx/n' in size <12> not available
+(Font)              Font shape `OT1/ptm/b/n' tried instead on input line 200.
+LaTeX Font Info:    Font shape `OT1/pcr/bx/n' in size <12> not available
+(Font)              Font shape `OT1/pcr/b/n' tried instead on input line 200.
+ (./DelayedHelloWorld.java [3]
+Overfull \hbox (16.99953pt too wide) in paragraph at lines 8--9
+[][][][][][][][][][][][][][][][][][][][][][][][][][][][] 
+ []
+
+) (./BadDelayedEcho.java
+Overfull \hbox (16.99953pt too wide) in paragraph at lines 9--10
+[][][][][][][][][][][][][][][][][][][][][][][][][][][][] 
+ []
+
+LaTeX Font Info:    Try loading font information for OML+ptm on input line 10.
+(/usr/share/texmf-tetex/tex/latex/psnfss/omlptm.fd
+File: omlptm.fd 
+)
+LaTeX Font Info:    Font shape `OML/ptm/m/n' in size <10> not available
+(Font)              Font shape `OML/cmm/m/it' tried instead on input line 10.
+
+Overfull \hbox (4.9994pt too wide) in paragraph at lines 11--12
+[][][][][][][][][][][][][][][][][][][][][][][] 
+ []
+
+) [4] (./BetterDelayedEcho.java
+Overfull \hbox (16.99953pt too wide) in paragraph at lines 2--3
+[][][][][][][][][][][][][][][][][][][][][][][][][][][][] 
+ []
+
+
+Overfull \hbox (22.99959pt too wide) in paragraph at lines 4--5
+[][][][][][][][][][][][][][][][][][][][][][][] 
+ []
+
+) [5] (./DelayedEcho.java
+Overfull \hbox (10.99947pt too wide) in paragraph at lines 3--4
+[][][][][][][][][][][][][][][][][][][][][][][][][] 
+ []
+
+
+Overfull \hbox (16.99953pt too wide) in paragraph at lines 9--10
+[][][][][][][][][][][][][][][][][][][][][][][][][][][][] 
+ []
+
+) [6]
+Overfull \hbox (1.21301pt too wide) in paragraph at lines 401--407
+\OT1/ptm/m/n/10.95 call \OT1/pcr/m/n/10.95 registerSelectable \OT1/ptm/m/n/10.9
+5 in \OT1/pcr/m/n/10.95 ASyncCore\OT1/ptm/m/n/10.95 ; to stop wait-ing on them,
+ call \OT1/pcr/m/n/10.95 unregisterSelectable\OT1/ptm/m/n/10.95 .
+ []
+
+(./HttpGet.java
+Overfull \hbox (22.99959pt too wide) in paragraph at lines 19--20
+[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][] 
+ []
+
+[7]
+Overfull \hbox (4.9994pt too wide) in paragraph at lines 58--59
+[][][][][][][][][][][][][][][][][][][] 
+ []
+
+
+Overfull \hbox (16.99953pt too wide) in paragraph at lines 61--62
+[][][][][][][][][][][][][][][][][][][][][][][] 
+ []
+
+) [8]
+Overfull \hbox (42.21484pt too wide) in paragraph at lines 420--428
+[]\OT1/ptm/m/n/10.95 Important things to note in-clude: on line 84 we call \OT1
+/pcr/m/n/10.95 configureBlocking(false) \OT1/ptm/m/n/10.95 on the \OT1/pcr/m/n/
+10.95 SocketChannel
+ []
+
+(./EchoServer.java
+Overfull \hbox (46.99983pt too wide) in paragraph at lines 34--35
+[][][][][][][][][][][][][][][][][][][][] 
+ []
+
+
+Overfull \hbox (46.99983pt too wide) in paragraph at lines 36--37
+[][][][][][][][][][][][][][][][][][][][][][][][] 
+ []
+
+[9]
+Overfull \hbox (10.99947pt too wide) in paragraph at lines 57--58
+[][][][][][][][][][] 
+ []
+
+LaTeX Font Info:    Font shape `OMS/ptm/m/it' in size <10> not available
+(Font)              Font shape `OMS/cmsy/m/n' tried instead on input line 59.
+
+Overfull \hbox (52.9999pt too wide) in paragraph at lines 65--66
+[][][][][][][][][][][][][][][][][][][][] 
+ []
+
+
+Overfull \hbox (46.99983pt too wide) in paragraph at lines 67--68
+[][][][][][][][][][][][][][][][][][][][][][][][] 
+ []
+
+[10]) [11] (./async-tutorial.aux) ) 
+Here is how much of TeX's memory you used:
+ 1913 strings out of 94501
+ 26444 string characters out of 1175811
+ 89596 words of memory out of 1000000
+ 5087 multiletter control sequences out of 10000+50000
+ 15561 words of font info for 45 fonts, out of 500000 for 2000
+ 580 hyphenation exceptions out of 8191
+ 29i,8n,45p,189b,1570s stack positions out of 1500i,500n,5000p,200000b,5000s
+
+Output written on async-tutorial.dvi (11 pages, 58676 bytes).
Binary files bamboo/doc/async-tutorial/async-tutorial.pdf and bamboo1/doc/async-tutorial/async-tutorial.pdf differ
diff -urN bamboo/doc/async-tutorial/async-tutorial.ps bamboo1/doc/async-tutorial/async-tutorial.ps
--- bamboo/doc/async-tutorial/async-tutorial.ps	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/doc/async-tutorial/async-tutorial.ps	2008-01-10 16:52:38.000000000 +0200
@@ -0,0 +1,1762 @@
+%!PS-Adobe-2.0
+%%Creator: dvips(k) 5.95a Copyright 2005 Radical Eye Software
+%%Title: async-tutorial.dvi
+%%Pages: 11
+%%PageOrder: Ascend
+%%BoundingBox: 0 0 595 842
+%%DocumentFonts: Times-Roman Times-Bold CMSY10 Courier Times-Italic
+%%+ Courier-Bold CMMI10
+%%DocumentPaperSizes: a4
+%%EndComments
+%DVIPSWebPage: (www.radicaleye.com)
+%DVIPSCommandLine: dvips -Ppdf -G0 -o async-tutorial.ps
+%+ async-tutorial.dvi
+%DVIPSParameters: dpi=8000
+%DVIPSSource:  TeX output 2008.01.10:1652
+%%BeginProcSet: tex.pro 0 0
+%!
+/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
+N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
+mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
+0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
+landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
+mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
+matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
+exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
+statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
+N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
+/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
+/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
+array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
+df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
+definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
+}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
+B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
+1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
+/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
+setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
+restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
+/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
+}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
+bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
+mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
+SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
+userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
+1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
+index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
+/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
+/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
+(LaserWriter 16/600)]{A length product length le{A length product exch 0
+exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
+end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
+grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
+imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
+exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
+fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
+delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
+B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
+p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
+rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end
+
+%%EndProcSet
+%%BeginProcSet: alt-rule.pro 0 0
+%!
+% Patch by TVZ
+% Makes dvips files draw rules with stroke rather than fill.
+% Makes narrow rules more predictable at low resolutions
+% after distilling to PDF.
+% May have unknown consequences for very thick rules.
+% Tested only with dvips 5.85(k).
+TeXDict begin
+/QV {
+  gsave newpath /ruleY X /ruleX X
+  Rx Ry gt
+  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
+  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
+  ifelse
+  setlinewidth 0 setlinecap stroke grestore
+} bind def
+end
+
+%%EndProcSet
+%%BeginProcSet: 8r.enc 0 0
+% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
+%
+% @@psencodingfile@{
+%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
+%                W. Schmidt, P. Lehman",
+%   version   = "2.0",
+%   date      = "30 October 2002",
+%   filename  = "8r.enc",
+%   email     = "tex-fonts@@tug.org",
+%   docstring = "This is the encoding vector for Type1 and TrueType
+%                fonts to be used with TeX.  This file is part of the
+%                PSNFSS bundle, version 9"
+% @}
+% 
+% The idea is to have all the characters normally included in Type 1 fonts
+% available for typesetting. This is effectively the characters in Adobe
+% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
+% MacRoman, and some extra characters from Lucida.
+% 
+% Character code assignments were made as follows:
+% 
+% (1) the Windows ANSI characters are almost all in their Windows ANSI
+% positions, because some Windows users cannot easily reencode the
+% fonts, and it makes no difference on other systems. The only Windows
+% ANSI characters not available are those that make no sense for
+% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
+% (173). quotesingle and grave are moved just because it's such an
+% irritation not having them in TeX positions.
+% 
+% (2) Remaining characters are assigned arbitrarily to the lower part
+% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
+% 
+% (3) Y&Y Lucida Bright includes some extra text characters; in the
+% hopes that other PostScript fonts, perhaps created for public
+% consumption, will include them, they are included starting at 0x12.
+% These are /dotlessj /ff /ffi /ffl.
+% 
+% (4) hyphen appears twice for compatibility with both ASCII and Windows.
+%
+% (5) /Euro was assigned to 128, as in Windows ANSI
+%
+% (6) Missing characters from MacRoman encoding incorporated as follows:
+%
+%     PostScript      MacRoman        TeXBase1
+%     --------------  --------------  --------------
+%     /notequal       173             0x16
+%     /infinity       176             0x17
+%     /lessequal      178             0x18
+%     /greaterequal   179             0x19
+%     /partialdiff    182             0x1A
+%     /summation      183             0x1B
+%     /product        184             0x1C
+%     /pi             185             0x1D
+%     /integral       186             0x81
+%     /Omega          189             0x8D
+%     /radical        195             0x8E
+%     /approxequal    197             0x8F
+%     /Delta          198             0x9D
+%     /lozenge        215             0x9E
+%
+/TeXBase1Encoding [
+% 0x00
+ /.notdef /dotaccent /fi /fl
+ /fraction /hungarumlaut /Lslash /lslash
+ /ogonek /ring /.notdef /breve
+ /minus /.notdef /Zcaron /zcaron
+% 0x10
+ /caron /dotlessi /dotlessj /ff
+ /ffi /ffl /notequal /infinity
+ /lessequal /greaterequal /partialdiff /summation
+ /product /pi /grave /quotesingle
+% 0x20
+ /space /exclam /quotedbl /numbersign
+ /dollar /percent /ampersand /quoteright
+ /parenleft /parenright /asterisk /plus
+ /comma /hyphen /period /slash
+% 0x30
+ /zero /one /two /three
+ /four /five /six /seven
+ /eight /nine /colon /semicolon
+ /less /equal /greater /question
+% 0x40
+ /at /A /B /C
+ /D /E /F /G
+ /H /I /J /K
+ /L /M /N /O
+% 0x50
+ /P /Q /R /S
+ /T /U /V /W
+ /X /Y /Z /bracketleft
+ /backslash /bracketright /asciicircum /underscore
+% 0x60
+ /quoteleft /a /b /c
+ /d /e /f /g
+ /h /i /j /k
+ /l /m /n /o
+% 0x70
+ /p /q /r /s
+ /t /u /v /w
+ /x /y /z /braceleft
+ /bar /braceright /asciitilde /.notdef
+% 0x80
+ /Euro /integral /quotesinglbase /florin
+ /quotedblbase /ellipsis /dagger /daggerdbl
+ /circumflex /perthousand /Scaron /guilsinglleft
+ /OE /Omega /radical /approxequal
+% 0x90
+ /.notdef /.notdef /.notdef /quotedblleft
+ /quotedblright /bullet /endash /emdash
+ /tilde /trademark /scaron /guilsinglright
+ /oe /Delta /lozenge /Ydieresis
+% 0xA0
+ /.notdef /exclamdown /cent /sterling
+ /currency /yen /brokenbar /section
+ /dieresis /copyright /ordfeminine /guillemotleft
+ /logicalnot /hyphen /registered /macron
+% 0xD0
+ /degree /plusminus /twosuperior /threesuperior
+ /acute /mu /paragraph /periodcentered
+ /cedilla /onesuperior /ordmasculine /guillemotright
+ /onequarter /onehalf /threequarters /questiondown
+% 0xC0
+ /Agrave /Aacute /Acircumflex /Atilde
+ /Adieresis /Aring /AE /Ccedilla
+ /Egrave /Eacute /Ecircumflex /Edieresis
+ /Igrave /Iacute /Icircumflex /Idieresis
+% 0xD0
+ /Eth /Ntilde /Ograve /Oacute
+ /Ocircumflex /Otilde /Odieresis /multiply
+ /Oslash /Ugrave /Uacute /Ucircumflex
+ /Udieresis /Yacute /Thorn /germandbls
+% 0xE0
+ /agrave /aacute /acircumflex /atilde
+ /adieresis /aring /ae /ccedilla
+ /egrave /eacute /ecircumflex /edieresis
+ /igrave /iacute /icircumflex /idieresis
+% 0xF0
+ /eth /ntilde /ograve /oacute
+ /ocircumflex /otilde /odieresis /divide
+ /oslash /ugrave /uacute /ucircumflex
+ /udieresis /yacute /thorn /ydieresis
+] def
+
+
+%%EndProcSet
+%%BeginProcSet: texps.pro 0 0
+%!
+TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
+index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
+exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
+ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
+pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
+div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
+/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
+definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
+sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
+mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
+exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
+forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
+end
+
+%%EndProcSet
+%%BeginFont: CMMI10
+%!PS-AdobeFont-1.1: CMMI10 1.100
+%%CreationDate: 1996 Jul 23 07:53:57
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.100) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMMI10) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle -14.04 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMMI10 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 60 /less put
+dup 62 /greater put
+readonly def
+/FontBBox{-32 -250 1048 750}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
+3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
+532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
+B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
+986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
+D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
+9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
+990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
+6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
+DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
+59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
+D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
+8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
+6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
+1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
+03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
+95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
+74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
+3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
+47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
+AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
+42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
+40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
+B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
+95601766777978D01677B8D19E1B10A078432D2884BB4F7B8C3293B68BB78100
+16724E495064BA0168CC86D413CB48560D6D318357397832F7A858CD82030C7D
+8A4A1919716E8B26AFF8789AAF489EE4E0A88DC477551A87C7DF2856189E4596
+FE015956AFE5CC019F5CA6323A12B763B7B08B92C1A2940D3C566C43729E5482
+63C6DC5E834AEB4DAFB5AE8F0B8931A4687C94D11587B9071C8D81DA14F12776
+53A1985A3EBE37827656BD4635E03F09C3231F906874645E7DB3E59045A59D67
+E745D8487CF73FC50F64060544F624F357BC998A87FBE468DEBB38A09449EBCA
+D041D7C29225ACD16CB8A59E87924D15A9125F064710A6CCCA3AD3103D8FCC94
+CC3571C6F9192774FCFE5BB42A14B27960903144D28BF047BF4C77646EA7BF6F
+440D4EDEB712C63F2E8080419E42D1D58EED685EB5CDD49F80DB6E5553B519FA
+C6A39A093155802F3EC607721F390307E91ECB597ABA60A537E3F8C045BF5DD3
+D88CF6518D37FCD95D2F295D902D617440D23516D962F47750A682A319ACE1
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMSY10
+%!PS-AdobeFont-1.1: CMSY10 1.0
+%%CreationDate: 1991 Aug 15 07:20:57
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.0) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMSY10) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle -14.035 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMSY10 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 3 /asteriskmath put
+dup 102 /braceleft put
+dup 103 /braceright put
+dup 106 /bar put
+dup 110 /backslash put
+readonly def
+/FontBBox{-29 -960 1116 775}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
+7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
+A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
+E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
+221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
+27D1663E0B62F461F6E40A5D6676D1D12B51E641C1D4E8E2771864FC104F8CBF
+5B78EC1D88228725F1C453A678F58A7E1B7BD7CA700717D288EB8DA1F57C4F09
+0ABF1D42C5DDD0C384C7E22F8F8047BE1D4C1CC8E33368FB1AC82B4E96146730
+DE3302B2E6B819CB6AE455B1AF3187FFE8071AA57EF8A6616B9CB7941D44EC7A
+71A7BB3DF755178D7D2E4BB69859EFA4BBC30BD6BB1531133FD4D9438FF99F09
+4ECC068A324D75B5F696B8688EEB2F17E5ED34CCD6D047A4E3806D000C199D7C
+515DB70A8D4F6146FE068DC1E5DE8BC57033D79919697C81395D5B94C3AAAB11
+52D7393B7810FB3A048DB26F99398B6402C264B13FEFEE92BA387801BC9699A2
+E43D69AAA3CB2DD7C81617501B0618651E0850CB5C173082CDC1D1372741FC2E
+7AB2116FB69984ECBCE8EC5515E9F234C273AEB8F9C222E448AF3CCDC35A428F
+9A267F67CAD67819A64BB630671647A63A11636808CB93ADF3D6833ABBA85CD1
+B9C0C37370FCEC157D06072F9E783EEBFA8F2322912210FA9669F870FEA1DEE3
+0E5A8A230609D077AF8FF69E4915D3918778846363DD98E76B0A64AA884D759A
+18068F08DFCDAC51EC16C3557D73FBFEFE8A69B639654AAE3CB42752BA053E85
+92BC0B8AC53BCA67F49BF43B906F68A049E9AC3A71ADCE5C8693EA705F74F2D5
+9A81A4C3517100101469410D5847F9010092728C2FAB9D5EDEA96B263DF890E3
+A0FB9FD19948D4BD5FE78ED2F55355F56FD79F1C33B274D327045D91ADF35FAA
+8A6E7838846D7352F01303D2C551FA071DB46EC4E3218738D63D3E78D6C42A04
+965FC8250C1431121832201BF46238EB0E4560F801BCE374E15132848DF9464A
+A97CAF899D086EE56790FB1DF7342C3C3DB78806F906C7C80B9B44FBECC7AF97
+02B88FC9CE075A02D005212352DFD6E5431DCE5373AFE817F8CCD5F6AA988661
+628517C26F1817CA2F7E06F493563963D9EEA9CFBBB08774CD85524063CC9ECE
+60356B1E0F2354E995F3847116A3A8A7E2B3D0A51E153AF17AB88157DBD13DF1
+000CF20A9B32A4DC82B31E2FA7EC9F1DC49EA053BA6920091302D1B1A303CAAA
+8C630B84B3AF50D12642BBA77466B4D22F5079CB0FA68F800DB7BE49E17A562F
+5943C5647B333DF745ED7898F5E19EA9C8AAD18A4186630DE54C82204C39013F
+C7A9C619333D22CDFDF19543F35D1B221755AAD6B5D012767D6700ECA046C6D1
+A8422E972B6F155190DBA79C92382F99D48F8350377EA4720895BB91397B8784
+AF0BC516C68765CE6429D6109DDF3BBB19B060373C6F0DB03A6ACC99C9E9D994
+7368FEF1B74B4F42008512429DD25649BDDED0B29D1277542F12ECC01B111A17
+680176D9D36064698999ADF4038AD392C6F0550FF418AD2DB7A63C6D8E784E28
+4981DD5526C8BC5665B968F81D204AEC8BF2E15CA4383E55AD3FF0CCB4FED6A6
+F5ED631463CF93E633C5793A8F913493AA72C338A18B77465C81EB1C108DBCC9
+50DC4D823FBB414D74AD2108668D61914DD111E054B11A67935BFB1D0B1638D5
+8D3BD03C4F79376C1EF6
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+TeXDict begin 39139632 55387786 1000 8000 8000 (async-tutorial.dvi)
+@start /Fa 107[615 30[553 308 431 431 1[553 553 553 4[308
+553 553 2[553 2[553 28[799 15[553 1[553 2[308 277 46[{
+TeXBase1Encoding ReEncodeFont}18 1106.96 /Times-Italic
+rf /Fb 193[861 1[861 60[{}2 1106.96 /CMMI10 rf /Fc 134[797
+3[797 797 797 797 4[797 3[797 1[797 1[797 1[797 14[797
+84[{TeXBase1Encoding ReEncodeFont}11 1328.35 /Courier-Bold
+rf /Fd 138[739 442 517 590 2[664 739 1107 369 739 1[369
+739 664 1[590 739 590 739 664 11[959 886 3[812 9[812
+2[959 1[959 12[664 664 664 664 2[332 46[{TeXBase1Encoding ReEncodeFont}
+28 1328.35 /Times-Bold rf /Fe 134[498 1[719 498 498 277
+388 332 1[498 498 498 775 277 2[277 498 498 332 442 498
+442 498 442 13[554 8[388 332 26[249 332 249 4[332 39[{
+TeXBase1Encoding ReEncodeFont}28 996.264 /Times-Roman
+rf /Ff 137[598 598 598 598 598 1[598 598 598 598 598
+1[598 598 598 598 1[598 598 598 1[598 9[598 2[598 598
+8[598 1[598 2[598 3[598 6[598 7[598 2[598 598 46[{
+TeXBase1Encoding ReEncodeFont}29 996.264 /Courier rf
+/Fg 198[332 332 332 332 332 332 332 332 332 332 48[{
+TeXBase1Encoding ReEncodeFont}10 664.176 /Times-Roman
+rf /Fh 134[538 2[538 606 337 472 472 606 606 606 606
+875 337 538 337 337 606 606 337 538 606 538 606 606 12[674
+38[404 45[{TeXBase1Encoding ReEncodeFont}25 1212.12 /Times-Italic
+rf /Fi 134[727 727 727 727 727 727 727 727 727 727 727
+727 727 727 727 727 727 727 727 727 727 727 727 727 727
+3[727 1[727 3[727 2[727 727 727 1[727 727 727 727 1[727
+1[727 3[727 727 727 727 727 2[727 1[727 2[727 1[727 1[727
+727 1[727 727 727 1[727 4[727 727 40[{TeXBase1Encoding ReEncodeFont}54
+1212.12 /Courier rf /Fj 145[553 3[307 2[553 553 98[553
+3[{}5 1106.96 /CMSY10 rf /Fk 107[491 26[553 553 799 553
+553 308 431 369 553 553 553 553 861 308 553 308 308 553
+553 369 491 553 491 553 491 3[369 1[369 3[1045 2[676
+615 738 1[615 799 799 984 676 799 1[369 799 799 615 676
+799 738 738 799 3[624 1[308 308 2[553 1[553 553 1[553
+553 553 308 277 1[277 624 1[369 369 6[369 33[{
+TeXBase1Encoding ReEncodeFont}63 1106.96 /Times-Roman
+rf /Fl 134[553 1[799 553 615 369 431 491 1[615 553 615
+922 308 615 1[308 615 1[369 491 615 491 615 553 97[{
+TeXBase1Encoding ReEncodeFont}21 1106.96 /Times-Bold
+rf /Fm 204[443 443 443 49[{TeXBase1Encoding ReEncodeFont}3
+885.568 /Times-Roman rf /Fn 105[606 1[538 538 24[538
+606 606 875 606 606 337 472 404 606 606 606 606 943 337
+606 337 337 606 606 404 538 606 538 606 538 7[875 1[1144
+1[875 741 674 808 1[674 875 875 1078 741 1[472 404 875
+875 674 741 875 808 808 875 1[538 3[337 337 606 606 606
+606 606 606 606 606 606 606 337 303 404 303 684 1[404
+404 404 5[404 30[674 2[{TeXBase1Encoding ReEncodeFont}73
+1212.12 /Times-Roman rf /Fo 137[797 886 531 620 708 2[797
+886 1328 443 2[443 886 2[708 886 708 886 797 12[1063
+3[974 2[1505 3[620 3[1063 2[1063 14[797 797 797 49[{
+TeXBase1Encoding ReEncodeFont}25 1594.02 /Times-Bold
+rf /Fp 134[664 3[664 1[517 442 3[664 1[369 664 2[664
+2[590 664 590 664 590 13[739 886 7[517 6[886 2[1223 7[664
+5[664 664 664 1[332 1[332 44[{TeXBase1Encoding ReEncodeFont}24
+1328.35 /Times-Roman rf /Fq 134[956 2[956 956 532 744
+637 1[956 956 956 1488 532 2[532 956 956 1[849 956 849
+956 849 12[1169 3[1064 1381 5[637 1381 2[1169 1381 1[1276
+1381 17[532 1[637 478 4[637 39[{TeXBase1Encoding ReEncodeFont}32
+1912.83 /Times-Roman rf end
+%%EndProlog
+%%BeginSetup
+%%Feature: *Resolution 8000dpi
+TeXDict begin
+%%PaperSize: A4
+ end
+%%EndSetup
+%%Page: 1 1
+TeXDict begin 1 0 bop 4048 10173 a Fq(A)478 b(Programmer')-105
+b(s)479 b(T)-86 b(utorial)478 b(on)h(Ev)-29 b(ent-Dri)-48
+b(v)-29 b(en)481 b(Programming,)6342 12608 y(Asynchronous)h
+(Input/Output,)d(and)h(the)e(Bamboo)i(DHT)22403 15976
+y Fp(Sean)331 b(C.)h(Rhea)19916 17526 y(srhea@cs.berk)-13
+b(ele)-20 b(y)-86 b(.edu)21444 20220 y(January)332 b(10,)h(2008)0
+25450 y Fo(1)1594 b(Pr)-29 b(eliminaries)0 28210 y Fn(This)364
+b(document)h(is)f(a)h(tutorial)g(on)g(three)f(related)h(topics:)499
+b(e)-30 b(v)-18 b(ent-dri)-30 b(v)-18 b(en)364 b(programming,)380
+b(asynchronous)364 b(input/output)0 29715 y(\(I/O\),)245
+b(and)h(the)g(Bamboo)g(DHT)-90 b(.)246 b(I)g(assume)f(you')-61
+b(re)246 b(already)g(f)-12 b(amiliar)245 b(with)h(Ja)-24
+b(v)-30 b(a,)256 b(including)246 b(the)g(ne)-30 b(w)246
+b(language)h(features)0 31221 y(for)343 b(generics)h(\(called)g
+(templates)h(in)f(C++\))f(introduced)h(in)g(Ja)-24 b(v)-30
+b(a)344 b(1.5.)499 b(If)343 b(you')-61 b(re)344 b(not)h(yet)f(a)-18
+b(w)-12 b(are)344 b(of)g(what)g(generics)g(are)0 32726
+y(or)376 b(ho)-30 b(w)377 b(the)-18 b(y)376 b(w)-12 b(ork,)395
+b(please)376 b(\002rst)g(read)g(\223Using)h(and)g(Programming)f
+(Generics)g(in)h(J2SE)e(5.0\224)i(on)f(Sun')-67 b(s)376
+b(web)h(page.)51501 32286 y Fm(1)0 34231 y Fn(Most)362
+b(of)h(the)g(e)-18 b(xample)364 b(code)f(sho)-30 b(wn)363
+b(in)g(this)g(tutorial)g(is)f(a)-24 b(v)-30 b(ailable)364
+b(on)f(the)g(Bamboo)h(website.)41711 33792 y Fm(2)42765
+34231 y Fn(I)f(encourage)h(you)f(to)0 35737 y(do)-30
+b(wnload,)280 b(run,)f(modify)-79 b(,)279 b(and)274 b(re-run)f(the)g(e)
+-18 b(xample)274 b(programs;)283 b(there')-67 b(s)272
+b(no)i(better)f(w)-12 b(ay)274 b(to)g(learn)f(a)h(ne)-30
+b(w)273 b(programming)0 37242 y(style)303 b(or)f(library)-79
+b(.)0 41144 y Fo(2)1594 b(Intr)-29 b(oduction)0 43904
+y Fn(W)-97 b(e')-12 b(ll)262 b(start)f(the)h(tutorial)g(with)g(an)h(e)
+-18 b(xample:)355 b(assume)262 b(that)g(you)g(are)g(writing)g(a)g
+(high-performance)g(web)g(serv)-18 b(er)-67 b(.)362 b(A)262
+b(main)0 45409 y(loop)303 b(for)g(the)g(web)g(serv)-18
+b(er)302 b(might)h(look)g(something)g(lik)-12 b(e)303
+b(this:)3164 48232 y Fl(w)133 b(h)g(i)g(l)g(e)946 b Fk(\()286
+b Fl(t)138 b(r)g(u)g(e)286 b Fk(\))867 b Fj(f)5826 49561
+y Fk(S)139 b(o)g(c)g(k)g(e)g(t)930 b(s)126 b(o)g(c)g(k)809
+b(=)843 b(a)159 b(c)g(c)g(e)g(p)g(t)g(C)g(o)g(n)g(n)g(e)g(c)g(t)g(i)g
+(o)g(n)394 b(\()237 b(\))f(;)5835 50889 y(H)148 b(t)g(t)g(p)g(R)g(e)g
+(q)g(u)g(e)g(s)g(t)954 b(r)145 b(e)g(q)829 b(=)843 b(p)159
+b(a)g(r)g(s)g(e)g(R)g(e)g(q)g(u)g(e)g(s)g(t)310 b(\()273
+b(s)126 b(o)g(c)g(k)343 b(\))217 b(;)5822 52217 y(H)135
+b(t)g(t)g(p)g(R)g(e)g(s)g(p)g(o)g(n)g(s)g(e)968 b(r)163
+b(e)g(s)g(p)845 b(=)h(c)161 b(r)g(e)g(a)g(t)g(e)g(R)g(e)g(s)g(p)g(o)g
+(n)g(s)g(e)310 b(\()292 b(r)145 b(e)g(q)362 b(\))217
+b(;)5818 53546 y(s)131 b(e)g(n)g(d)g(R)g(e)g(s)g(p)g(o)g(n)g(s)g(e)277
+b(\()252 b(s)105 b(o)g(c)g(k)403 b(,)1020 b(r)163 b(e)g(s)g(p)379
+b(\))217 b(;)5813 54874 y(s)126 b(o)g(c)g(k)318 b(.)368
+b(c)174 b(l)g(o)g(s)g(e)414 b(\()236 b(\))h(;)3086 56202
+y Fj(g)1882 59700 y Fn(Presumably)-79 b(,)344 b(this)335
+b(web)h(serv)-18 b(er)334 b(will)i(ha)-24 b(v)-18 b(e)336
+b(a)g(high-bandwidth)g(connection)g(to)g(the)g(Internet.)473
+b(On)336 b(the)g(other)g(hand,)0 61206 y(man)-18 b(y)341
+b(of)h(the)f(clients)g(of)g(the)h(web)f(serv)-18 b(er)341
+b(may)g(ha)-24 b(v)-18 b(e)342 b(slo)-30 b(w)340 b(connections,)352
+b(meaning)342 b(that)f(your)g(code)h(will)f(spend)h(a)f(lot)0
+62711 y(of)372 b(time)h(in)g(the)f Fi(sendResponse)k
+Fn(function.)584 b(In)373 b(ef)-30 b(fect,)389 b(the)373
+b(performance)f(of)h(your)f(web)h(serv)-18 b(er)371 b(is)h(limited)h
+(by)g(the)0 64217 y(bandwidth)304 b(of)e(whate)-30 b(v)-18
+b(er)303 b(client)h(it')-67 b(s)302 b(serving)g(at)i(an)-18
+b(y)303 b(gi)-30 b(v)-18 b(en)303 b(time.)375 b(\(That')-67
+b(s)302 b(bad.\))1882 65722 y(T)-97 b(o)326 b(get)h(around)g(this)f
+(performance)g(limitation,)333 b(we)327 b(need)g(to)f(introduce)h
+Fh(concurr)-45 b(ency)p Fn(:)423 b(the)327 b(ability)g(to)f(serv)-18
+b(e)326 b(more)0 67228 y(than)253 b(one)h(client)f(at)h(a)f(time.)359
+b(Historically)-79 b(,)263 b(there)253 b(ha)-24 b(v)-18
+b(e)254 b(been)f(at)h(least)f(tw)-12 b(o)253 b(popular)g(approaches)g
+(to)g(adding)h(concurrenc)-18 b(y)0 68733 y(to)345 b(a)g(program.)500
+b(One)345 b(approach)g(is)f(called)i Fh(multithr)-45
+b(eading)p Fn(.)501 b(In)344 b(this)g(approach,)356 b(the)345
+b(abo)-18 b(v)g(e)345 b(code)g(w)-12 b(ould)345 b(be)g(re)-30
+b(written)0 70239 y(lik)-12 b(e)303 b(this:)p 0 71902
+20800 45 v 1406 72643 a Fg(1)1793 73066 y Ff
+(http://java.sun.com/developer/technicalArticles/J2SE/generics/)1406
+73884 y Fg(2)1793 74307 y Ff(WHAT)25697 79417 y Fn(1)p
+eop end
+%%Page: 2 2
+TeXDict begin 2 1 bop 3164 5313 a Fl(w)133 b(h)g(i)g(l)g(e)946
+b Fk(\()286 b Fl(t)138 b(r)g(u)g(e)286 b Fk(\))867 b
+Fj(f)5882 6642 y Fl(f)194 b(i)g(n)h(a)h(l)997 b Fk(S)139
+b(o)g(c)g(k)g(e)g(t)930 b(s)126 b(o)g(c)g(k)809 b(=)843
+b(a)159 b(c)g(c)g(e)g(p)g(t)g(C)g(o)g(n)g(n)g(e)g(c)g(t)g(i)g(o)g(n)395
+b(\()236 b(\))h(;)5808 7970 y(T)121 b(h)g(r)g(e)g(a)g(d)969
+b(t)862 b(=)706 b Fl(n)22 b(e)g(w)807 b Fk(T)121 b(h)g(r)g(e)g(a)g(d)
+323 b(\()197 b(\))916 b Fj(f)8491 9298 y Fl(p)147 b(u)g(b)g(l)g(i)g(c)
+940 b(v)125 b(o)g(i)g(d)921 b Fk(r)129 b(u)g(n)328 b(\()196
+b(\))916 b Fj(f)11148 10627 y Fk(H)148 b(t)g(t)g(p)g(R)g(e)g(q)g(u)g(e)
+g(s)g(t)954 b(r)145 b(e)g(q)829 b(=)844 b(p)159 b(a)g(r)g(s)g(e)g(R)g
+(e)g(q)g(u)g(e)g(s)g(t)310 b(\()273 b(s)126 b(o)g(c)g(k)342
+b(\))217 b(;)11136 11955 y(H)135 b(t)g(t)g(p)g(R)g(e)g(s)g(p)g(o)g(n)g
+(s)g(e)967 b(r)163 b(e)g(s)g(p)846 b(=)f(c)161 b(r)g(e)g(a)g(t)g(e)g(R)
+g(e)g(s)g(p)g(o)g(n)g(s)g(e)311 b(\()292 b(r)145 b(e)g(q)362
+b(\))217 b(;)11131 13284 y(s)131 b(e)g(n)g(d)g(R)g(e)g(s)g(p)g(o)g(n)g
+(s)g(e)277 b(\()252 b(s)105 b(o)g(c)g(k)403 b(,)1020
+b(r)163 b(e)g(s)g(p)379 b(\))217 b(;)11126 14612 y(s)126
+b(o)g(c)g(k)319 b(.)368 b(c)174 b(l)g(o)g(s)g(e)413 b(\()237
+b(\))f(;)8399 15940 y Fj(g)5843 17269 y(g)156 b Fk(;)5865
+18597 y(t)372 b(.)429 b(s)236 b(t)f(a)h(r)g(t)472 b(\()237
+b(\))f(;)3086 19925 y Fj(g)1882 23393 y Fn(This)349 b(code)h(is)f(much)
+h(better)-67 b(.)516 b(Since)350 b(we)g(ha)-24 b(v)-18
+b(e)349 b(a)h(separate)g(thread)f(for)g(each)i(request,)361
+b(and)350 b(since)f(each)h(thread)g(will)0 24899 y(run)379
+b(independently)i(of)e(all)h(the)g(others,)398 b(it)379
+b(w)-12 b(on')-22 b(t)380 b(matter)f(if)g(one)h(client)g(has)g(a)f(v)
+-18 b(ery)380 b(slo)-30 b(w)379 b(connection)h(an)-18
+b(ymore;)418 b(the)0 26404 y Fi(sendResponse)379 b Fn(function)c(will)h
+(still)f(tak)-12 b(e)376 b(a)g(long)f(time)h(to)g(complete)g(for)f
+(that)g(client,)394 b(b)-24 b(ut)376 b(it)f(will)h(run)f(in)h(parallel)
+0 27910 y(with)e(the)g Fi(sendResponse)k Fn(functions)373
+b(for)g(all)h(the)h(other)f(clients)f(we')-61 b(re)374
+b(servicing)g(at)g(the)g(same)g(time,)392 b(rather)374
+b(than)0 29415 y(blocking)303 b(them)h(as)e(before.)1882
+30921 y(The)295 b(abo)-18 b(v)g(e)295 b(code)g(is)g(still)f(not)h
+(perfect,)i(ho)-30 b(we)g(v)-18 b(er)-67 b(.)373 b(First)294
+b(of)g(all,)j(creating)e(a)g(ne)-30 b(w)296 b(thread)f(is)f(an)h(e)-18
+b(xpensi)-30 b(v)-18 b(e)295 b(operation)0 32426 y(in)345
+b(Ja)-24 b(v)-30 b(a,)355 b(and)345 b(programs)f(written)h(lik)-12
+b(e)345 b(the)g(one)g(abo)-18 b(v)g(e)345 b(can)g(often)g(spend)g(much)
+g(of)g(their)f(time)h(creating)g(ne)-30 b(w)345 b(threads.)0
+33932 y(While)365 b(this)g(problem)f(can)i(be)f(solv)-18
+b(ed)364 b(with)h(a)g(construct)f(called)i(a)f Fh(thr)-45
+b(ead)365 b(pool)p Fn(,)380 b(there)365 b(is)f(yet)h(another)g(problem)
+g(with)0 35437 y(this)383 b(style)g(of)h(code:)537 b(most)383
+b(modern)h(operating)f(systems)g(do)g(not)h(perform)f(well)h(when)g
+(the)g(number)f(of)g(Ja)-24 b(v)-30 b(a)383 b(threads)0
+36942 y(running)365 b(on)h(them)f(passes)g(be)-18 b(yond)365
+b(se)-30 b(v)-18 b(eral)365 b(hundreds.)563 b(Wh)-6 b(y)365
+b(this)g(performance)g(problem)h(occurs)f(is)g(not)g(important)0
+38448 y(here,)439 b(b)-24 b(ut)412 b(it)g(does)g(mean)h(that)f(we)h
+(can')-22 b(t)412 b(e)-18 b(xpect)412 b(a)h(web)f(serv)-18
+b(er)411 b(written)h(in)g(the)h(abo)-18 b(v)g(e)412 b(style)g(to)g
+(serv)-18 b(e)411 b(more)h(than)h(a)0 39953 y(couple)304
+b(of)e(hundred)h(clients)g(at)g(a)h(time.)1882 41459
+y(T)-97 b(o)271 b(w)-12 b(ork)270 b(around)i(this)e(performance)h
+(problem,)277 b(we)272 b(need)f(to)g(change)h(our)f(style)g(of)f
+(programming)h(to)g(what)h(is)e(often)0 42964 y(called)364
+b Fh(e)-18 b(vent-driven)364 b Fn(style.)12255 42524
+y Fm(3)13310 42964 y Fn(The)f(main)h(idea)g(of)f(this)h(style)f(of)g
+(programming)g(is)g(that)h(gi)-30 b(v)-18 b(en)364 b(an)-18
+b(y)363 b(function)h(call)g(that)0 44470 y(might)348
+b(block)g(on)g(input)g(or)g(output,)359 b(such)348 b(as)g(the)g
+Fi(sendResponse)j Fn(function)d(abo)-18 b(v)g(e,)359
+b(we)348 b(split)g(that)g(function)g(into)g(a)0 45975
+y Fh(r)-45 b(equest)323 b(e)-18 b(vent)346 b Fn(and)324
+b(a)g Fh(r)-45 b(eponse)323 b(e)-18 b(vent)p Fn(,)330
+b(normally)323 b(represented)h(as)f(function)h(objects.)437
+b(F)-18 b(or)323 b(e)-18 b(xample,)330 b(we)324 b(might)g(de\002ne)0
+47481 y(ne)-30 b(w)303 b(v)-18 b(ersions)302 b(of)h Fi(parseRequest)j
+Fn(and)d Fi(sendResponse)k Fn(lik)-12 b(e)303 b(this:)3178
+50277 y Fl(p)147 b(u)g(b)g(l)g(i)g(c)994 b(i)180 b(n)g(t)g(e)g(r)g(f)g
+(a)g(c)g(e)963 b Fk(P)118 b(a)g(r)g(s)g(e)g(D)g(o)g(n)g(e)842
+b Fj(f)5834 51606 y Fl(p)147 b(u)g(b)g(l)g(i)g(c)941
+b(v)125 b(o)g(i)g(d)920 b Fk(r)129 b(u)g(n)279 b(\()295
+b(H)148 b(t)g(t)g(p)g(R)g(e)g(q)g(u)g(e)g(s)g(t)954 b(r)145
+b(e)g(q)362 b(\))217 b(;)3086 52934 y Fj(g)3156 54262
+y Fl(v)125 b(o)g(i)g(d)950 b Fk(p)159 b(a)g(r)g(s)g(e)g(R)g(e)g(q)g(u)g
+(e)g(s)g(t)310 b(\()286 b(S)139 b(o)g(c)g(k)g(e)g(t)909
+b(s)105 b(o)g(c)g(k)403 b(,)976 b(P)118 b(a)g(r)g(s)g(e)g(D)g(o)g(n)g
+(e)888 b(d)101 b(o)g(n)g(e)250 b(\))867 b Fj(f)1011 b
+Fk(.)290 b(.)g(.)1010 b Fj(g)3156 55591 y Fl(v)125 b(o)g(i)g(d)922
+b Fk(s)131 b(e)g(n)g(d)g(R)g(e)g(s)g(p)g(o)g(n)g(s)g(e)277
+b(\()286 b(S)139 b(o)g(c)g(k)g(e)g(t)909 b(s)105 b(o)g(c)g(k)403
+b(,)993 b(H)135 b(t)g(t)g(p)g(R)g(e)g(s)g(p)g(o)g(n)g(s)g(e)941
+b(r)135 b(e)g(s)g(p)466 b(,)976 b(R)119 b(u)g(n)g(n)g(a)g(b)g(l)g(e)887
+b(d)101 b(o)g(n)g(e)251 b(\))867 b Fj(f)1010 b Fk(.)290
+b(.)h(.)1010 b Fj(g)1882 59059 y Fn(The)354 b(idea)h(is)f(that)h
+Fi(parseRequest)j Fn(will)d(no)-30 b(w)354 b(return)h(immediately)g
+(after)f(being)h(called,)368 b(and)355 b(sometime)g(later)-48
+b(,)0 60564 y(when)340 b(the)g(request)f(has)h(actually)g(been)g(read)g
+(of)-30 b(f)339 b(the)h(netw)-12 b(ork)339 b(and)h(parsed,)349
+b(the)340 b Fi(run)h Fn(function)e(of)h(the)g Fi(ParseDone)0
+62069 y Fn(object)372 b(passed)g(into)g Fi(parseRequest)j
+Fn(will)d(be)h(called.)583 b(Lik)-12 b(e)-30 b(wise,)389
+b Fi(sendResponse)375 b Fn(will)d(also)g(return)f(immedi-)0
+63575 y(ately)-79 b(,)272 b(and)263 b(the)h Fi(run)g
+Fn(function)f(of)g(the)h Fi(Runnable)h Fn(object)f(passed)e(into)i
+Fi(sendResponse)i Fn(will)e(be)f(called)h(later)-48 b(,)271
+b(once)0 65080 y(the)303 b(response)f(has)h(been)h(sent.)1882
+66586 y(Ignore)431 b(for)g(a)h(moment)g(ho)-30 b(w)432
+b(these)f(ne)-30 b(w)432 b(v)-18 b(ersions)430 b(of)i
+Fi(parseRequest)j Fn(and)d Fi(sendResponse)j Fn(are)c(imple-)0
+68091 y(mented,)368 b(and)355 b(consider)f(only)h(ho)-30
+b(w)355 b(we)g(might)g(use)f(them.)531 b(F)-18 b(or)354
+b(e)-18 b(xample,)368 b(we)356 b(could)f(re)-30 b(write)354
+b(the)h(web)g(serv)-18 b(er')-67 b(s)353 b(main)0 69597
+y(loop)303 b(lik)-12 b(e)303 b(this:)2145 72393 y Fg(1)687
+b Fl(w)133 b(h)g(i)g(l)g(e)946 b Fk(\()286 b Fl(t)138
+b(r)g(u)g(e)286 b Fk(\))867 b Fj(f)2145 73722 y Fg(2)3405
+b Fl(f)194 b(i)g(n)h(a)h(l)997 b Fk(S)139 b(o)g(c)g(k)g(e)g(t)930
+b(s)126 b(o)g(c)g(k)809 b(=)843 b(a)159 b(c)g(c)g(e)g(p)g(t)g(C)g(o)g
+(n)g(n)g(e)g(c)g(t)g(i)g(o)g(n)395 b(\()236 b(\))h(;)p
+0 74932 20800 45 v 1406 75673 a Fg(3)1793 76096 y Fe(If)249
+b(you')-50 b(v)-15 b(e)250 b(e)-25 b(v)-15 b(er)250 b(programmed)f
+(using)g(Ja)-20 b(v)-25 b(a')-55 b(s)250 b(Swing)f(graphics)g(library)
+-65 b(,)250 b(you')-50 b(v)-15 b(e)250 b(already)g(done)g(some)f(e)-25
+b(v)-15 b(ent-dri)-25 b(v)-15 b(en)250 b(programming.)25697
+79417 y Fn(2)p eop end
+%%Page: 3 3
+TeXDict begin 3 2 bop 2145 5313 a Fg(3)3328 b Fk(P)118
+b(a)g(r)g(s)g(e)g(D)g(o)g(n)g(e)911 b(p)124 b(a)g(r)g(s)g(e)g(D)g(o)g
+(n)g(e)815 b(=)706 b Fl(n)22 b(e)g(w)804 b Fk(P)118 b(a)g(r)g(s)g(e)g
+(D)g(o)g(n)g(e)319 b(\()197 b(\))916 b Fj(f)2145 6642
+y Fg(4)6014 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)940 b(v)125
+b(o)g(i)g(d)921 b Fk(r)129 b(u)g(n)278 b(\()295 b(H)148
+b(t)g(t)g(p)g(R)g(e)g(q)g(u)g(e)g(s)g(t)955 b(r)145 b(e)g(q)292
+b(\))867 b Fj(f)2145 7970 y Fg(5)8659 b Fk(H)135 b(t)g(t)g(p)g(R)g(e)g
+(s)g(p)g(o)g(n)g(s)g(e)967 b(r)163 b(e)g(s)g(p)846 b(=)f(c)161
+b(r)g(e)g(a)g(t)g(e)g(R)g(e)g(s)g(p)g(o)g(n)g(s)g(e)311
+b(\()292 b(r)145 b(e)g(q)362 b(\))217 b(;)2145 9298 y
+Fg(6)8642 b Fk(R)119 b(u)g(n)g(n)g(a)g(b)g(l)g(e)901
+b(s)115 b(e)g(n)g(d)g(R)g(e)g(s)g(p)g(o)g(n)g(s)g(e)g(D)g(o)g(n)g(e)806
+b(=)706 b Fl(n)22 b(e)g(w)805 b Fk(R)119 b(u)g(n)g(n)g(a)g(b)g(l)g(e)
+319 b(\()197 b(\))916 b Fj(f)2145 10627 y Fg(7)11328
+b Fl(p)147 b(u)g(b)g(l)g(i)g(c)940 b(v)125 b(o)g(i)g(d)921
+b Fk(r)129 b(u)g(n)327 b(\()197 b(\))916 b Fj(f)845 b
+Fk(s)126 b(o)g(c)g(k)319 b(.)368 b(c)174 b(l)g(o)g(s)g(e)414
+b(\()236 b(\))h(;)956 b Fj(g)2145 11955 y Fg(8)8679 b
+Fj(g)156 b Fk(;)2145 13284 y Fg(9)8654 b Fk(s)131 b(e)g(n)g(d)g(R)g(e)g
+(s)g(p)g(o)g(n)g(s)g(e)277 b(\()252 b(s)105 b(o)g(c)g(k)403
+b(,)993 b(r)135 b(e)g(s)g(p)466 b(,)973 b(s)115 b(e)g(n)g(d)g(R)g(e)g
+(s)g(p)g(o)g(n)g(s)g(e)g(D)g(o)g(n)g(e)339 b(\))217 b(;)1813
+14612 y Fg(10)5922 b Fj(g)1813 15940 y Fg(11)3366 b Fj(g)156
+b Fk(;)1813 17269 y Fg(12)3369 b Fk(p)159 b(a)g(r)g(s)g(e)g(R)g(e)g(q)g
+(u)g(e)g(s)g(t)310 b(\()252 b(s)105 b(o)g(c)g(k)403 b(,)982
+b(p)124 b(a)g(r)g(s)g(e)g(D)g(o)g(n)g(e)348 b(\))216
+b(;)1813 18597 y Fg(13)609 b Fj(g)1882 22062 y Fn(W)-97
+b(o)-30 b(w)-79 b(,)407 b(that')-67 b(s)386 b(some)f(ugly)h(code!)625
+b(But)387 b(look)f(past)f(its)h(ugliness)f(for)g(the)i(moment,)407
+b(and)386 b(let')-67 b(s)385 b(think)h(about)h(what)f(it)0
+23567 y(does.)691 b(First,)433 b(one)408 b(line)g(2)g(we)h(accept)f(a)h
+(connection)f(as)g(before.)691 b(Then,)434 b(we)408 b(decide)h(what)f
+(we')-61 b(re)408 b(going)g(to)g(do)h(once)0 25073 y(we')-61
+b(v)-18 b(e)301 b(parsed)f(a)h(request)f(and)h(write)f(it)g(as)g(a)h
+Fi(ParseDone)i Fn(object)e(on)g(lines)f(3\22611.)375
+b(Ne)-18 b(xt,)301 b(we)g(call)g Fi(parseRequest)0 26578
+y Fn(on)361 b(line)g(12.)549 b(That)361 b(will)g(parse)f(the)h
+(request,)375 b(and)361 b(then)g(call)g Fi(run)h Fn(on)e(line)h(4.)550
+b(In)360 b(turn,)375 b Fi(run)362 b Fn(creates)e(a)h(response)f(\(line)
+0 28084 y(5\))300 b(and)h(decides)g(what)g(it')-67 b(s)300
+b(going)g(to)h(do)g(once)g(the)f(response)g(is)g(sent,)h(encoding)g
+(that)g(kno)-30 b(wledge)301 b(as)f(an)h(object)g(of)f(type)0
+29589 y Fi(Runnable)p Fn(.)436 b(It)322 b(then)g(calls)g
+Fi(sendResponse)p Fn(,)331 b(which)323 b(sends)e(the)i(response)e(and)i
+(then)f(calls)g Fi(run)h Fn(on)g(line)f(7,)328 b(which)0
+31095 y(closes)302 b(the)i(sock)-12 b(et.)375 b(Whe)-30
+b(w!)1882 32600 y(Y)-133 b(ou')-61 b(re)325 b(probably)g(thinking)g
+(that)h(the)f(abo)-18 b(v)g(e)326 b(code)f(is)g(one)h(seriously)e(con)
+-48 b(v)-24 b(oluted)325 b(w)-12 b(ay)325 b(to)h(write)f(a)g(web)h
+(serv)-18 b(er)-67 b(.)441 b(In)0 34106 y(part)367 b(you')-61
+b(re)368 b(right,)383 b(although)368 b(we')-12 b(ll)367
+b(impro)-18 b(v)g(e)368 b(on)f(the)h(readability)g(of)f(the)h(abo)-18
+b(v)g(e)367 b(code)h(later)g(in)f(this)g(tutorial.)569
+b(At)368 b(the)0 35611 y(same)341 b(time,)351 b(ho)-30
+b(we)g(v)-18 b(er)-48 b(,)350 b(notice)342 b(that)f(we')-61
+b(v)-18 b(e)342 b(both)g(eliminated)f(the)h(problem)f(of)g(clients)g
+(blocking)h(on)g(one)f(another)h(and)0 37117 y(threads)297
+b(from)g(the)g(program.)374 b(Since)298 b(there)f(are)h(no)f(longer)h
+(an)-18 b(y)297 b(blocking)h(calls,)g(each)g(run)f(of)h(the)f(while)h
+(loop)g(will)f(no)-30 b(w)0 38622 y(happen)374 b(as)f(quickly)h(as)f
+(possible,)391 b(bringing)373 b(us)g(right)g(back)h(to)f(the)h(call)g
+(to)f Fi(acceptConnection)378 b Fn(where)c(we)g(can)0
+40128 y(be)-18 b(gin)280 b(helping)g(the)g(ne)-18 b(xt)280
+b(client)g(right)f(a)-18 b(w)-12 b(ay)-79 b(.)369 b(And)280
+b(if)f(you)h(trust)f(me)h(for)f(the)h(moment)g(that)g(we)h(can)f
+(implement)g(the)g(ne)-30 b(w)0 41633 y(v)-18 b(ersions)355
+b(of)h Fi(parseRequest)k Fn(and)d Fi(sendResponse)j Fn(with)c(only)h(a)
+g(single)f(thread,)370 b(then)356 b(we')-61 b(v)-18 b(e)357
+b(also)g(eliminated)0 43138 y(our)303 b(pre)-30 b(vious)302
+b(need)i(for)e(multiple)h(threads.)1882 44644 y(The)413
+b(remainder)g(of)g(this)g(document)h(is)f(in)g(se)-30
+b(v)-18 b(eral)413 b(parts.)706 b(First,)440 b(I')-12
+b(ll)412 b(describe)h(the)h(e)-30 b(v)-18 b(ent)413 b(model)h(that)f
+(Bamboo)0 46149 y(uses,)428 b(and)404 b(the)g(v)-30 b(arious)403
+b(Bamboo)h(classes)f(that)h(mak)-12 b(e)404 b(e)-30 b(v)-18
+b(ent-dri)-30 b(v)-18 b(en)403 b(programming)g(easier)-67
+b(.)678 b(I)403 b(w)-12 b(on')-22 b(t)404 b(describe)f(ho)-30
+b(w)0 47655 y(these)407 b(classes)e(are)i(implemented)g(in)g(this)f
+(tutorial,)433 b(for)406 b(that)h(you')-12 b(ll)406 b(ha)-24
+b(v)-18 b(e)407 b(to)f(read)h(the)g(source)f(if)h(you')-61
+b(re)406 b(interested.)0 49160 y(\(It')-67 b(s)361 b(not)h(necessary)g
+(to)g(understand)g(the)g(source)g(in)g(order)g(to)g(use)g(it.\))552
+b(Ne)-18 b(xt,)378 b(I')-12 b(ll)361 b(describe)h(ho)-30
+b(w)362 b(to)g(use)g(the)g(Bamboo)0 50666 y(messaging)303
+b(layer)g(and)g(DHT)g(router)-48 b(,)302 b(so)g(that)i(you)f(can)g(b)
+-24 b(uild)303 b(your)g(o)-30 b(wn)303 b(DHT)g(applications)g(on)g(top)
+g(of)g(Bamboo.)0 54563 y Fo(3)1594 b(The)399 b(Bamboo)g(Ev)-16
+b(ent)398 b(Model)0 57323 y Fn(In)303 b(this)f(section)h(I')-12
+b(ll)302 b(get)h(into)h(the)f(full)f(details)h(of)g(the)g(e)-30
+b(v)-18 b(ent)303 b(model)g(Bamboo)h(uses,)f(staring)f(from)g(the)i(be)
+-18 b(ginning.)0 60642 y Fd(3.1)1329 b(Callbacks)331
+b(and)h Fc(registerTimer)0 62965 y Fn(Abo)-18 b(v)g(e)303
+b(we)h(sa)-18 b(w)302 b(a)h(use)g(of)g(the)g(interf)-12
+b(ace)303 b Fi(java.lang.Runnable)p Fn(,)308 b(which)303
+b(is)g(de\002ned)g(lik)-12 b(e)303 b(this:)3178 65431
+y Fl(p)147 b(u)g(b)g(l)g(i)g(c)994 b(i)180 b(n)g(t)g(e)g(r)g(f)g(a)g(c)
+g(e)963 b Fk(R)119 b(u)g(n)g(n)g(a)g(b)g(l)g(e)841 b
+Fj(f)868 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)940 b(v)125 b(o)g(i)g(d)921
+b Fk(r)129 b(u)g(n)367 b(\()237 b(\))f(;)956 b Fj(g)0
+68568 y Fn(This)459 b(kind)h(of)g(interf)-12 b(ace)460
+b(is)g(often)g(called)g(a)h Fh(callbac)-24 b(k)21 b Fn(;)538
+b(you)461 b(pass)e(an)h(object)h(of)e(type)i Fi(Runnable)h
+Fn(to)e(some)g(other)0 70074 y(function)312 b(so)g(that)g(it)h(can)f
+(\223call)h(you)f(back\224)h(later)f(by)h(calling)f(the)h
+Fi(run)g Fn(function.)403 b(Abo)-18 b(v)g(e,)315 b(we)d(passed)g(one)h
+(such)f(object)0 71579 y(as)303 b(an)g(ar)-22 b(gument)303
+b(to)g(the)h Fi(sendResponse)i Fn(function.)1882 73085
+y(Ev)-18 b(ents)480 b(in)g(Bamboo)i(are)e(implemented)i(as)e(either)h
+(functions)f(or)g(callbacks.)909 b(This)480 b(idea)h(is)f(perhaps)g
+(best)g(e)-18 b(x-)0 74590 y(plained)383 b(by)f(e)-18
+b(xample.)615 b(Bamboo)383 b(includes)g(a)f(class,)402
+b Fi(bamboo.lss.ASyncCore)388 b Fn(that)383 b(contains)f(tw)-12
+b(o)383 b(functions,)0 76096 y Fi(registerTimer)307 b
+Fn(and)c Fi(asyncMain)p Fn(.)378 b(Y)-133 b(ou)303 b(use)g(them)g(lik)
+-12 b(e)303 b(this:)25697 79417 y(3)p eop end
+%%Page: 4 4
+TeXDict begin 4 3 bop 2145 5313 a Fg(1)701 b Fl(p)147
+b(u)g(b)g(l)g(i)g(c)999 b(c)185 b(l)f(a)h(s)f(s)977 b
+Fk(D)129 b(e)g(l)g(a)g(y)g(e)g(d)g(H)g(e)g(l)g(l)g(o)g(W)g(o)g(r)g(l)g
+(d)845 b Fj(f)2145 6642 y Fg(2)3357 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025
+b(s)208 b(t)h(a)h(t)f(i)g(c)993 b Fk(R)119 b(u)g(n)g(n)g(a)g(b)g(l)g(e)
+972 b(p)186 b(r)g(i)g(n)h(t)f(C)h(a)f(l)g(l)h(b)f(a)h(c)g(k)871
+b(=)706 b Fl(n)22 b(e)g(w)805 b Fk(R)119 b(u)g(n)g(n)g(a)g(b)g(l)g(e)
+318 b(\()197 b(\))916 b Fj(f)2145 7970 y Fg(3)6014 b
+Fl(p)147 b(u)g(b)g(l)g(i)g(c)940 b(v)125 b(o)g(i)g(d)921
+b Fk(r)129 b(u)g(n)328 b(\()196 b(\))916 b Fj(f)2145
+9298 y Fg(4)8627 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)338
+b(o)144 b(u)g(t)340 b(.)406 b(p)212 b(r)g(i)g(n)g(t)g(l)g(n)361
+b(\()233 b(\224)210 b(H)123 b(e)g(l)g(l)g(o)441 b(,)p
+28424 9298 45 150 v 28469 9298 333 45 v 28801 9298 45
+150 v 981 w(w)123 b(o)g(r)g(l)g(d)271 b(!)234 b(\224)304
+b(\))217 b(;)2145 10627 y Fg(5)8627 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296
+b(.)393 b(e)200 b(x)g(i)f(t)410 b(\()211 b(0)i(\))e(;)2145
+11955 y Fg(6)5922 b Fj(g)2145 13284 y Fg(7)3366 b Fj(g)156
+b Fk(;)2145 14612 y Fg(8)3357 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025
+b(s)208 b(t)h(a)h(t)f(i)g(c)999 b(v)125 b(o)g(i)g(d)880
+b Fk(m)89 b(a)g(i)g(n)236 b(\()330 b(S)183 b(t)g(r)g(i)g(n)g(g)1043
+b([)196 b(])1024 b(a)163 b(r)g(g)g(s)309 b(\))915 b Fl(t)104
+b(h)g(r)g(o)g(w)g(s)930 b Fk(j)163 b(a)g(v)g(a)356 b(.)349
+b(i)156 b(o)350 b(.)331 b(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g(i)g(o)g
+(n)864 b Fj(f)2145 15940 y Fg(9)5927 b Fk(b)60 b(a)g(m)g(b)g(o)g(o)255
+b(.)399 b(l)206 b(s)f(s)399 b(.)275 b(A)81 b(S)g(y)g(n)g(c)g(C)g(o)g(r)
+g(e)905 b(a)154 b(c)g(o)g(r)g(e)840 b(=)706 b Fl(n)22
+b(e)g(w)746 b Fk(b)60 b(a)g(m)g(b)g(o)g(o)255 b(.)399
+b(l)206 b(s)f(s)399 b(.)292 b(A)98 b(S)g(y)g(n)g(c)g(C)g(o)g(r)g(e)g(I)
+g(m)g(p)g(l)344 b(\()237 b(\))f(;)1813 17269 y Fg(10)6021
+b Fk(a)154 b(c)g(o)g(r)g(e)349 b(.)380 b(r)186 b(e)h(g)g(i)f(s)g(t)g(e)
+h(r)f(T)h(i)f(m)g(e)h(r)327 b(\()141 b(5)g(0)g(0)g(0)282
+b(,)991 b(p)187 b(r)f(i)g(n)g(t)g(C)h(a)g(l)f(l)g(b)h(a)f(c)h(k)404
+b(\))217 b(;)1813 18597 y Fg(11)6021 b Fk(a)154 b(c)g(o)g(r)g(e)349
+b(.)306 b(a)112 b(s)g(y)g(n)g(c)g(M)g(a)g(i)g(n)351 b(\()237
+b(\))f(;)1813 19925 y Fg(12)3265 b Fj(g)1813 21254 y
+Fg(13)609 b Fj(g)1882 23885 y Fn(When)285 b(you)h(run)e(this)h
+(program,)j(it)d(will)g(pause)g(for)f(\002)-30 b(v)-18
+b(e)285 b(seconds)f(and)i(then)f(print)g(\223Hello,)k(W)-97
+b(orld!\224)369 b(before)285 b(e)-18 b(xiting.)0 25390
+y(Let')-67 b(s)302 b(break)h(do)-30 b(wn)303 b(the)h(code)f(a)g(line)h
+(at)f(a)g(time.)1882 26896 y(First,)551 b(lines)501 b(2\2267)i
+(de\002ne)f(a)g(callback,)553 b Fi(printCallback)p Fn(,)i(that)502
+b(prints)f(\223Hello,)553 b(w)-12 b(orld.)-85 b(\224)973
+b(to)502 b(standard)f(out-)0 28401 y(put)509 b(when)h(it')-67
+b(s)509 b(called.)995 b(Line)509 b(9)g(creates)g(an)h(instance)f(of)g
+Fi(ASyncCore)p Fn(,)563 b(and)510 b(line)f(10)h(tells)e(that)i(object)f
+(to)h(call)0 29907 y Fi(printCallback)357 b Fn(in)c(5)g(seconds)g
+(\(5,000)g(milliseconds\).)525 b(Finally)-79 b(,)366
+b(line)353 b(11)h(calls)f Fi(asyncMain)p Fn(;)380 b(once)354
+b(this)e(func-)0 31412 y(tion)399 b(is)g(called,)424
+b Fi(ASyncCore)402 b Fn(is)d(in)g(char)-22 b(ge.)666
+b(The)399 b(function)g Fi(asyncMain)j Fn(ne)-30 b(v)-18
+b(er)399 b(e)-18 b(xits,)423 b(it)400 b(simply)f(loops)g(fore)-30
+b(v)-18 b(er)-48 b(,)0 32918 y(calling)331 b(the)f(callbacks)h(re)-18
+b(gistered)330 b(with)g Fi(registerTimer)k Fn(when)d(required.)458
+b(\(That')-67 b(s)329 b(wh)-6 b(y)330 b(we)h(call)g Fi(exit)g
+Fn(on)g(line)0 34423 y(5;)303 b(otherwise,)g(the)g(program)g(w)-12
+b(ould)303 b(run)g(fore)-30 b(v)-18 b(er)-67 b(.)375
+b(Remo)-18 b(v)g(e)303 b(that)g(call)h(and)f(try)g(it)g(to)g(see)g
+(what)g(I)g(mean.\))1882 35929 y(In)380 b(your)g(e)-30
+b(v)-18 b(ent-dri)-30 b(v)-18 b(en)379 b(programs,)399
+b(you)380 b(will)h(usually)f(create)g(an)h(object)f(of)g(type)h
+Fi(ASyncCore)p Fn(,)402 b(perform)379 b(some)0 37434
+y(other)303 b(setup)g(including)g(re)-18 b(gistering)302
+b(timer)h(e)-30 b(v)-18 b(ents,)302 b(and)i(then)f(call)g
+Fi(asyncMain)p Fn(.)0 40650 y Fd(3.2)1329 b(P)-13 b(assing)331
+b(Ar)-13 b(guments)330 b(to)j(Callbacks)0 42973 y Fn(Let')-67
+b(s)393 b(say)g(that)h(instead)g(of)f(w)-12 b(anting)394
+b(to)g(print)f(\223Hello,)417 b(W)-97 b(orld!\224)648
+b(after)393 b(\002)-30 b(v)-18 b(e)393 b(seconds,)416
+b(you)394 b(instead)f(w)-12 b(anted)395 b(to)e(print)0
+44479 y(whate)-30 b(v)-18 b(er)303 b(string)f(w)-12 b(as)303
+b(passed)f(in)h(on)h(the)f(command)g(line.)376 b(Y)-133
+b(ou)303 b(might)g(try)g(something)g(lik)-12 b(e)303
+b(this:)2145 46543 y Fg(1)701 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)999
+b(c)185 b(l)f(a)h(s)f(s)952 b Fk(B)103 b(a)g(d)g(D)g(e)g(l)g(a)g(y)g(e)
+g(d)g(E)g(c)g(h)g(o)835 b Fj(f)2145 47872 y Fg(2)3357
+b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025 b(s)208 b(t)h(a)h(t)f(i)g(c)1056
+b Fk(S)183 b(t)g(r)g(i)g(n)g(g)1067 b(s)221 b(t)g(r)400
+b(;)2145 49200 y Fg(3)3357 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025
+b(s)208 b(t)h(a)h(t)f(i)g(c)993 b Fk(R)119 b(u)g(n)g(n)g(a)g(b)g(l)g(e)
+972 b(p)186 b(r)g(i)g(n)h(t)f(C)h(a)f(l)g(l)h(b)f(a)h(c)g(k)871
+b(=)706 b Fl(n)22 b(e)g(w)805 b Fk(R)119 b(u)g(n)g(n)g(a)g(b)g(l)g(e)
+318 b(\()197 b(\))916 b Fj(f)2145 50528 y Fg(4)6014 b
+Fl(p)147 b(u)g(b)g(l)g(i)g(c)940 b(v)125 b(o)g(i)g(d)921
+b Fk(r)129 b(u)g(n)328 b(\()196 b(\))916 b Fj(f)2145
+51857 y Fg(5)8627 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296
+b(.)338 b(o)144 b(u)g(t)340 b(.)406 b(p)212 b(r)g(i)g(n)g(t)g(l)g(n)361
+b(\()368 b(s)221 b(t)h(r)438 b(\))217 b(;)2145 53185
+y Fg(6)8627 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)393
+b(e)200 b(x)g(i)f(t)410 b(\()211 b(0)i(\))e(;)2145 54513
+y Fg(7)5922 b Fj(g)2145 55842 y Fg(8)3366 b Fj(g)156
+b Fk(;)2145 57170 y Fg(9)3357 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025
+b(s)208 b(t)h(a)h(t)f(i)g(c)999 b(v)125 b(o)g(i)g(d)880
+b Fk(m)89 b(a)g(i)g(n)236 b(\()330 b(S)183 b(t)g(r)g(i)g(n)g(g)1043
+b([)196 b(])1024 b(a)163 b(r)g(g)g(s)309 b(\))915 b Fl(t)104
+b(h)g(r)g(o)g(w)g(s)930 b Fk(j)163 b(a)g(v)g(a)356 b(.)349
+b(i)156 b(o)350 b(.)331 b(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g(i)g(o)g
+(n)864 b Fj(f)1813 58498 y Fg(10)6084 b Fl(i)217 b(f)1029
+b Fk(\()310 b(a)163 b(r)g(g)g(s)355 b(.)367 b(l)174 b(e)g(n)g(g)g(t)g
+(h)709 b Fb(<)733 b Fk(1)135 b(\))856 b Fj(f)1813 59827
+y Fg(11)8627 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)385
+b(e)191 b(r)g(r)384 b(.)406 b(p)212 b(r)g(i)g(n)g(t)g(l)g(n)361
+b(\()233 b(\224)221 b(u)133 b(s)g(a)g(g)g(e)314 b(:)p
+28424 59827 V 28469 59827 333 45 v 28801 59827 45 150
+v 1005 w(j)163 b(a)g(v)g(a)p 31745 59827 V 31789 59827
+333 45 v 32122 59827 45 150 v 930 w(B)103 b(a)g(d)g(D)g(e)g(l)g(a)g(y)g
+(e)g(d)g(E)g(c)g(h)g(o)p 41708 59827 V 41752 59827 333
+45 v 42084 59827 45 150 v 648 w Fb(<)117 b Fk(s)183 b(t)g(r)g(i)g(n)g
+(g)267 b Fb(>)-12 b Fk(\224)304 b(\))217 b(;)1813 61155
+y Fg(12)8627 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)393
+b(e)200 b(x)g(i)f(t)410 b(\()211 b(1)i(\))e(;)1813 62483
+y Fg(13)5922 b Fj(g)1813 63812 y Fg(14)6088 b Fk(s)221
+b(t)g(r)905 b(=)847 b(a)163 b(r)g(g)g(s)373 b([)212 b(0)g(])f(;)1813
+65140 y Fg(15)5927 b Fk(b)60 b(a)g(m)g(b)g(o)g(o)255
+b(.)399 b(l)206 b(s)f(s)399 b(.)275 b(A)81 b(S)g(y)g(n)g(c)g(C)g(o)g(r)
+g(e)905 b(a)154 b(c)g(o)g(r)g(e)840 b(=)706 b Fl(n)22
+b(e)g(w)746 b Fk(b)60 b(a)g(m)g(b)g(o)g(o)255 b(.)399
+b(l)206 b(s)f(s)399 b(.)292 b(A)98 b(S)g(y)g(n)g(c)g(C)g(o)g(r)g(e)g(I)
+g(m)g(p)g(l)344 b(\()237 b(\))f(;)1813 66469 y Fg(16)6021
+b Fk(a)154 b(c)g(o)g(r)g(e)349 b(.)380 b(r)186 b(e)h(g)g(i)f(s)g(t)g(e)
+h(r)f(T)h(i)f(m)g(e)h(r)327 b(\()141 b(5)g(0)g(0)g(0)282
+b(,)991 b(p)187 b(r)f(i)g(n)g(t)g(C)h(a)g(l)f(l)g(b)h(a)f(c)h(k)404
+b(\))217 b(;)1813 67797 y Fg(17)6021 b Fk(a)154 b(c)g(o)g(r)g(e)349
+b(.)306 b(a)112 b(s)g(y)g(n)g(c)g(M)g(a)g(i)g(n)351 b(\()237
+b(\))f(;)1813 69125 y Fg(18)3265 b Fj(g)1813 70454 y
+Fg(19)609 b Fj(g)1882 73085 y Fn(Here)428 b(we')-61 b(v)-18
+b(e)429 b(used)f(what)g(amounts)g(to)h(a)f(global)h(v)-30
+b(ariable,)459 b Fi(str)p Fn(,)h(to)429 b(pass)e(the)i(string)e(to)h
+(echo)h(from)e(the)i Fi(main)0 74590 y Fn(function)267
+b(to)g Fi(printCallback)p Fn(.)367 b(Bad)268 b(programmer!)363
+b(Maybe)267 b(you')-61 b(re)267 b(crafty)-79 b(,)274
+b(though,)h(and)267 b(you')-61 b(v)-18 b(e)268 b(already)f(thought)0
+76096 y(of)303 b(a)g(w)-12 b(ay)303 b(around)g(using)g(a)g(global)g(v)
+-30 b(ariable,)303 b(such)g(as)g(this:)25697 79417 y(4)p
+eop end
+%%Page: 5 5
+TeXDict begin 5 4 bop 2145 5313 a Fg(1)701 b Fl(p)147
+b(u)g(b)g(l)g(i)g(c)999 b(c)185 b(l)f(a)h(s)f(s)994 b
+Fk(B)146 b(e)g(t)g(t)g(e)g(r)g(D)g(e)g(l)g(a)g(y)g(e)g(d)g(E)g(c)g(h)g
+(o)865 b Fj(f)2145 6642 y Fg(2)3357 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025
+b(s)208 b(t)h(a)h(t)f(i)g(c)999 b(v)125 b(o)g(i)g(d)880
+b Fk(m)89 b(a)g(i)g(n)236 b(\()330 b(S)183 b(t)g(r)g(i)g(n)g(g)1043
+b([)196 b(])1024 b(a)163 b(r)g(g)g(s)309 b(\))915 b Fl(t)104
+b(h)g(r)g(o)g(w)g(s)930 b Fk(j)163 b(a)g(v)g(a)356 b(.)349
+b(i)156 b(o)350 b(.)331 b(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g(i)g(o)g
+(n)864 b Fj(f)2145 7970 y Fg(3)6084 b Fl(i)217 b(f)1029
+b Fk(\()310 b(a)163 b(r)g(g)g(s)355 b(.)367 b(l)174 b(e)g(n)g(g)g(t)g
+(h)709 b Fb(<)733 b Fk(1)135 b(\))856 b Fj(f)2145 9298
+y Fg(4)8627 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)385
+b(e)191 b(r)g(r)384 b(.)406 b(p)212 b(r)g(i)g(n)g(t)g(l)g(n)361
+b(\()233 b(\224)221 b(u)133 b(s)g(a)g(g)g(e)314 b(:)p
+28424 9298 45 150 v 28469 9298 333 45 v 28801 9298 45
+150 v 1005 w(j)163 b(a)g(v)g(a)p 31745 9298 V 31789 9298
+333 45 v 32122 9298 45 150 v 972 w(B)146 b(e)g(t)g(t)g(e)g(r)g(D)g(e)g
+(l)g(a)g(y)g(e)g(d)g(E)g(c)g(h)g(o)p 43700 9298 V 43745
+9298 333 45 v 44077 9298 45 150 v 678 w Fb(<)118 b Fk(s)183
+b(t)g(r)g(i)g(n)g(g)267 b Fb(>)-13 b Fk(\224)305 b(\))217
+b(;)2145 10627 y Fg(5)8627 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296
+b(.)393 b(e)200 b(x)g(i)f(t)410 b(\()211 b(1)i(\))e(;)2145
+11955 y Fg(6)5922 b Fj(g)2145 13284 y Fg(7)5927 b Fk(b)60
+b(a)g(m)g(b)g(o)g(o)255 b(.)399 b(l)206 b(s)f(s)399 b(.)275
+b(A)81 b(S)g(y)g(n)g(c)g(C)g(o)g(r)g(e)905 b(a)154 b(c)g(o)g(r)g(e)840
+b(=)706 b Fl(n)22 b(e)g(w)746 b Fk(b)60 b(a)g(m)g(b)g(o)g(o)255
+b(.)399 b(l)206 b(s)f(s)399 b(.)292 b(A)98 b(S)g(y)g(n)g(c)g(C)g(o)g(r)
+g(e)g(I)g(m)g(p)g(l)344 b(\()237 b(\))f(;)2145 14612
+y Fg(8)6061 b Fl(f)195 b(i)f(n)h(a)g(l)1042 b Fk(S)183
+b(t)g(r)g(i)g(n)g(g)1067 b(s)221 b(t)g(r)905 b(=)847
+b(a)163 b(r)g(g)g(s)373 b([)211 b(0)h(])f(;)2145 15940
+y Fg(9)5986 b Fk(R)119 b(u)g(n)g(n)g(a)g(b)g(l)g(e)972
+b(p)186 b(r)g(i)g(n)h(t)f(C)h(a)g(l)f(l)g(b)g(a)h(c)g(k)871
+b(=)706 b Fl(n)22 b(e)g(w)805 b Fk(R)119 b(u)g(n)g(n)g(a)g(b)g(l)g(e)
+319 b(\()196 b(\))916 b Fj(f)1813 17269 y Fg(10)8671
+b Fl(p)147 b(u)g(b)g(l)g(i)g(c)940 b(v)125 b(o)g(i)g(d)921
+b Fk(r)129 b(u)g(n)327 b(\()197 b(\))916 b Fj(f)1813
+18597 y Fg(11)11284 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296
+b(.)338 b(o)144 b(u)g(t)340 b(.)405 b(p)213 b(r)f(i)g(n)g(t)g(l)g(n)360
+b(\()369 b(s)221 b(t)g(r)439 b(\))217 b(;)1813 19925
+y Fg(12)11284 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)393
+b(e)200 b(x)f(i)g(t)411 b(\()211 b(0)h(\))g(;)1813 21254
+y Fg(13)8579 b Fj(g)1813 22582 y Fg(14)6022 b Fj(g)156
+b Fk(;)1813 23910 y Fg(15)6021 b Fk(a)154 b(c)g(o)g(r)g(e)349
+b(.)380 b(r)186 b(e)h(g)g(i)f(s)g(t)g(e)h(r)f(T)h(i)f(m)g(e)h(r)327
+b(\()141 b(5)g(0)g(0)g(0)282 b(,)991 b(p)187 b(r)f(i)g(n)g(t)g(C)h(a)g
+(l)f(l)g(b)h(a)f(c)h(k)404 b(\))217 b(;)1813 25239 y
+Fg(16)6021 b Fk(a)154 b(c)g(o)g(r)g(e)349 b(.)306 b(a)112
+b(s)g(y)g(n)g(c)g(M)g(a)g(i)g(n)351 b(\()237 b(\))f(;)1813
+26567 y Fg(17)3265 b Fj(g)1813 27895 y Fg(18)609 b Fj(g)1882
+31362 y Fn(In)282 b(this)h(program,)j(we')-61 b(v)-18
+b(e)283 b(remo)-18 b(v)g(ed)283 b(the)g(global)g(v)-30
+b(ariable)283 b(by)f(de\002ning)h Fi(printCallback)k
+Fn(inside)282 b(of)h Fi(main)p Fn(,)288 b(and)0 32868
+y(thereby)295 b(putting)g Fi(str)h Fn(within)f(its)g(scope.)373
+b(Pretty)295 b(crafty)-79 b(,)296 b(b)-24 b(ut)295 b(it)g(has)g(one)g
+(big)g(do)-30 b(wnside:)371 b(what)296 b(if)e Fi(printCallback)0
+34373 y Fn(itself)323 b(de\002ned)h(another)f(callback,)330
+b(which)324 b(in)f(turn)g(de\002ned)h(another)g(callback,)329
+b(and)324 b(so)f(on?)438 b(Pretty)323 b(soon)g(you')-61
+b(d)324 b(suf)-30 b(fer)0 35879 y(death)303 b(through)g(e)-18
+b(xcessi)-30 b(v)-18 b(e)303 b(indentation.)0 39197 y
+Fd(3.3)1329 b(The)331 b Fc(curry)h Fd(Function)0 41521
+y Fn(T)-97 b(o)344 b(pass)f(ar)-22 b(guments)343 b(to)h(callbacks)g
+(without)g(using)g(so)f(much)h(indentation,)355 b(we')-12
+b(ll)343 b(introduce)h(a)g(technique)h(from)e Fh(func-)0
+43026 y(tional)326 b Fn(programming)e(languages)g(\(such)g(as)g(Lisp)f
+(and)i(ML\))e(called)i Fh(currying)p Fn(.)439 b(In)324
+b(such)g(languages,)329 b(gi)-30 b(v)-18 b(en)325 b(a)f(function)0
+44532 y(that)319 b(tak)-12 b(es)318 b(tw)-12 b(o)319
+b(ar)-22 b(guments)318 b(and)h(a)g(v)-30 b(alue)319 b(for)f(one)g(ar)
+-22 b(gument,)323 b(you)c(can)g(produce)g(a)g(ne)-30
+b(w)318 b(function)h(that)g(tak)-12 b(es)318 b(only)h(the)0
+46037 y(second)303 b(ar)-22 b(gument.)376 b(F)-18 b(or)303
+b(e)-18 b(xample,)303 b(using)g(Ja)-24 b(v)-30 b(a-lik)-12
+b(e)302 b(syntax,)h(we)g(might)g(ha)-24 b(v)-18 b(e:)3178
+48833 y Fl(p)147 b(u)g(b)g(l)g(i)g(c)990 b(i)175 b(n)g(t)938
+b Fk(a)99 b(d)g(d)247 b(\()322 b Fl(i)175 b(n)g(t)1037
+b Fk(l)196 b(e)i(f)e(t)587 b(,)1033 b Fl(i)175 b(n)g(t)1045
+b Fk(r)204 b(i)h(g)g(h)h(t)352 b(\))867 b Fj(f)850 b
+Fl(r)130 b(e)g(t)g(u)g(r)g(n)1034 b Fk(l)236 b(e)g(f)g(t)920
+b(+)890 b(r)204 b(i)h(g)h(h)f(t)383 b(;)897 b Fj(g)3178
+50161 y Fl(p)147 b(u)g(b)g(l)g(i)g(c)990 b(i)175 b(n)g(t)942
+b Fk(a)103 b(d)g(d)g(4)g(2)251 b(\()323 b Fl(i)175 b(n)g(t)1044
+b Fk(r)205 b(i)f(g)i(h)f(t)353 b(\))831 b(=)849 b(c)164
+b(u)g(r)g(r)g(y)313 b(\()227 b(a)79 b(d)g(d)352 b(,)1032
+b(4)175 b(2)g(\))g(;)3321 51489 y(.)290 b(.)h(.)3205
+52818 y Fl(i)175 b(n)g(t)1018 b Fk(j)862 b(=)787 b(a)103
+b(d)g(d)g(4)g(2)315 b(\()212 b(7)g(\))f(;)1882 56284
+y Fn(In)373 b(other)g(w)-12 b(ords,)390 b(we)374 b(curry)f(the)g
+(function)g Fi(add)h Fn(with)g(the)f(v)-30 b(alue)374
+b(42)f(to)g(produce)h(a)f(ne)-30 b(w)374 b(function,)391
+b Fi(add42)p Fn(,)h(that)0 57790 y(tak)-12 b(es)328 b(one)g(ar)-22
+b(gument)329 b(and)f(returns)f(the)h(v)-30 b(alue)329
+b(of)e(that)i(ar)-22 b(gument)328 b(plus)g(42.)451 b(Right)328
+b(no)-30 b(w)328 b(this)g(technique)h(might)f(seem)g(a)0
+59295 y(little)303 b(pointless,)f(b)-24 b(ut)303 b(bear)g(with)g(me;)h
+(it)e(will)i(be)f(a)g(useful)f(technique)i(for)e(passing)h(ar)-22
+b(guments)303 b(to)g(callbacks.)1882 60801 y(It)286 b(turns)g(out)h
+(that)g(we)g(can)g(use)f(Ja)-24 b(v)-30 b(a')-67 b(s)286
+b(support)g(for)g(generics)g(\(called)h(templates)g(in)f(C++\))h(to)f
+(implement)h(currying.)0 62306 y(All)354 b(we)f(need)h(is)f(a)h(w)-12
+b(ay)353 b(to)h(refer)f(to)g(functions)g(as)g(objects,)366
+b(and)354 b(we')-12 b(ll)353 b(use)g(callbacks)h(for)f(this)g(purpose.)
+526 b(Because)354 b(of)0 63812 y(this)303 b(decision,)g(we)g(will)g
+(sometimes)f(refer)h(to)g(callbacks)g(as)g Fh(function)g(objects)p
+Fn(.)1882 65317 y(W)-97 b(e)335 b(already)f(ha)-24 b(v)-18
+b(e)335 b(a)f(callback)h(that)g(tak)-12 b(es)334 b(no)g(ar)-22
+b(guments:)438 b(the)335 b Fi(Runnable)h Fn(interf)-12
+b(ace)334 b(used)h(abo)-18 b(v)g(e.)469 b(What)335 b(we')-12
+b(ll)0 66823 y(do)303 b(is)g(introduce)g(another)g(type)g(of)g
+(callback)h(that)f(tak)-12 b(es)303 b(one)g(ar)-22 b(gument)303
+b(lik)-12 b(e)303 b(this:)3178 69618 y Fl(p)147 b(u)g(b)g(l)g(i)g(c)994
+b(i)180 b(n)g(t)g(e)g(r)g(f)g(a)g(c)g(e)912 b Fk(T)68
+b(h)g(u)g(n)g(k)g(1)38 b Fb(<)-102 b Fk(T)-107 b Fb(>)622
+b Fj(f)845 b Fl(v)125 b(o)g(i)g(d)921 b Fk(r)129 b(u)g(n)278
+b(\()141 b(T)837 b(t)395 b(\))217 b(;)937 b Fj(g)1882
+73085 y Fh(Thunk)315 b Fn(is)294 b(the)h(term)g(used)f(in)h(functional)
+g(programming)f(for)g(a)h(function)f(that)h(has)f(return)h(type)f(v)-24
+b(oid.)373 b(W)-97 b(e')-61 b(v)-18 b(e)296 b(called)0
+74590 y(the)k(abo)-18 b(v)g(e)300 b(interf)-12 b(ace)300
+b Fi(Thunk1)h Fn(because)f(it)g(tak)-12 b(es)299 b(one)h(ar)-22
+b(gument)301 b(and)f(returns)e(v)-24 b(oid.)375 b(W)-97
+b(e)300 b(can)g(create)h(a)f(ne)-30 b(w)299 b Fi(Thunk1)0
+76096 y Fn(object)k(that)h(tak)-12 b(es)302 b(an)i(inte)-18
+b(ger)302 b(ar)-22 b(gument)304 b(lik)-12 b(e)303 b(this:)25697
+79417 y(5)p eop end
+%%Page: 6 6
+TeXDict begin 6 5 bop 3098 5313 a Fk(T)68 b(h)g(u)g(n)g(k)g(1)38
+b Fb(<)70 b Fk(I)168 b(n)g(t)g(e)g(g)g(e)g(r)240 b Fb(>)706
+b Fk(i)139 b(n)g(t)g(T)g(h)g(u)g(n)g(k)828 b(=)706 b
+Fl(n)22 b(e)g(w)754 b Fk(T)68 b(h)g(u)g(n)g(k)g(1)38
+b Fb(<)70 b Fk(I)168 b(n)g(t)g(e)g(g)g(e)g(r)437 b Fb(>)99
+b Fk(\()g(\))817 b Fj(f)5812 6642 y Fl(v)125 b(o)g(i)g(d)921
+b Fk(r)129 b(u)g(n)278 b(\()337 b(I)189 b(n)h(t)f(e)g(g)h(e)g(r)1031
+b(i)326 b(\))867 b Fj(f)824 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296
+b(.)338 b(o)144 b(u)g(t)340 b(.)405 b(p)213 b(r)f(i)f(n)i(t)f(l)g(n)360
+b(\()326 b(i)395 b(\))217 b(;)937 b Fj(g)3086 7970 y(g)0
+11200 y Fn(Moreo)-18 b(v)g(er)-48 b(,)298 b(we)h(can)h(create)f(a)g
+Fi(curry)h Fn(function)e(that)h(will)g(tak)-12 b(e)299
+b(a)g Fi(Thunk1<T>)j Fn(and)d(an)g(object)g(of)f(type)h
+Fi(T)g Fn(and)g(return)0 12706 y(a)k Fi(Runnable)i Fn(object)f(lik)-12
+b(e)303 b(this:)3178 15294 y Fl(p)147 b(u)g(b)g(l)g(i)g(c)1024
+b(s)209 b(t)f(a)i(t)f(i)g(c)743 b Fb(<)-70 b Fk(T)-106
+b Fb(>)685 b Fk(R)119 b(u)g(n)g(n)g(a)g(b)g(l)g(e)949
+b(c)164 b(u)g(r)g(r)g(y)314 b(\()342 b Fl(f)194 b(i)h(n)g(a)g(l)926
+b Fk(T)68 b(h)g(u)g(n)g(k)g(1)38 b Fb(<)-102 b Fk(T)c
+Fb(>)664 b Fk(f)390 b(,)1052 b Fl(f)195 b(i)f(n)h(a)g(l)853
+b Fk(T)837 b(t)325 b(\))867 b Fj(f)5817 16622 y Fl(r)130
+b(e)g(t)g(u)g(r)g(n)819 b(n)22 b(e)g(w)805 b Fk(R)119
+b(u)g(n)g(n)g(a)g(b)g(l)g(e)319 b(\()196 b(\))916 b Fj(f)868
+b Fl(p)147 b(u)g(b)g(l)g(i)g(c)940 b(v)125 b(o)g(i)g(d)921
+b Fk(r)129 b(u)g(n)327 b(\()197 b(\))916 b Fj(f)868 b
+Fk(f)341 b(.)323 b(r)129 b(u)g(n)278 b(\()325 b(t)396
+b(\))217 b(;)936 b Fj(g)876 b(g)156 b Fk(;)3086 17951
+y Fj(g)0 21181 y Fn(W)-97 b(e)303 b(can)h(then)f(use)g(this)f(function)
+h(to)g(create)h(a)f(function)g(that)g(prints)f(42)i(lik)-12
+b(e)303 b(this:)3149 23769 y Fk(R)119 b(u)g(n)g(n)g(a)g(b)g(l)g(e)967
+b(p)181 b(r)g(i)g(n)g(t)g(4)g(2)869 b(=)849 b(c)164 b(u)g(r)g(r)g(y)313
+b(\()273 b(i)125 b(n)g(t)g(T)g(h)g(u)g(n)g(k)450 b(,)879
+b Fl(n)22 b(e)g(w)876 b Fk(I)189 b(n)g(t)g(e)h(g)g(e)g(r)398
+b(\()209 b(4)g(2)h(\))f(\))g(;)3212 25098 y(p)181 b(r)g(i)g(n)g(t)g(4)g
+(2)378 b(.)323 b(r)129 b(u)g(n)367 b(\()237 b(\))f(;)1139
+b Fa(/)237 b(/)1102 b(p)201 b(r)e(i)h(n)h(t)f(s)928 b(\224)64
+b(4)g(2)g(\224)885 b(t)156 b(o)972 b(s)153 b(t)g(a)g(n)g(d)g(a)g(r)g(d)
+984 b(o)165 b(u)g(t)g(p)g(u)g(t)1882 28328 y Fn(Bamboo)304
+b(contains)g(a)f(class,)g Fi(bamboo.util.Curry)p Fn(,)309
+b(that)303 b(has)h(de\002nitions)f(for)g Fi(Thunk1)i
+Fn(through)e Fi(Thunk9)p Fn(,)0 29833 y(and)g(the)g(appropriate)g
+Fi(curry)i Fn(functions)d(for)g(all)i(combinations)f(of)f(them.)376
+b(Y)-133 b(ou)303 b(can,)h(for)e(e)-18 b(xample,)303
+b(call)h Fi(curry)g Fn(with)0 31339 y(a)270 b Fi(Thunk7)i
+Fn(and)f(tw)-12 b(o)270 b(ar)-22 b(guments)270 b(to)g(get)h(a)f
+Fi(Thunk5)p Fn(.)366 b(T)-97 b(o)270 b(use)g(all)h(of)e(these)h(thunks)
+g(and)h(curry)f(functions)f(in)h(your)h(code,)0 32844
+y(include)303 b(this)g(line)g(at)g(the)h(top)f(of)f(your)h(source)g
+(\002le:)3134 35432 y Fl(i)104 b(m)g(p)g(o)g(r)g(t)977
+b(s)209 b(t)f(a)i(t)f(i)g(c)934 b Fk(b)60 b(a)g(m)g(b)g(o)g(o)255
+b(.)429 b(u)237 b(t)e(i)h(l)430 b(.)316 b(C)123 b(u)g(r)g(r)g(y)338
+b(.)213 b Fj(\003)h Fk(;)1882 38663 y Fn(No)-30 b(w)-79
+b(,)299 b(if)f(you)g(remember)-48 b(,)299 b(we)f(were)h(trying)e(to)h
+(impro)-18 b(v)g(e)298 b(the)h Fi(BetterDelayedEcho)j
+Fn(program)c(abo)-18 b(v)g(e.)374 b(Here')-67 b(s)0 40168
+y(a)303 b(ne)-30 b(w)303 b(v)-18 b(ersion)303 b(using)f(thunks)h(and)g
+(curries:)2145 42756 y Fg(1)657 b Fl(i)104 b(m)g(p)g(o)g(r)g(t)977
+b(s)209 b(t)f(a)i(t)f(i)g(c)934 b Fk(b)60 b(a)g(m)g(b)g(o)g(o)255
+b(.)429 b(u)237 b(t)e(i)h(l)430 b(.)316 b(C)123 b(u)g(r)g(r)g(y)338
+b(.)213 b Fj(\003)h Fk(;)2145 44085 y Fg(2)701 b Fl(p)147
+b(u)g(b)g(l)g(i)g(c)999 b(c)185 b(l)f(a)h(s)f(s)961 b
+Fk(D)112 b(e)g(l)g(a)g(y)g(e)g(d)g(E)g(c)g(h)g(o)834
+b Fj(f)2145 45413 y Fg(3)3357 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025
+b(s)208 b(t)h(a)h(t)f(i)g(c)941 b Fk(T)68 b(h)g(u)g(n)g(k)g(1)38
+b Fb(<)62 b Fk(S)160 b(t)g(r)g(i)g(n)g(g)221 b Fb(>)752
+b Fk(p)186 b(r)g(i)g(n)h(t)f(C)h(a)g(l)f(l)g(b)g(a)h(c)g(k)871
+b(=)706 b Fl(n)22 b(e)g(w)754 b Fk(T)68 b(h)g(u)g(n)g(k)g(1)38
+b Fb(<)61 b Fk(S)160 b(t)g(r)g(i)g(n)g(g)418 b Fb(>)99
+b Fk(\()g(\))816 b Fj(f)2145 46741 y Fg(4)6014 b Fl(p)147
+b(u)g(b)g(l)g(i)g(c)940 b(v)125 b(o)g(i)g(d)921 b Fk(r)129
+b(u)g(n)278 b(\()330 b(S)183 b(t)g(r)g(i)g(n)g(g)1067
+b(s)221 b(t)h(r)368 b(\))867 b Fj(f)2145 48070 y Fg(5)8627
+b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)338 b(o)144 b(u)g(t)340
+b(.)406 b(p)212 b(r)g(i)g(n)g(t)g(l)g(n)361 b(\()368
+b(s)221 b(t)h(r)438 b(\))217 b(;)2145 49398 y Fg(6)8627
+b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)393 b(e)200 b(x)g(i)f(t)410
+b(\()211 b(0)i(\))e(;)2145 50726 y Fg(7)5922 b Fj(g)2145
+52055 y Fg(8)3366 b Fj(g)156 b Fk(;)2145 53383 y Fg(9)3357
+b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025 b(s)208 b(t)h(a)h(t)f(i)g(c)999
+b(v)125 b(o)g(i)g(d)880 b Fk(m)89 b(a)g(i)g(n)236 b(\()330
+b(S)183 b(t)g(r)g(i)g(n)g(g)1043 b([)196 b(])1024 b(a)163
+b(r)g(g)g(s)309 b(\))915 b Fl(t)104 b(h)g(r)g(o)g(w)g(s)930
+b Fk(j)163 b(a)g(v)g(a)356 b(.)349 b(i)156 b(o)350 b(.)331
+b(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g(i)g(o)g(n)864 b
+Fj(f)1813 54711 y Fg(10)6084 b Fl(i)217 b(f)1029 b Fk(\()310
+b(a)163 b(r)g(g)g(s)355 b(.)367 b(l)174 b(e)g(n)g(g)g(t)g(h)709
+b Fb(<)733 b Fk(1)135 b(\))856 b Fj(f)1813 56040 y Fg(11)8627
+b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)385 b(e)191 b(r)g(r)384
+b(.)406 b(p)212 b(r)g(i)g(n)g(t)g(l)g(n)361 b(\()233
+b(\224)221 b(u)133 b(s)g(a)g(g)g(e)314 b(:)p 28424 56040
+45 150 v 28469 56040 333 45 v 28801 56040 45 150 v 1005
+w(j)163 b(a)g(v)g(a)p 31745 56040 V 31789 56040 333 45
+v 32122 56040 45 150 v 938 w(D)112 b(e)g(l)g(a)g(y)g(e)g(d)g(E)g(c)g(h)
+g(o)p 39715 56040 V 39760 56040 333 45 v 40092 56040
+45 150 v 648 w Fb(<)118 b Fk(s)183 b(t)g(r)g(i)g(n)g(g)266
+b Fb(>)-12 b Fk(\224)305 b(\))216 b(;)1813 57368 y Fg(12)8627
+b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)393 b(e)200 b(x)g(i)f(t)410
+b(\()211 b(1)i(\))e(;)1813 58697 y Fg(13)5922 b Fj(g)1813
+60025 y Fg(14)5927 b Fk(b)60 b(a)g(m)g(b)g(o)g(o)255
+b(.)399 b(l)206 b(s)f(s)399 b(.)275 b(A)81 b(S)g(y)g(n)g(c)g(C)g(o)g(r)
+g(e)905 b(a)154 b(c)g(o)g(r)g(e)840 b(=)706 b Fl(n)22
+b(e)g(w)746 b Fk(b)60 b(a)g(m)g(b)g(o)g(o)255 b(.)399
+b(l)206 b(s)f(s)399 b(.)292 b(A)98 b(S)g(y)g(n)g(c)g(C)g(o)g(r)g(e)g(I)
+g(m)g(p)g(l)344 b(\()237 b(\))f(;)1813 61353 y Fg(15)6021
+b Fk(a)154 b(c)g(o)g(r)g(e)349 b(.)380 b(r)186 b(e)h(g)g(i)f(s)g(t)g(e)
+h(r)f(T)h(i)f(m)g(e)h(r)327 b(\()141 b(5)g(0)g(0)g(0)282
+b(,)969 b(c)164 b(u)g(r)g(r)g(y)313 b(\()321 b(p)174
+b(r)g(i)g(n)g(t)g(C)g(a)g(l)g(l)g(b)g(a)g(c)g(k)543 b(,)1020
+b(a)163 b(r)g(g)g(s)397 b([)235 b(0)h(])f(\))h(\))f(;)1813
+62682 y Fg(16)6021 b Fk(a)154 b(c)g(o)g(r)g(e)349 b(.)306
+b(a)112 b(s)g(y)g(n)g(c)g(M)g(a)g(i)g(n)351 b(\()237
+b(\))f(;)1813 64010 y Fg(17)3265 b Fj(g)1813 65338 y
+Fg(18)609 b Fj(g)1882 68568 y Fn(Lines)261 b(3-8)g(of)h(this)f(program)
+g(create)h(a)g(ne)-30 b(w)261 b(callback,)271 b(this)261
+b(time)h(one)g(that)g(tak)-12 b(es)261 b(a)h(string)f(ar)-22
+b(gument)262 b(and)g(prints)e(it)i(to)0 70074 y(standard)318
+b(output.)423 b(Unfortunately)-79 b(,)323 b(the)318 b
+Fi(registerTimer)323 b Fn(function)318 b(only)h(tak)-12
+b(es)318 b(ar)-22 b(guments)319 b(of)f(type)h Fi(Runnable)p
+Fn(,)0 71579 y(so)433 b(we)h(can')-22 b(t)434 b(pass)f(it)h(our)f(ne)
+-30 b(w)434 b(v)-18 b(ersion)433 b(of)g Fi(printCallback)438
+b Fn(directly)-79 b(.)767 b(W)-97 b(e)435 b(can,)466
+b(ho)-30 b(we)g(v)-18 b(er)-48 b(,)466 b(call)434 b Fi(curry)h
+Fn(with)0 73085 y Fi(printCallback)366 b Fn(and)d(the)f(string)g(we)g
+(w)-12 b(ant)363 b(passed)f(to)g(it)h(as)f(ar)-22 b(guments)362
+b(to)g(get)h(an)f(object)h(of)f(type)h Fi(Runnable)p
+Fn(,)0 74590 y(and)437 b(we)g(can)h(then)f(pass)f(that)h(to)g
+Fi(registerTimer)p Fn(.)780 b(In)437 b(other)g(w)-12
+b(ords,)469 b(line)437 b(15)g(says,)470 b(\223after)436
+b(\002)-30 b(v)-18 b(e)437 b(seconds,)470 b(call)0 76096
+y Fi(printCallback)307 b Fn(with)c(the)g(v)-30 b(alue)303
+b(in)g Fi(args[0])p Fn(.)-85 b(\224)378 b(Pretty)303
+b(cool,)g(huh?)25697 79417 y(6)p eop end
+%%Page: 7 7
+TeXDict begin 7 6 bop 0 5313 a Fd(3.4)1329 b(Using)332
+b(Channels)0 7637 y Fn(T)-42 b(imers)313 b(are)h(only)h(one)f(of)h(the)
+f(tw)-12 b(o)315 b(main)f(classes)g(of)g(callbacks)g(that)h
+Fi(ASyncCore)i Fn(manages.)410 b(The)314 b(other)g(class)g(is)g(for)0
+9143 y(sock)-12 b(ets,)302 b(Unix')-67 b(s)302 b(stream-based)g
+(abstraction)g(of)g(the)h(netw)-12 b(ork.)375 b(In)302
+b(Ja)-24 b(v)-30 b(a)302 b(1.4)h(and)f(later)-48 b(,)303
+b(sock)-12 b(ets)301 b(are)i(accessed)f(through)0 10648
+y(objects)337 b(called)i Fh(c)-18 b(hannels)p Fn(.)479
+b(There)337 b(are)h Fi(SocketChannels)j Fn(for)c(TCP)h(clients,)346
+b Fi(ServerSocketChannels)d Fn(for)0 12153 y(TCP)303
+b(serv)-18 b(ers,)302 b(and)h Fi(DatagramChannels)k Fn(for)c(UDP)g
+(sock)-12 b(ets.)1882 13659 y(The)419 b(class)f Fi
+(java.nio.channels.SelectionKey)428 b Fn(de\002nes)419
+b(the)h(conditions)f(you)g(can)h(w)-12 b(ait)419 b(on)g(with)h(a)0
+15164 y(channel:)445 b Fi(OP)p 6078 15164 364 45 v 437
+w(ACCEPT)p Fn(,)339 b Fi(OP)p 12973 15164 V 437 w(CONNECT)p
+Fn(,)g Fi(OP)p 20595 15164 V 437 w(READ)p Fn(,)g(and)f
+Fi(OP)p 28124 15164 V 436 w(WRITE)p Fn(.)h(T)-97 b(o)337
+b(w)-12 b(ait)338 b(on)f(an)-18 b(y)338 b(one)g(of)f(these)g
+(conditions,)0 16670 y(call)231 b Fi(registerSelectable)k
+Fn(in)230 b Fi(ASyncCore)p Fn(;)257 b(to)230 b(stop)g(w)-12
+b(aiting)231 b(on)f(them,)245 b(call)231 b Fi(unregisterSelectable)p
+Fn(.)0 18175 y(Here')-67 b(s)303 b(an)g(e)-18 b(xample:)2145
+20998 y Fg(1)657 b Fl(i)104 b(m)g(p)g(o)g(r)g(t)827 b
+Fk(b)60 b(a)g(m)g(b)g(o)g(o)255 b(.)400 b(l)205 b(s)h(s)419
+b(.)213 b Fj(\003)i Fk(;)2145 22326 y Fg(2)657 b Fl(i)104
+b(m)g(p)g(o)g(r)g(t)930 b Fk(j)163 b(a)g(v)g(a)356 b(.)349
+b(i)156 b(o)350 b(.)331 b(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g(i)g(o)g
+(n)322 b(;)2145 23655 y Fg(3)657 b Fl(i)104 b(m)g(p)g(o)g(r)g(t)930
+b Fk(j)163 b(a)g(v)g(a)356 b(.)d(n)160 b(e)g(t)375 b(.)213
+b Fj(\003)h Fk(;)2145 24983 y Fg(4)657 b Fl(i)104 b(m)g(p)g(o)g(r)g(t)
+930 b Fk(j)163 b(a)g(v)g(a)356 b(.)338 b(n)144 b(i)g(o)340
+b(.)k(B)151 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)331 b(;)2145
+26311 y Fg(5)657 b Fl(i)104 b(m)g(p)g(o)g(r)g(t)930 b
+Fk(j)163 b(a)g(v)g(a)356 b(.)338 b(n)144 b(i)g(o)340
+b(.)353 b(c)160 b(h)g(a)g(n)g(n)g(e)g(l)g(s)376 b(.)214
+b Fj(\003)g Fk(;)2145 27640 y Fg(6)657 b Fl(i)104 b(m)g(p)g(o)g(r)g(t)
+977 b(s)209 b(t)f(a)i(t)f(i)g(c)934 b Fk(b)60 b(a)g(m)g(b)g(o)g(o)255
+b(.)429 b(u)237 b(t)e(i)h(l)430 b(.)316 b(C)123 b(u)g(r)g(r)g(y)338
+b(.)213 b Fj(\003)h Fk(;)2145 28968 y Fg(7)657 b Fl(i)104
+b(m)g(p)g(o)g(r)g(t)977 b(s)209 b(t)f(a)i(t)f(i)g(c)1036
+b Fk(j)163 b(a)g(v)g(a)356 b(.)338 b(n)144 b(i)g(o)340
+b(.)354 b(c)160 b(h)g(a)g(n)g(n)g(e)g(l)g(s)356 b(.)347
+b(S)154 b(e)g(l)g(e)g(c)g(t)g(i)g(o)g(n)g(K)g(e)g(y)375
+b(.)213 b Fj(\003)i Fk(;)2145 30297 y Fg(8)2145 31625
+y(9)701 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)999 b(c)185 b(l)f(a)h(s)f(s)984
+b Fk(H)135 b(t)g(t)g(p)g(G)g(e)g(t)857 b Fj(f)1813 32953
+y Fg(10)1813 34282 y(11)3357 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025
+b(s)208 b(t)h(a)h(t)f(i)g(c)955 b Fk(A)81 b(S)g(y)g(n)g(c)g(C)g(o)g(r)g
+(e)904 b(a)154 b(c)g(o)g(r)g(e)335 b(;)1813 35610 y Fg(12)1813
+36938 y(13)3357 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025 b(s)208
+b(t)h(a)h(t)f(i)g(c)941 b Fk(T)68 b(h)g(u)g(n)g(k)g(1)38
+b Fb(<)31 b Fk(S)129 b(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g(l)
+161 b Fb(>)735 b Fk(a)169 b(c)g(c)g(e)g(p)g(t)g(C)g(a)g(l)g(l)g(b)g(a)g
+(c)g(k)858 b(=)1813 38267 y Fg(14)8545 b Fl(n)22 b(e)g(w)754
+b Fk(T)68 b(h)g(u)g(n)g(k)g(1)38 b Fb(<)30 b Fk(S)129
+b(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g(l)358 b
+Fb(>)99 b Fk(\()g(\))817 b Fj(f)1813 39595 y Fg(15)6014
+b Fl(p)147 b(u)g(b)g(l)g(i)g(c)940 b(v)125 b(o)g(i)g(d)921
+b Fk(r)129 b(u)g(n)278 b(\()286 b(S)138 b(o)g(c)g(k)g(e)g(t)g(C)g(h)g
+(a)g(n)g(n)g(e)g(l)957 b(c)151 b(h)g(a)g(n)g(n)g(e)g(l)300
+b(\))867 b Fj(f)1813 40923 y Fg(16)8668 b Fl(t)145 b(r)g(y)865
+b Fj(f)1813 42252 y Fg(17)11398 b Fl(i)217 b(f)1029 b
+Fk(\()298 b(c)151 b(h)g(a)g(n)g(n)g(e)g(l)346 b(.)367
+b(f)173 b(i)g(n)g(i)g(s)g(h)g(C)g(o)g(n)g(n)g(e)g(c)g(t)397
+b(\()222 b(\))f(\))941 b Fj(f)1813 43580 y Fg(18)13327
+b Fk(a)154 b(c)g(o)g(r)g(e)349 b(.)399 b(u)206 b(n)f(r)g(e)h(g)f(i)g(s)
+g(t)g(e)g(r)g(S)g(e)h(l)f(e)g(c)h(t)f(a)g(b)h(l)f(e)353
+b(\()282 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465 b(,)821
+b(O)-36 b(P)p 40932 43580 333 45 v 327 w(C)g(O)g(N)g(N)g(E)g(C)g(T)182
+b(\))216 b(;)1813 44908 y Fg(19)13298 b Fl(b)126 b(y)g(t)g(e)987
+b Fk([)196 b(])1025 b(b)164 b(y)g(t)g(e)g(s)849 b(=)832
+b(\()234 b(\224)47 b(G)-40 b(E)g(T)p 29753 44908 45 150
+v 29797 44908 333 45 v 30129 44908 45 150 v 804 w(/)p
+31081 44908 V 31125 44908 333 45 v 31457 44908 45 150
+v 820 w(H)-22 b(T)g(T)g(P)158 b(/)179 b(1)g(.)g(0)g Fj(n)330
+b Fk(r)202 b Fj(n)112 b Fk(n)f Fj(n)203 b Fk(r)g Fj(n)111
+b Fk(n)142 b(\224)315 b(\))227 b(.)388 b(g)160 b(e)g(t)g(B)g(y)g(t)g(e)
+g(s)397 b(\()237 b(\))f(;)1813 46237 y Fg(20)13324 b
+Fk(B)151 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)946 b(b)129
+b(u)g(f)814 b(=)836 b(B)151 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)346
+b(.)283 b(w)89 b(r)g(a)g(p)236 b(\()312 b(b)164 b(y)g(t)g(e)g(s)382
+b(\))217 b(;)1813 47565 y Fg(21)13327 b Fk(a)154 b(c)g(o)g(r)g(e)349
+b(.)409 b(r)215 b(e)g(g)h(i)e(s)h(t)g(e)g(r)g(S)h(e)f(l)g(e)g(c)h(t)f
+(a)g(b)h(l)f(e)363 b(\()281 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465
+b(,)858 b(OP)p 39712 47565 333 45 v 397 w(WRITE)192 b(,)1813
+48893 y Fg(22)18650 b Fk(c)164 b(u)g(r)g(r)g(y)314 b(\()309
+b(w)162 b(r)g(i)g(t)g(e)g(C)g(a)g(l)g(l)g(b)g(a)g(c)g(k)514
+b(,)992 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465 b(,)987 b(b)129
+b(u)g(f)367 b(\))237 b(\))f(;)1813 50222 y Fg(23)11236
+b Fj(g)1813 51550 y Fg(24)8579 b Fj(g)1813 52879 y Fg(25)8657
+b Fl(c)133 b(a)g(t)g(c)g(h)948 b Fk(\()285 b(I)137 b(O)g(E)g(x)g(c)g(e)
+g(p)g(t)g(i)g(o)g(n)895 b(e)235 b(\))867 b Fj(f)1813
+54207 y Fg(26)11284 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296
+b(.)384 b(e)192 b(r)e(r)385 b(.)405 b(p)213 b(r)f(i)g(n)g(t)g(l)g(n)360
+b(\()234 b(\224)189 b(C)102 b(o)g(u)g(l)g(d)p 30417 54207
+45 150 v 30461 54207 333 45 v 30793 54207 45 150 v 914
+w(n)144 b(o)g(t)p 33074 54207 V 33118 54207 333 45 v
+33450 54207 45 150 v 962 w(c)151 b(o)g(n)g(n)g(e)g(c)g(t)330
+b(:)p 39051 54207 V 39095 54207 333 45 v 39428 54207
+45 150 v 929 w(\224)771 b(+)f(e)305 b(\))217 b(;)1813
+55535 y Fg(27)11284 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296
+b(.)393 b(e)200 b(x)f(i)g(t)411 b(\()211 b(1)h(\))g(;)1813
+56864 y Fg(28)8579 b Fj(g)1813 58192 y Fg(29)5922 b Fj(g)1813
+59520 y Fg(30)3366 b Fj(g)156 b Fk(;)1813 60849 y Fg(31)1813
+62177 y(32)3357 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025 b(s)208
+b(t)h(a)h(t)f(i)g(c)941 b Fk(T)68 b(h)g(u)g(n)g(k)g(2)38
+b Fb(<)31 b Fk(S)129 b(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g(l)
+453 b(,)332 b(B)138 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)184
+b Fb(>)739 b Fk(w)173 b(r)g(i)g(t)g(e)g(C)g(a)g(l)g(l)g(b)g(a)g(c)g(k)
+861 b(=)1813 63505 y Fg(33)8545 b Fl(n)22 b(e)g(w)754
+b Fk(T)68 b(h)g(u)g(n)g(k)g(2)38 b Fb(<)30 b Fk(S)129
+b(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g(l)454 b(,)332
+b(B)138 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)380 b Fb(>)99
+b Fk(\()g(\))817 b Fj(f)1813 64834 y Fg(34)6014 b Fl(p)147
+b(u)g(b)g(l)g(i)g(c)940 b(v)125 b(o)g(i)g(d)921 b Fk(r)129
+b(u)g(n)278 b(\()286 b(S)138 b(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g
+(e)g(l)940 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465 b(,)1009
+b(B)151 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)946 b(b)129
+b(u)g(f)278 b(\))867 b Fj(f)1813 66162 y Fg(35)8668 b
+Fl(t)145 b(r)g(y)865 b Fj(f)1813 67490 y Fg(36)11313
+b Fl(w)133 b(h)g(i)g(l)g(e)947 b Fk(\()277 b(b)129 b(u)g(f)324
+b(.)387 b(p)195 b(o)f(s)g(i)f(t)h(i)g(o)g(n)392 b(\()196
+b(\))730 b Fb(<)e Fk(b)129 b(u)g(f)324 b(.)398 b(l)205
+b(i)f(m)h(i)g(t)426 b(\()221 b(\))h(\))940 b Fj(f)1813
+68819 y Fg(37)14054 b Fl(i)217 b(f)1029 b Fk(\()299 b(c)151
+b(h)g(a)g(n)g(n)g(e)g(l)346 b(.)368 b(w)174 b(r)g(i)g(t)g(e)323
+b(\()276 b(b)129 b(u)g(f)279 b(\))838 b(=)27 b(=)826
+b(0)135 b(\))1813 70147 y Fg(38)16586 b Fl(b)92 b(r)g(e)g(a)g(k)274
+b Fk(;)1813 71475 y Fg(39)11236 b Fj(g)1813 72804 y Fg(40)11398
+b Fl(i)217 b(f)1029 b Fk(\()276 b(b)129 b(u)g(f)324 b(.)388
+b(p)194 b(o)h(s)e(i)h(t)g(i)f(o)i(n)391 b(\()197 b(\))887
+b(=)27 b(=)820 b(b)129 b(u)g(f)325 b(.)398 b(l)204 b(i)h(m)g(i)f(t)427
+b(\()221 b(\))g(\))941 b Fj(f)1813 74132 y Fg(41)13991
+b Fk(a)154 b(c)g(o)g(r)g(e)350 b(.)398 b(u)206 b(n)f(r)g(e)h(g)f(i)g(s)
+g(t)g(e)g(r)g(S)h(e)f(l)g(e)h(c)f(t)g(a)h(b)f(l)g(e)354
+b(\()281 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465 b(,)857
+b(OP)p 41704 74132 333 45 v 398 w(WRITE)215 b(\))i(;)1813
+75460 y Fg(42)13991 b Fk(a)154 b(c)g(o)g(r)g(e)350 b(.)408
+b(r)215 b(e)g(g)h(i)f(s)f(t)h(e)h(r)e(S)i(e)f(l)g(e)h(c)f(t)g(a)g(b)h
+(l)f(e)363 b(\()282 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465
+b(,)838 b(O)-20 b(P)p 40318 75460 V 360 w(R)g(E)g(A)g(D)156
+b(,)25697 79417 y Fn(7)p eop end
+%%Page: 8 8
+TeXDict begin 8 7 bop 1813 5313 a Fg(43)19315 b Fk(c)164
+b(u)g(r)g(r)g(y)313 b(\()300 b(r)152 b(e)g(a)g(d)g(C)g(a)g(l)g(l)g(b)g
+(a)g(c)g(k)502 b(,)1009 b(c)151 b(h)g(a)g(n)g(n)g(e)g(l)389
+b(\))237 b(\))f(;)1813 6642 y Fg(44)11236 b Fj(g)1813
+7970 y Fg(45)8579 b Fj(g)1813 9298 y Fg(46)8657 b Fl(c)133
+b(a)g(t)g(c)g(h)948 b Fk(\()285 b(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g
+(i)g(o)g(n)895 b(e)235 b(\))867 b Fj(f)1813 10627 y Fg(47)11284
+b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)384 b(e)192 b(r)e(r)385
+b(.)405 b(p)213 b(r)f(i)g(n)g(t)g(l)g(n)360 b(\()234
+b(\224)189 b(C)102 b(o)g(u)g(l)g(d)p 30417 10627 45 150
+v 30461 10627 333 45 v 30793 10627 45 150 v 914 w(n)144
+b(o)g(t)p 33074 10627 V 33118 10627 333 45 v 33450 10627
+45 150 v 985 w(w)174 b(r)g(i)g(t)g(e)354 b(:)p 37723
+10627 V 37767 10627 333 45 v 38099 10627 45 150 v 928
+w(\224)771 b(+)g(e)304 b(\))217 b(;)1813 11955 y Fg(48)11284
+b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)393 b(e)200 b(x)f(i)g(t)411
+b(\()211 b(1)h(\))g(;)1813 13284 y Fg(49)8579 b Fj(g)1813
+14612 y Fg(50)5922 b Fj(g)1813 15940 y Fg(51)3366 b Fj(g)156
+b Fk(;)1813 17269 y Fg(52)1813 18597 y(53)3357 b Fl(p)147
+b(u)g(b)g(l)g(i)g(c)1025 b(s)208 b(t)h(a)h(t)f(i)g(c)941
+b Fk(T)68 b(h)g(u)g(n)g(k)g(1)38 b Fb(<)31 b Fk(S)129
+b(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g(l)161 b
+Fb(>)729 b Fk(r)164 b(e)g(a)g(d)g(C)g(a)g(l)g(l)g(b)g(a)g(c)g(k)850
+b(=)1813 19925 y Fg(54)8545 b Fl(n)22 b(e)g(w)754 b Fk(T)68
+b(h)g(u)g(n)g(k)g(1)38 b Fb(<)30 b Fk(S)129 b(o)g(c)g(k)g(e)g(t)g(C)g
+(h)g(a)g(n)g(n)g(e)g(l)358 b Fb(>)99 b Fk(\()g(\))817
+b Fj(f)1813 21254 y Fg(55)6014 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)940
+b(v)125 b(o)g(i)g(d)921 b Fk(r)129 b(u)g(n)278 b(\()286
+b(S)138 b(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g(l)957
+b(c)151 b(h)g(a)g(n)g(n)g(e)g(l)300 b(\))867 b Fj(f)1813
+22582 y Fg(56)8657 b Fl(w)133 b(h)g(i)g(l)g(e)946 b Fk(\()286
+b Fl(t)138 b(r)g(u)g(e)286 b Fk(\))867 b Fj(f)1813 23910
+y Fg(57)11325 b Fl(t)145 b(r)g(y)864 b Fj(f)1813 25239
+y Fg(58)13988 b Fk(B)151 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)946
+b(b)129 b(u)g(f)815 b(=)835 b(B)151 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g
+(r)347 b(.)282 b(w)89 b(r)g(a)g(p)237 b(\()169 b Fl(n)22
+b(e)g(w)811 b(b)126 b(y)g(t)g(e)977 b Fk([)187 b(1)h(0)g(2)f(4)h(])f
+(\))g(;)1813 26567 y Fg(59)14012 b Fl(i)175 b(n)g(t)895
+b Fk(n)740 b(=)835 b(c)151 b(h)g(a)g(n)g(n)g(e)g(l)346
+b(.)e(r)150 b(e)g(a)g(d)300 b(\()277 b(b)129 b(u)g(f)348
+b(\))217 b(;)1813 27895 y Fg(60)14054 b Fl(i)217 b(f)1029
+b Fk(\()203 b(n)589 b Fb(>)734 b Fk(0)135 b(\))1813 29224
+y Fg(61)16597 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)297 b(.)337
+b(o)144 b(u)g(t)340 b(.)399 b(p)205 b(r)g(i)f(n)i(t)352
+b(\()169 b Fl(n)22 b(e)g(w)869 b Fk(S)183 b(t)g(r)g(i)g(n)g(g)329
+b(\()277 b(b)129 b(u)g(f)324 b(.)368 b(a)175 b(r)g(r)g(a)g(y)369
+b(\()196 b(\))391 b(,)984 b(0)249 b(,)844 b(n)293 b(\))236
+b(\))h(;)1813 30552 y Fg(62)14024 b Fl(e)188 b(l)e(s)h(e)1069
+b(i)217 b(f)1029 b Fk(\()203 b(n)747 b(=)27 b(=)826 b(0)135
+b(\))1813 31880 y Fg(63)16586 b Fl(b)92 b(r)g(e)g(a)g(k)274
+b Fk(;)1813 33209 y Fg(64)14024 b Fl(e)188 b(l)e(s)h(e)907
+b Fj(f)1813 34537 y Fg(65)16645 b Fk(c)151 b(h)g(a)g(n)g(n)g(e)g(l)346
+b(.)368 b(c)174 b(l)g(o)g(s)g(e)413 b(\()236 b(\))h(;)1813
+35866 y Fg(66)16597 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)297
+b(.)392 b(e)200 b(x)g(i)f(t)410 b(\()212 b(0)g(\))f(;)1813
+37194 y Fg(67)13892 b Fj(g)1813 38522 y Fg(68)11236 b
+Fj(g)1813 39851 y Fg(69)11314 b Fl(c)133 b(a)g(t)g(c)g(h)948
+b Fk(\()285 b(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g(i)g(o)g(n)895
+b(e)235 b(\))867 b Fj(f)1813 41179 y Fg(70)13941 b Fk(S)104
+b(y)g(s)g(t)g(e)g(m)296 b(.)384 b(e)192 b(r)e(r)385 b(.)405
+b(p)213 b(r)e(i)h(n)h(t)f(l)g(n)360 b(\()234 b(\224)189
+b(C)102 b(o)g(u)g(l)g(d)p 33074 41179 V 33118 41179 333
+45 v 33450 41179 45 150 v 914 w(n)144 b(o)g(t)p 35730
+41179 V 35775 41179 333 45 v 36107 41179 45 150 v 961
+w(r)150 b(e)g(a)g(d)330 b(:)p 39715 41179 V 39760 41179
+333 45 v 40092 41179 45 150 v 929 w(\224)771 b(+)g(e)304
+b(\))217 b(;)1813 42507 y Fg(71)13941 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)
+296 b(.)393 b(e)199 b(x)h(i)f(t)411 b(\()211 b(1)h(\))f(;)1813
+43836 y Fg(72)11236 b Fj(g)1813 45164 y Fg(73)8579 b
+Fj(g)1813 46492 y Fg(74)5922 b Fj(g)1813 47821 y Fg(75)3366
+b Fj(g)156 b Fk(;)1813 49149 y Fg(76)1813 50477 y(77)3357
+b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025 b(s)208 b(t)h(a)h(t)f(i)g(c)999
+b(v)125 b(o)g(i)g(d)880 b Fk(m)89 b(a)g(i)g(n)236 b(\()330
+b(S)183 b(t)g(r)g(i)g(n)g(g)1043 b([)196 b(])1024 b(a)163
+b(r)g(g)g(s)309 b(\))915 b Fl(t)104 b(h)g(r)g(o)g(w)g(s)905
+b Fk(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g(i)g(o)g(n)864
+b Fj(f)1813 51806 y Fg(78)6084 b Fl(i)217 b(f)1029 b
+Fk(\()310 b(a)163 b(r)g(g)g(s)355 b(.)367 b(l)174 b(e)g(n)g(g)g(t)g(h)
+709 b Fb(<)733 b Fk(1)135 b(\))856 b Fj(f)1813 53134
+y Fg(79)8627 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)385
+b(e)191 b(r)g(r)384 b(.)406 b(p)212 b(r)g(i)g(n)g(t)g(l)g(n)361
+b(\()233 b(\224)221 b(u)133 b(s)g(a)g(g)g(e)314 b(:)p
+28424 53134 V 28469 53134 333 45 v 28801 53134 45 150
+v 1005 w(j)163 b(a)g(v)g(a)p 31745 53134 V 31789 53134
+333 45 v 32122 53134 45 150 v 962 w(H)135 b(t)g(t)g(p)g(G)g(e)g(t)p
+37059 53134 V 37103 53134 333 45 v 37435 53134 45 150
+v 671 w Fb(<)69 b Fk(h)135 b(o)g(s)g(t)173 b Fb(>)p 41708
+53134 V 41752 53134 333 45 v 42084 53134 45 150 v 435
+w(<)80 b Fk(p)146 b(o)g(r)g(t)192 b Fb(>)-12 b Fk(\224)304
+b(\))217 b(;)1813 54462 y Fg(80)8627 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296
+b(.)393 b(e)200 b(x)g(i)f(t)410 b(\()211 b(1)i(\))e(;)1813
+55791 y Fg(81)5922 b Fj(g)1813 57119 y Fg(82)6021 b Fk(a)154
+b(c)g(o)g(r)g(e)840 b(=)706 b Fl(n)22 b(e)g(w)784 b Fk(A)98
+b(S)g(y)g(n)g(c)g(C)g(o)g(r)g(e)g(I)g(m)g(p)g(l)344 b(\()237
+b(\))f(;)1813 58447 y Fg(83)6005 b Fk(S)138 b(o)g(c)g(k)g(e)g(t)g(C)g
+(h)g(a)g(n)g(n)g(e)g(l)957 b(c)151 b(h)g(a)g(n)g(n)g(e)g(l)837
+b(=)822 b(S)138 b(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g(l)336
+b(.)295 b(o)101 b(p)g(e)g(n)339 b(\()237 b(\))f(;)1813
+59776 y Fg(84)6018 b Fk(c)151 b(h)g(a)g(n)g(n)g(e)g(l)346
+b(.)359 b(c)166 b(o)g(n)g(f)g(i)g(g)g(u)g(r)g(e)g(B)g(l)g(o)g(c)g(k)g
+(i)g(n)g(g)320 b(\()342 b Fl(f)195 b(a)g(l)g(s)f(e)413
+b Fk(\))217 b(;)1813 61104 y Fg(85)6018 b Fk(c)151 b(h)g(a)g(n)g(n)g(e)
+g(l)346 b(.)e(c)151 b(o)g(n)g(n)g(e)g(c)g(t)300 b(\()169
+b Fl(n)22 b(e)g(w)849 b Fk(I)163 b(n)g(e)g(t)g(S)g(o)g(c)g(k)g(e)g(t)g
+(A)g(d)g(d)g(r)g(e)g(s)g(s)309 b(\()1813 62433 y Fg(86)13999
+b Fk(a)163 b(r)g(g)g(s)343 b([)182 b(0)g(])362 b(,)1035
+b(I)189 b(n)h(t)f(e)g(g)h(e)g(r)383 b(.)k(p)195 b(a)g(r)f(s)f(e)i(I)f
+(n)h(t)341 b(\()310 b(a)163 b(r)g(g)g(s)405 b([)242 b(1)i(])f(\))f(\))h
+(\))g(;)1813 63761 y Fg(87)6021 b Fk(a)154 b(c)g(o)g(r)g(e)349
+b(.)409 b(r)215 b(e)g(g)h(i)e(s)h(t)g(e)g(r)g(S)h(e)f(l)g(e)g(c)h(t)f
+(a)g(b)h(l)f(e)363 b(\()281 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465
+b(,)825 b(O)-33 b(P)p 32307 63761 333 45 v 332 w(C)g(O)g(N)g(N)g(E)g(C)
+g(T)129 b(,)1813 65089 y Fg(88)22636 b Fk(c)164 b(u)g(r)g(r)g(y)313
+b(\()306 b(a)159 b(c)g(c)g(e)g(p)g(t)g(C)g(a)g(l)g(l)g(b)g(a)g(c)g(k)
+509 b(,)1008 b(c)151 b(h)g(a)g(n)g(n)g(e)g(l)390 b(\))236
+b(\))h(;)1813 66418 y Fg(89)6021 b Fk(a)154 b(c)g(o)g(r)g(e)349
+b(.)306 b(a)112 b(s)g(y)g(n)g(c)g(M)g(a)g(i)g(n)351 b(\()237
+b(\))f(;)1813 67746 y Fg(90)3265 b Fj(g)1813 69074 y
+Fg(91)609 b Fj(g)1882 72572 y Fn(This)407 b(program)g(tak)-12
+b(es)408 b(the)g(name)g(and)g(port)g(number)f(of)h(an)g(HTTP)f(serv)-18
+b(er)407 b(on)h(the)g(command)g(line,)434 b(connects)408
+b(to)0 74078 y(it)477 b(using)g(TCP)-135 b(,)478 b(and)f(sends)g(the)g
+(string)g(\223GET)f(/)h(HTTP/1.0\224)g(follo)-30 b(wed)477
+b(by)g(tw)-12 b(o)478 b(carriage-return,)520 b(line-feed)477
+b(pairs.)0 75583 y(This)458 b(string)g(will)g(cause)h(an)-18
+b(y)459 b(compliant)g(HTTP)f(serv)-18 b(er)457 b(to)i(return)f(the)h
+(resource)f(named)h(by)g(\223/\224,)498 b(usually)458
+b(the)h(\002le)25697 79417 y(8)p eop end
+%%Page: 9 9
+TeXDict begin 9 8 bop 0 5313 a Fi(index.html)p Fn(.)1882
+6819 y(Important)230 b(things)g(to)g(note)g(include:)340
+b(on)231 b(line)f(84)h(we)f(call)h Fi(configureBlocking\(false\))237
+b Fn(on)230 b(the)g Fi(SocketChannel)0 8324 y Fn(object.)848
+b(If)459 b(this)h(is)f(not)i(done,)500 b(calls)460 b(to)g(read)g(or)g
+(write)g(the)g(sock)-12 b(et)460 b(may)h(block.)848 b(Control)460
+b(will)g(ne)-18 b(xt)460 b(mo)-18 b(v)g(e)461 b(to)f(the)0
+9830 y Fi(acceptCallback)319 b Fn(function)d(once)g(the)f(TCP)h
+(connection)g(is)f(established.)413 b(After)315 b(connecting)h(on)g
+(line)g(17,)i(we)e(un-)0 11335 y(re)-18 b(gister)302
+b(the)i(accept)h(callback)f(on)g(line)f(18.)378 b(W)-97
+b(e)304 b(then)g(create)f(a)h Fi(ByteBuffer)j Fn(object)c(to)h(hold)g
+(the)g(string)e(we)i(w)-12 b(ant)304 b(to)0 12841 y(write,)f(and)g(re)
+-18 b(gister)302 b(the)h(the)h(write)f(callback)g(function.)1882
+14346 y(The)448 b(function)g Fi(SocketChannel.write)453
+b Fn(returns)447 b(zero)h(if)f(no)h(data)h(can)f(be)g(written)g(at)g
+(the)g(moment,)485 b(and)0 15852 y(thro)-30 b(ws)459
+b(an)i Fi(IOException)i Fn(if)d(the)g(sock)-12 b(et)460
+b(is)g(closed.)847 b(Once)460 b(we)h(ha)-24 b(v)-18 b(e)460
+b(written)g(all)h(the)f(data)g(in)h(the)f(b)-24 b(uf)-30
+b(fer)-48 b(,)498 b(we)0 17357 y(unre)-18 b(gister)302
+b(the)h(write)g(callback)h(and)f(re)-18 b(gister)302
+b(the)h(read)g(callback)h(\(lines)f(40\22644\).)1882
+18863 y(Unlik)-12 b(e)375 b Fi(write)p Fn(,)394 b Fi
+(SocketChannel.read)380 b Fn(has)374 b(tw)-12 b(o)375
+b(completion)g(cases.)590 b(Lik)-12 b(e)375 b Fi(write)p
+Fn(,)394 b(if)374 b(the)h(connection)0 20368 y(times)366
+b(out)g(or)g(some)g(other)g(error)f(occurs,)382 b Fi(read)367
+b Fn(will)f(thro)-30 b(w)366 b(an)g Fi(IOException)p
+Fn(.)568 b(Unlik)-12 b(e)367 b Fi(write)p Fn(,)383 b(if)366
+b(the)g(remote)0 21874 y(node)341 b(closes)f(the)g(connection)i
+(normally)-79 b(,)350 b Fi(read)341 b Fn(will)g(return)f(-1.)488
+b(W)-97 b(e)341 b(read)f(until)h(either)f(of)h(these)f(conditions)g
+(occurs,)0 23379 y(echoing)304 b(all)f(bytes)f(read)i(to)f(standard)f
+(output.)2145 25618 y Fg(1)657 b Fl(i)104 b(m)g(p)g(o)g(r)g(t)827
+b Fk(b)60 b(a)g(m)g(b)g(o)g(o)255 b(.)400 b(l)205 b(s)h(s)419
+b(.)213 b Fj(\003)i Fk(;)2145 26947 y Fg(2)657 b Fl(i)104
+b(m)g(p)g(o)g(r)g(t)930 b Fk(j)163 b(a)g(v)g(a)356 b(.)349
+b(i)156 b(o)350 b(.)331 b(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g(i)g(o)g
+(n)322 b(;)2145 28275 y Fg(3)657 b Fl(i)104 b(m)g(p)g(o)g(r)g(t)930
+b Fk(j)163 b(a)g(v)g(a)356 b(.)d(n)160 b(e)g(t)375 b(.)213
+b Fj(\003)h Fk(;)2145 29603 y Fg(4)657 b Fl(i)104 b(m)g(p)g(o)g(r)g(t)
+930 b Fk(j)163 b(a)g(v)g(a)356 b(.)338 b(n)144 b(i)g(o)340
+b(.)k(B)151 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)331 b(;)2145
+30932 y Fg(5)657 b Fl(i)104 b(m)g(p)g(o)g(r)g(t)930 b
+Fk(j)163 b(a)g(v)g(a)356 b(.)338 b(n)144 b(i)g(o)340
+b(.)353 b(c)160 b(h)g(a)g(n)g(n)g(e)g(l)g(s)376 b(.)214
+b Fj(\003)g Fk(;)2145 32260 y Fg(6)657 b Fl(i)104 b(m)g(p)g(o)g(r)g(t)
+930 b Fk(j)163 b(a)g(v)g(a)356 b(.)430 b(u)236 b(t)g(i)f(l)430
+b(.)356 b(L)162 b(i)g(n)g(k)g(e)g(d)g(L)g(i)g(s)g(t)342
+b(;)2145 33588 y Fg(7)657 b Fl(i)104 b(m)g(p)g(o)g(r)g(t)977
+b(s)209 b(t)f(a)i(t)f(i)g(c)934 b Fk(b)60 b(a)g(m)g(b)g(o)g(o)255
+b(.)429 b(u)237 b(t)e(i)h(l)430 b(.)316 b(C)123 b(u)g(r)g(r)g(y)338
+b(.)213 b Fj(\003)h Fk(;)2145 34917 y Fg(8)657 b Fl(i)104
+b(m)g(p)g(o)g(r)g(t)977 b(s)209 b(t)f(a)i(t)f(i)g(c)1036
+b Fk(j)163 b(a)g(v)g(a)356 b(.)338 b(n)144 b(i)g(o)340
+b(.)354 b(c)160 b(h)g(a)g(n)g(n)g(e)g(l)g(s)356 b(.)347
+b(S)154 b(e)g(l)g(e)g(c)g(t)g(i)g(o)g(n)g(K)g(e)g(y)375
+b(.)213 b Fj(\003)i Fk(;)2145 36245 y Fg(9)1813 37574
+y(10)701 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)999 b(c)185 b(l)f(a)h(s)f(s)983
+b Fk(E)134 b(c)g(h)g(o)g(S)g(e)g(r)g(v)g(e)g(r)860 b
+Fj(f)1813 38902 y Fg(11)1813 40230 y(12)3357 b Fl(p)147
+b(u)g(b)g(l)g(i)g(c)1025 b(s)208 b(t)h(a)h(t)f(i)g(c)955
+b Fk(A)81 b(S)g(y)g(n)g(c)g(C)g(o)g(r)g(e)904 b(a)154
+b(c)g(o)g(r)g(e)335 b(;)1813 41559 y Fg(13)1813 42887
+y(14)3357 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025 b(s)208
+b(t)h(a)h(t)f(i)g(c)941 b Fk(T)68 b(h)g(u)g(n)g(k)g(1)38
+b Fb(<)46 b Fk(S)144 b(e)g(r)g(v)g(e)g(r)g(S)g(o)g(c)g(k)g(e)g(t)g(C)g
+(h)g(a)g(n)g(n)g(e)g(l)199 b Fb(>)735 b Fk(a)169 b(c)g(c)g(e)g(p)g(t)g
+(C)g(a)g(l)g(l)g(b)g(a)g(c)g(k)858 b(=)1813 44215 y Fg(15)8545
+b Fl(n)22 b(e)g(w)754 b Fk(T)68 b(h)g(u)g(n)g(k)g(1)38
+b Fb(<)46 b Fk(S)144 b(e)g(r)g(v)g(e)g(r)g(S)g(o)g(c)g(k)g(e)g(t)g(C)g
+(h)g(a)g(n)g(n)g(e)g(l)396 b Fb(>)99 b Fk(\()g(\))816
+b Fj(f)1813 45544 y Fg(16)6014 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)940
+b(v)125 b(o)g(i)g(d)921 b Fk(r)129 b(u)g(n)278 b(\()299
+b(S)151 b(e)g(r)g(v)g(e)g(r)g(S)g(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g
+(n)g(e)g(l)988 b(s)160 b(e)g(r)g(v)g(e)g(r)g(C)g(h)g(a)g(n)g(n)g(e)g(l)
+312 b(\))866 b Fj(f)1813 46872 y Fg(17)8668 b Fl(t)145
+b(r)g(y)865 b Fj(f)1813 48200 y Fg(18)11318 b Fk(S)138
+b(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g(l)958 b(c)151
+b(h)g(a)g(n)g(n)g(e)g(l)836 b(=)845 b(s)160 b(e)g(r)g(v)g(e)g(r)g(C)g
+(h)g(a)g(n)g(n)g(e)g(l)357 b(.)i(a)165 b(c)g(c)g(e)g(p)g(t)406
+b(\()237 b(\))f(;)1813 49529 y Fg(19)11398 b Fl(i)217
+b(f)1029 b Fk(\()298 b(c)151 b(h)g(a)g(n)g(n)g(e)g(l)928
+b(!)112 b(=)938 b Fl(n)162 b(u)g(l)g(l)310 b Fk(\))867
+b Fj(f)1813 50857 y Fg(20)13988 b Fk(c)151 b(h)g(a)g(n)g(n)g(e)g(l)346
+b(.)360 b(c)166 b(o)g(n)g(f)g(i)g(g)g(u)g(r)g(e)g(B)g(l)g(o)g(c)g(k)g
+(i)g(n)g(g)319 b(\()343 b Fl(f)194 b(a)h(l)g(s)f(e)413
+b Fk(\))217 b(;)1813 52185 y Fg(21)13986 b Fk(L)149 b(i)g(n)g(k)g(e)g
+(d)g(L)g(i)g(s)g(t)196 b Fb(<)40 b Fk(B)138 b(y)g(t)g(e)g(B)g(u)g(f)g
+(f)g(e)g(r)184 b Fb(>)716 b Fk(b)150 b(u)g(f)g(s)835
+b(=)1813 53514 y Fg(22)16515 b Fl(n)22 b(e)g(w)835 b
+Fk(L)149 b(i)g(n)g(k)g(e)g(d)g(L)g(i)g(s)g(t)197 b Fb(<)40
+b Fk(B)138 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)432 b
+Fb(>)150 b Fk(\()g(\))g(;)1813 54842 y Fg(23)13991 b
+Fk(a)154 b(c)g(o)g(r)g(e)350 b(.)408 b(r)215 b(e)g(g)h(i)f(s)f(t)h(e)h
+(r)e(S)i(e)f(l)g(e)h(c)f(t)g(a)g(b)h(l)f(e)363 b(\()282
+b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465 b(,)838 b(O)-20 b(P)p
+40318 54842 333 45 v 360 w(R)g(E)g(A)g(D)156 b(,)1813
+56170 y Fg(24)19315 b Fk(c)164 b(u)g(r)g(r)g(y)313 b(\()300
+b(r)152 b(e)g(a)g(d)g(C)g(a)g(l)g(l)g(b)g(a)g(c)g(k)502
+b(,)328 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465 b(,)343 b(b)150
+b(u)g(f)g(s)388 b(\))237 b(\))f(;)1813 57499 y Fg(25)11236
+b Fj(g)1813 58827 y Fg(26)8579 b Fj(g)1813 60156 y Fg(27)8657
+b Fl(c)133 b(a)g(t)g(c)g(h)948 b Fk(\()285 b(I)137 b(O)g(E)g(x)g(c)g(e)
+g(p)g(t)g(i)g(o)g(n)895 b(e)235 b(\))867 b Fj(f)1813
+61484 y Fg(28)11284 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296
+b(.)384 b(e)192 b(r)e(r)385 b(.)405 b(p)213 b(r)f(i)g(n)g(t)g(l)g(n)360
+b(\()234 b(\224)189 b(C)102 b(o)g(u)g(l)g(d)p 30417 61484
+45 150 v 30461 61484 333 45 v 30793 61484 45 150 v 914
+w(n)144 b(o)g(t)p 33074 61484 V 33118 61484 333 45 v
+33450 61484 45 150 v 976 w(a)165 b(c)g(c)g(e)g(p)g(t)348
+b(:)p 38387 61484 V 38431 61484 333 45 v 38763 61484
+45 150 v 929 w(\224)770 b(+)h(e)304 b(\))217 b(;)1813
+62812 y Fg(29)11284 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296
+b(.)393 b(e)200 b(x)f(i)g(t)411 b(\()211 b(1)h(\))g(;)1813
+64141 y Fg(30)8579 b Fj(g)1813 65469 y Fg(31)5922 b Fj(g)1813
+66797 y Fg(32)3366 b Fj(g)156 b Fk(;)1813 68126 y Fg(33)1813
+69454 y(34)3357 b Fl(p)147 b(u)g(b)g(l)g(i)g(c)1025 b(s)208
+b(t)h(a)h(t)f(i)g(c)941 b Fk(T)68 b(h)g(u)g(n)g(k)g(2)38
+b Fb(<)31 b Fk(S)129 b(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g(l)
+453 b(,)342 b(L)149 b(i)g(n)g(k)g(e)g(d)g(L)g(i)g(s)g(t)197
+b Fb(<)40 b Fk(B)138 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)184
+b Fb(>)-197 b(>)730 b Fk(r)164 b(e)g(a)g(d)g(C)g(a)g(l)g(l)g(b)g(a)g(c)
+g(k)849 b(=)1813 70782 y Fg(35)8545 b Fl(n)22 b(e)g(w)754
+b Fk(T)68 b(h)g(u)g(n)g(k)g(2)38 b Fb(<)30 b Fk(S)129
+b(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g(l)454 b(,)342
+b(L)149 b(i)g(n)g(k)g(e)g(d)g(L)g(i)g(s)g(t)197 b Fb(<)40
+b Fk(B)138 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)315 b
+Fb(>)66 b(>)33 b Fk(\()g(\))751 b Fj(f)1813 72111 y Fg(36)6014
+b Fl(p)147 b(u)g(b)g(l)g(i)g(c)940 b(v)125 b(o)g(i)g(d)921
+b Fk(r)129 b(u)g(n)278 b(\()286 b(S)138 b(o)g(c)g(k)g(e)g(t)g(C)g(h)g
+(a)g(n)g(n)g(e)g(l)940 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465
+b(,)1007 b(L)149 b(i)g(n)g(k)g(e)g(d)g(L)g(i)g(s)g(t)196
+b Fb(<)40 b Fk(B)138 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)184
+b Fb(>)716 b Fk(b)150 b(u)g(f)g(s)299 b(\))867 b Fj(f)1813
+73439 y Fg(37)8657 b Fl(w)133 b(h)g(i)g(l)g(e)946 b Fk(\()286
+b Fl(t)138 b(r)g(u)g(e)286 b Fk(\))867 b Fj(f)1813 74767
+y Fg(38)11331 b Fk(B)151 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)946
+b(b)129 b(u)g(f)815 b(=)835 b(B)151 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g
+(r)347 b(.)282 b(w)89 b(r)g(a)g(p)237 b(\()169 b Fl(n)22
+b(e)g(w)812 b(b)126 b(y)g(t)g(e)312 b Fk([)187 b(1)h(0)g(2)f(4)h(])f
+(\))g(;)1813 76096 y Fg(39)11325 b Fl(t)145 b(r)g(y)864
+b Fj(f)25697 79417 y Fn(9)p eop end
+%%Page: 10 10
+TeXDict begin 10 9 bop 1813 5313 a Fg(40)14012 b Fl(i)175
+b(n)g(t)895 b Fk(n)740 b(=)835 b(c)151 b(h)g(a)g(n)g(n)g(e)g(l)346
+b(.)e(r)150 b(e)g(a)g(d)300 b(\()277 b(b)129 b(u)g(f)348
+b(\))217 b(;)1813 6642 y Fg(41)14054 b Fl(i)217 b(f)1029
+b Fk(\()203 b(n)589 b Fb(>)734 b Fk(0)135 b(\))855 b
+Fj(f)1813 7970 y Fg(42)16623 b Fk(b)129 b(u)g(f)324 b(.)417
+b(f)224 b(l)f(i)h(p)461 b(\()237 b(\))f(;)1813 9298 y
+Fg(43)16644 b Fk(b)150 b(u)g(f)g(s)344 b(.)337 b(a)143
+b(d)g(d)g(L)g(a)g(s)g(t)293 b(\()276 b(b)129 b(u)g(f)348
+b(\))217 b(;)1813 10627 y Fg(44)16648 b Fk(a)154 b(c)g(o)g(r)g(e)349
+b(.)409 b(r)215 b(e)g(g)h(i)e(s)h(t)g(e)g(r)g(S)h(e)f(l)g(e)g(c)h(t)f
+(a)g(b)h(l)f(e)363 b(\()281 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465
+b(,)857 b(OP)p 43032 10627 333 45 v 398 w(WRITE)192 b(,)1813
+11955 y Fg(45)21971 b Fk(c)164 b(u)g(r)g(r)g(y)314 b(\()309
+b(w)162 b(r)g(i)g(t)g(e)g(C)g(a)g(l)g(l)g(b)g(a)g(c)g(k)514
+b(,)992 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465 b(,)1008
+b(b)150 b(u)g(f)g(s)387 b(\))237 b(\))f(;)1813 13284
+y Fg(46)13892 b Fj(g)1813 14612 y Fg(47)14024 b Fl(e)188
+b(l)e(s)h(e)907 b Fj(f)1813 15940 y Fg(48)16711 b Fl(i)217
+b(f)1029 b Fk(\()203 b(n)589 b Fb(<)734 b Fk(0)135 b(\))1813
+17269 y Fg(49)19233 b Fl(t)82 b(h)g(r)g(o)g(w)769 b(n)22
+b(e)g(w)824 b Fk(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g(i)g(o)g(n)292
+b(\()234 b(\224)j(c)151 b(h)g(a)g(n)g(n)g(e)g(l)p 41708
+17269 45 150 v 41752 17269 333 45 v 42084 17269 45 150
+v 982 w(c)165 b(l)g(o)g(s)g(e)g(d)255 b(\224)304 b(\))217
+b(;)1813 18597 y Fg(50)16586 b Fl(b)92 b(r)g(e)g(a)g(k)274
+b Fk(;)1813 19925 y Fg(51)13892 b Fj(g)1813 21254 y Fg(52)11236
+b Fj(g)1813 22582 y Fg(53)11314 b Fl(c)133 b(a)g(t)g(c)g(h)948
+b Fk(\()285 b(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g(i)g(o)g(n)903
+b(e)94 b(1)244 b(\))867 b Fj(f)1813 23910 y Fg(54)13982
+b Fl(t)145 b(r)g(y)864 b Fj(f)1813 25239 y Fg(55)16645
+b Fk(c)151 b(h)g(a)g(n)g(n)g(e)g(l)346 b(.)368 b(c)174
+b(l)g(o)g(s)g(e)413 b(\()236 b(\))h(;)1813 26567 y Fg(56)16648
+b Fk(a)154 b(c)g(o)g(r)g(e)349 b(.)399 b(u)206 b(n)f(r)g(e)g(g)h(i)f(s)
+g(t)f(e)i(r)f(S)g(e)h(l)f(e)g(c)h(t)f(a)g(b)h(l)f(e)353
+b(\()282 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465 b(,)1813
+27895 y Fg(57)34405 b Fk(O)-22 b(P)p 38318 27895 333
+45 v 354 w(R)g(E)g(A)g(D)821 b Fj(j)843 b Fk(OP)p 45025
+27895 V 398 w(WRITE)215 b(\))i(;)1813 29224 y Fg(58)13892
+b Fj(g)1813 30552 y Fg(59)13970 b Fl(c)133 b(a)g(t)g(c)g(h)949
+b Fk(\()285 b(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g(i)g(o)g(n)903
+b(e)94 b(2)244 b(\))867 b Fj(f)875 b Fa(/)156 b Fj(\003)812
+b Fa(D)-8 b(o)815 b(n)158 b(o)g(t)g(h)g(i)g(n)g(g)356
+b(.)1013 b Fj(\003)156 b Fa(/)875 b Fj(g)1813 31880 y
+Fg(60)11236 b Fj(g)1813 33209 y Fg(61)8579 b Fj(g)1813
+34537 y Fg(62)5922 b Fj(g)1813 35866 y Fg(63)3366 b Fj(g)156
+b Fk(;)1813 37194 y Fg(64)1813 38522 y(65)3357 b Fl(p)147
+b(u)g(b)g(l)g(i)g(c)1025 b(s)208 b(t)h(a)h(t)f(i)g(c)941
+b Fk(T)68 b(h)g(u)g(n)g(k)g(2)38 b Fb(<)31 b Fk(S)129
+b(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g(l)453 b(,)342
+b(L)149 b(i)g(n)g(k)g(e)g(d)g(L)g(i)g(s)g(t)197 b Fb(<)40
+b Fk(B)138 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)184 b
+Fb(>)-197 b(>)739 b Fk(w)173 b(r)g(i)g(t)g(e)g(C)g(a)g(l)g(l)g(b)g(a)g
+(c)g(k)861 b(=)1813 39851 y Fg(66)8545 b Fl(n)22 b(e)g(w)754
+b Fk(T)68 b(h)g(u)g(n)g(k)g(2)38 b Fb(<)30 b Fk(S)129
+b(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g(l)454 b(,)342
+b(L)149 b(i)g(n)g(k)g(e)g(d)g(L)g(i)g(s)g(t)197 b Fb(<)40
+b Fk(B)138 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)315 b
+Fb(>)66 b(>)33 b Fk(\()g(\))751 b Fj(f)1813 41179 y Fg(67)6014
+b Fl(p)147 b(u)g(b)g(l)g(i)g(c)940 b(v)125 b(o)g(i)g(d)921
+b Fk(r)129 b(u)g(n)278 b(\()286 b(S)138 b(o)g(c)g(k)g(e)g(t)g(C)g(h)g
+(a)g(n)g(n)g(e)g(l)940 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465
+b(,)1007 b(L)149 b(i)g(n)g(k)g(e)g(d)g(L)g(i)g(s)g(t)196
+b Fb(<)40 b Fk(B)138 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g(e)g(r)184
+b Fb(>)716 b Fk(b)150 b(u)g(f)g(s)299 b(\))867 b Fj(f)1813
+42507 y Fg(68)8668 b Fl(t)145 b(r)g(y)865 b Fj(f)1813
+43836 y Fg(69)11313 b Fl(w)133 b(h)g(i)g(l)g(e)996 b
+Fk(\()197 b(!)1011 b(b)150 b(u)g(f)g(s)344 b(.)314 b(i)120
+b(s)g(E)g(m)g(p)g(t)g(y)341 b(\()221 b(\))g(\))941 b
+Fj(f)1813 45164 y Fg(70)13988 b Fk(B)151 b(y)g(t)g(e)g(B)g(u)g(f)g(f)g
+(e)g(r)946 b(b)129 b(u)g(f)815 b(=)834 b(b)150 b(u)g(f)g(s)345
+b(.)408 b(g)215 b(e)g(t)f(F)h(i)f(r)g(s)g(t)451 b(\()237
+b(\))f(;)1813 46492 y Fg(71)13970 b Fl(w)133 b(h)g(i)g(l)g(e)947
+b Fk(\()276 b(b)129 b(u)g(f)325 b(.)387 b(p)194 b(o)h(s)e(i)h(t)g(i)g
+(o)g(n)391 b(\()197 b(\))730 b Fb(<)e Fk(b)129 b(u)g(f)324
+b(.)398 b(l)204 b(i)h(m)g(i)f(t)427 b(\()221 b(\))g(\))941
+b Fj(f)1813 47821 y Fg(72)16711 b Fl(i)217 b(f)1029 b
+Fk(\()298 b(c)151 b(h)g(a)g(n)g(n)g(e)g(l)346 b(.)368
+b(w)174 b(r)g(i)g(t)g(e)324 b(\()276 b(b)129 b(u)g(f)278
+b(\))838 b(=)27 b(=)827 b(0)135 b(\))1813 49149 y Fg(73)19281
+b Fl(r)130 b(e)g(t)g(u)g(r)g(n)311 b Fk(;)1813 50477
+y Fg(74)13892 b Fj(g)1813 51806 y Fg(75)14054 b Fl(i)217
+b(f)1029 b Fk(\()277 b(b)129 b(u)g(f)324 b(.)387 b(p)195
+b(o)f(s)g(i)g(t)f(i)h(o)g(n)392 b(\()197 b(\))887 b(=)27
+b(=)820 b(b)129 b(u)g(f)324 b(.)399 b(l)204 b(i)h(m)g(i)f(t)426
+b(\()222 b(\))f(\))1813 53134 y Fg(76)16644 b Fk(b)150
+b(u)g(f)g(s)344 b(.)357 b(r)163 b(e)g(m)g(o)g(v)g(e)g(F)g(i)g(r)g(s)g
+(t)401 b(\()236 b(\))h(;)1813 54462 y Fg(77)11236 b Fj(g)1813
+55791 y Fg(78)11334 b Fk(a)154 b(c)g(o)g(r)g(e)350 b(.)398
+b(u)206 b(n)g(r)e(e)i(g)g(i)e(s)h(t)g(e)h(r)e(S)i(e)f(l)g(e)h(c)g(t)e
+(a)i(b)g(l)e(e)354 b(\()281 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465
+b(,)857 b(OP)p 39047 55791 V 398 w(WRITE)216 b(\))h(;)1813
+57119 y Fg(79)8579 b Fj(g)1813 58447 y Fg(80)8657 b Fl(c)133
+b(a)g(t)g(c)g(h)948 b Fk(\()285 b(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g
+(i)g(o)g(n)895 b(e)235 b(\))867 b Fj(f)1813 59776 y Fg(81)11284
+b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)384 b(e)192 b(r)e(r)385
+b(.)405 b(p)213 b(r)f(i)g(n)g(t)g(l)g(n)360 b(\()234
+b(\224)189 b(C)102 b(o)g(u)g(l)g(d)p 30417 59776 45 150
+v 30461 59776 333 45 v 30793 59776 45 150 v 914 w(n)144
+b(o)g(t)p 33074 59776 V 33118 59776 333 45 v 33450 59776
+45 150 v 985 w(w)174 b(r)g(i)g(t)g(e)354 b(:)p 37723
+59776 V 37767 59776 333 45 v 38099 59776 45 150 v 928
+w(\224)771 b(+)g(e)304 b(\))217 b(;)1813 61104 y Fg(82)11284
+b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)393 b(e)200 b(x)f(i)g(t)411
+b(\()211 b(1)h(\))g(;)1813 62433 y Fg(83)8579 b Fj(g)1813
+63761 y Fg(84)5922 b Fj(g)1813 65089 y Fg(85)3366 b Fj(g)156
+b Fk(;)1813 66418 y Fg(86)1813 67746 y(87)3357 b Fl(p)147
+b(u)g(b)g(l)g(i)g(c)1025 b(s)208 b(t)h(a)h(t)f(i)g(c)999
+b(v)125 b(o)g(i)g(d)880 b Fk(m)89 b(a)g(i)g(n)236 b(\()330
+b(S)183 b(t)g(r)g(i)g(n)g(g)1043 b([)196 b(])1024 b(a)163
+b(r)g(g)g(s)309 b(\))915 b Fl(t)104 b(h)g(r)g(o)g(w)g(s)905
+b Fk(I)137 b(O)g(E)g(x)g(c)g(e)g(p)g(t)g(i)g(o)g(n)864
+b Fj(f)1813 69074 y Fg(88)6084 b Fl(i)217 b(f)1029 b
+Fk(\()310 b(a)163 b(r)g(g)g(s)355 b(.)367 b(l)174 b(e)g(n)g(g)g(t)g(h)
+709 b Fb(<)733 b Fk(1)135 b(\))856 b Fj(f)1813 70403
+y Fg(89)8627 b Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)385
+b(e)191 b(r)g(r)384 b(.)406 b(p)212 b(r)g(i)g(n)g(t)g(l)g(n)361
+b(\()233 b(\224)221 b(u)133 b(s)g(a)g(g)g(e)314 b(:)p
+28424 70403 V 28469 70403 333 45 v 28801 70403 45 150
+v 1005 w(j)163 b(a)g(v)g(a)p 31745 70403 V 31789 70403
+333 45 v 32122 70403 45 150 v 961 w(E)134 b(c)g(h)g(o)g(S)g(e)g(r)g(v)g
+(e)g(r)p 39051 70403 V 39095 70403 333 45 v 39428 70403
+45 150 v 673 w Fb(<)80 b Fk(p)146 b(o)g(r)g(t)192 b Fb(>)-12
+b Fk(\224)304 b(\))217 b(;)1813 71731 y Fg(90)8627 b
+Fk(S)104 b(y)g(s)g(t)g(e)g(m)296 b(.)393 b(e)200 b(x)g(i)f(t)410
+b(\()211 b(1)i(\))e(;)1813 73059 y Fg(91)5922 b Fj(g)1813
+74388 y Fg(92)6042 b Fl(i)175 b(n)g(t)1014 b Fk(p)175
+b(o)g(r)g(t)858 b(=)874 b(I)189 b(n)h(t)f(e)h(g)f(e)h(r)383
+b(.)k(p)195 b(a)g(r)f(s)g(e)g(I)g(n)h(t)341 b(\()310
+b(a)163 b(r)g(g)g(s)387 b([)226 b(0)g(])f(\))g(;)1813
+75716 y Fg(93)6021 b Fk(a)154 b(c)g(o)g(r)g(e)840 b(=)706
+b Fl(n)22 b(e)g(w)784 b Fk(A)98 b(S)g(y)g(n)g(c)g(C)g(o)g(r)g(e)g(I)g
+(m)g(p)g(l)344 b(\()237 b(\))f(;)25394 79417 y Fn(10)p
+eop end
+%%Page: 11 11
+TeXDict begin 11 10 bop 1813 5313 a Fg(94)6018 b Fk(S)151
+b(e)g(r)g(v)g(e)g(r)g(S)g(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g
+(l)979 b(c)151 b(h)g(a)g(n)g(n)g(e)g(l)837 b(=)f(S)151
+b(e)g(r)g(v)g(e)g(r)g(S)g(o)g(c)g(k)g(e)g(t)g(C)g(h)g(a)g(n)g(n)g(e)g
+(l)357 b(.)295 b(o)101 b(p)g(e)g(n)340 b(\()236 b(\))h(;)1813
+6642 y Fg(95)6018 b Fk(c)151 b(h)g(a)g(n)g(n)g(e)g(l)346
+b(.)358 b(s)165 b(o)g(c)g(k)g(e)g(t)413 b(\()244 b(\))g(.)383
+b(b)138 b(i)g(n)g(d)285 b(\()169 b Fl(n)22 b(e)g(w)849
+b Fk(I)163 b(n)g(e)g(t)g(S)g(o)g(c)g(k)g(e)g(t)g(A)g(d)g(d)g(r)g(e)g(s)
+g(s)309 b(\()323 b(p)175 b(o)g(r)g(t)410 b(\))237 b(\))f(;)1813
+7970 y Fg(96)6018 b Fk(c)151 b(h)g(a)g(n)g(n)g(e)g(l)346
+b(.)359 b(c)166 b(o)g(n)g(f)g(i)g(g)g(u)g(r)g(e)g(B)g(l)g(o)g(c)g(k)g
+(i)g(n)g(g)320 b(\()342 b Fl(f)195 b(a)g(l)g(s)f(e)413
+b Fk(\))217 b(;)1813 9298 y Fg(97)6021 b Fk(a)154 b(c)g(o)g(r)g(e)349
+b(.)409 b(r)215 b(e)g(g)h(i)e(s)h(t)g(e)g(r)g(S)h(e)f(l)g(e)g(c)h(t)f
+(a)g(b)h(l)f(e)363 b(\()281 b(c)134 b(h)g(a)g(n)g(n)g(e)g(l)465
+b(,)851 b(O)-7 b(P)p 32385 9298 333 45 v 384 w(A)g(C)g(C)g(E)g(P)g(T)
+180 b(,)1813 10627 y Fg(98)11344 b Fk(c)164 b(u)g(r)g(r)g(y)314
+b(\()306 b(a)159 b(c)g(c)g(e)g(p)g(t)g(C)g(a)g(l)g(l)g(b)g(a)g(c)g(k)
+509 b(,)1008 b(c)151 b(h)g(a)g(n)g(n)g(e)g(l)389 b(\))237
+b(\))f(;)1813 11955 y Fg(99)6021 b Fk(a)154 b(c)g(o)g(r)g(e)349
+b(.)306 b(a)112 b(s)g(y)g(n)g(c)g(M)g(a)g(i)g(n)351 b(\()237
+b(\))f(;)1481 13284 y Fg(100)3265 b Fj(g)1481 14612 y
+Fg(101)609 b Fj(g)25394 79417 y Fn(11)p eop end
+%%Trailer
+
+userdict /end-hook known{end-hook}if
+%%EOF
Binary files bamboo/doc/async-tutorial/BadDelayedEcho$1.class and bamboo1/doc/async-tutorial/BadDelayedEcho$1.class differ
Binary files bamboo/doc/async-tutorial/BadDelayedEcho.class and bamboo1/doc/async-tutorial/BadDelayedEcho.class differ
Binary files bamboo/doc/async-tutorial/BetterDelayedEcho$1.class and bamboo1/doc/async-tutorial/BetterDelayedEcho$1.class differ
Binary files bamboo/doc/async-tutorial/BetterDelayedEcho.class and bamboo1/doc/async-tutorial/BetterDelayedEcho.class differ
Binary files bamboo/doc/async-tutorial/DelayedEcho$1.class and bamboo1/doc/async-tutorial/DelayedEcho$1.class differ
Binary files bamboo/doc/async-tutorial/DelayedEcho.class and bamboo1/doc/async-tutorial/DelayedEcho.class differ
Binary files bamboo/doc/async-tutorial/DelayedHelloWorld$1.class and bamboo1/doc/async-tutorial/DelayedHelloWorld$1.class differ
Binary files bamboo/doc/async-tutorial/DelayedHelloWorld.class and bamboo1/doc/async-tutorial/DelayedHelloWorld.class differ
Binary files bamboo/doc/async-tutorial/EchoServer$1.class and bamboo1/doc/async-tutorial/EchoServer$1.class differ
Binary files bamboo/doc/async-tutorial/EchoServer$2.class and bamboo1/doc/async-tutorial/EchoServer$2.class differ
Binary files bamboo/doc/async-tutorial/EchoServer$3.class and bamboo1/doc/async-tutorial/EchoServer$3.class differ
Binary files bamboo/doc/async-tutorial/EchoServer.class and bamboo1/doc/async-tutorial/EchoServer.class differ
Binary files bamboo/doc/async-tutorial/HttpGet$1.class and bamboo1/doc/async-tutorial/HttpGet$1.class differ
Binary files bamboo/doc/async-tutorial/HttpGet$2.class and bamboo1/doc/async-tutorial/HttpGet$2.class differ
Binary files bamboo/doc/async-tutorial/HttpGet$3.class and bamboo1/doc/async-tutorial/HttpGet$3.class differ
Binary files bamboo/doc/async-tutorial/HttpGet.class and bamboo1/doc/async-tutorial/HttpGet.class differ
diff -urN bamboo/doc/md-tutorial/md-tutorial.aux bamboo1/doc/md-tutorial/md-tutorial.aux
--- bamboo/doc/md-tutorial/md-tutorial.aux	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/doc/md-tutorial/md-tutorial.aux	2008-01-10 16:52:29.000000000 +0200
@@ -0,0 +1,58 @@
+\relax 
+\citation{oceanstore}
+\citation{bamboo}
+\citation{pastry}
+\citation{tapestry}
+\citation{bamboo}
+\newlabel{sec:Abstract}{{}{1}}
+\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}}
+\newlabel{sec:Introduction}{{1}{1}}
+\@writefile{toc}{\contentsline {section}{\numberline {2}Structure of a stage}{1}}
+\newlabel{sec:structure}{{2}{1}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}First overview}{1}}
+\newlabel{sec:first}{{2.1}{1}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}The configuration file}{2}}
+\newlabel{sec:config}{{2.2}{2}}
+\newlabel{config}{{1}{2}}
+\@writefile{lol}{\contentsline {lstlisting}{\numberline {1}Our \textsc  {Bamboo} config file: simple.cfg}{2}}
+\@writefile{toc}{\contentsline {section}{\numberline {3}Walk-through}{2}}
+\newlabel{sec:walkthrough}{{3}{2}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Class declaration and variables}{3}}
+\newlabel{sec:head}{{3.1}{3}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Our own Payload}{3}}
+\newlabel{sec:payload}{{3.2}{3}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}A new Event type}{3}}
+\newlabel{sec:newevent}{{3.3}{3}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {3.4}The constructor}{3}}
+\newlabel{sec:constructor}{{3.4}{3}}
+\citation{bamboo}
+\@writefile{toc}{\contentsline {subsection}{\numberline {3.5}Initialization}{4}}
+\newlabel{sec:init}{{3.5}{4}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {3.6}Event handling}{4}}
+\newlabel{sec:handleevent}{{3.6}{4}}
+\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.6.1}While not initialized}{4}}
+\newlabel{sec:handleevent:sec:preinit}{{3.6.1}{4}}
+\bibcite{bamboo}{1}
+\bibcite{pastry}{2}
+\bibcite{tapestry}{3}
+\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.6.2}BambooRouteDeliver}{5}}
+\newlabel{sec:handleevent:sec:deliver}{{3.6.2}{5}}
+\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.6.3}Alarm}{5}}
+\newlabel{sec:handleevent:sec:alarm}{{3.6.3}{5}}
+\@writefile{toc}{\contentsline {section}{\numberline {4}Finally}{5}}
+\newlabel{sec:final}{{4}{5}}
+\bibcite{oceanstore}{4}
+\newlabel{sec:appendix}{{4}{6}}
+\@writefile{toc}{\contentsline {section}{\numberline {A}Sending messages direct to a node}{6}}
+\newlabel{sec:networkmessage}{{A}{6}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {A.1}The Network stage}{6}}
+\newlabel{sec:networkmessage:sec:networkstage}{{A.1}{6}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {A.2}Again: Event types}{6}}
+\newlabel{sec:networkmessage:sec:eventtypes}{{A.2}{6}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {A.3}Receiving a NetworkMessage}{6}}
+\newlabel{sec:networkmessage:sec:receiving}{{A.3}{6}}
+\@writefile{toc}{\contentsline {subsection}{\numberline {A.4}NetworkMessageResult}{6}}
+\newlabel{sec:networkmessageresult}{{A.4}{6}}
+\@writefile{toc}{\contentsline {section}{\numberline {B}The sourcecode of SimpleStage}{8}}
+\newlabel{sec:source}{{B}{8}}
+\@writefile{lol}{\contentsline {lstlisting}{SimpleStage.java}{8}}
Binary files bamboo/doc/md-tutorial/md-tutorial.dvi and bamboo1/doc/md-tutorial/md-tutorial.dvi differ
diff -urN bamboo/doc/md-tutorial/md-tutorial.log bamboo1/doc/md-tutorial/md-tutorial.log
--- bamboo/doc/md-tutorial/md-tutorial.log	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/doc/md-tutorial/md-tutorial.log	2008-01-10 16:52:29.000000000 +0200
@@ -0,0 +1,353 @@
+This is pdfeTeX, Version 3.141592-1.21a-2.2 (Web2C 7.5.4) (format=latex 2008.1.10)  10 JAN 2008 16:52
+entering extended mode
+**md-tutorial.tex
+(./md-tutorial.tex
+LaTeX2e <2003/12/01>
+Babel <v3.8d> and hyphenation patterns for american, french, german, ngerman, b
+ahasa, basque, bulgarian, catalan, croatian, czech, danish, dutch, esperanto, e
+stonian, finnish, greek, icelandic, irish, italian, latin, magyar, norsk, polis
+h, portuges, romanian, russian, serbian, slovak, slovene, spanish, swedish, tur
+kish, ukrainian, nohyphenation, loaded.
+(/usr/share/texmf-tetex/tex/latex/base/article.cls
+Document Class: article 2004/02/16 v1.4f Standard LaTeX document class
+(/usr/share/texmf-tetex/tex/latex/base/size10.clo
+File: size10.clo 2004/02/16 v1.4f Standard LaTeX file (size option)
+)
+\c@part=\count79
+\c@section=\count80
+\c@subsection=\count81
+\c@subsubsection=\count82
+\c@paragraph=\count83
+\c@subparagraph=\count84
+\c@figure=\count85
+\c@table=\count86
+\abovecaptionskip=\skip41
+\belowcaptionskip=\skip42
+\bibindent=\dimen102
+) (./listings.sty
+(/usr/share/texmf-tetex/tex/latex/graphics/keyval.sty
+Package: keyval 1999/03/16 v1.13 key=value parser (DPC)
+\KV@toks@=\toks14
+)
+\lst@mode=\count87
+\lst@gtempboxa=\box26
+\lst@token=\toks15
+\lst@length=\count88
+\lst@currlwidth=\dimen103
+\lst@column=\count89
+\lst@pos=\count90
+\lst@lostspace=\dimen104
+\lst@width=\dimen105
+\lst@newlines=\count91
+\lst@lineno=\count92
+\c@lstlisting=\count93
+\lst@maxwidth=\dimen106
+ (./lstpatch.sty
+File: lstpatch.sty 2004/10/17 1.3b (Carsten Heinz)
+)
+(./lstmisc.sty
+File: lstmisc.sty 2004/09/07 1.3 (Carsten Heinz)
+\c@lstnumber=\count94
+\lst@skipnumbers=\count95
+\lst@framebox=\box27
+) (/usr/share/texmf-tetex/tex/latex/listings/listings.cfg
+File: listings.cfg 2004/09/05 1.3 listings configuration
+))
+Package: listings 2004/10/17 1.3b (Carsten Heinz)
+
+(/usr/share/texmf-tetex/tex/latex/url/url.sty
+\Urlmuskip=\muskip10
+Package: url 2004/03/15  ver 3.1  Verb mode for urls, etc.
+)
+(/usr/share/texmf-tetex/tex/latex/tools/verbatim.sty
+Package: verbatim 2003/08/22 v1.5q LaTeX2e package for verbatim enhancements
+\every@verbatim=\toks16
+\verbatim@line=\toks17
+\verbatim@in@stream=\read1
+)
+No file md-tutorial.aux.
+\openout1 = `md-tutorial.aux'.
+
+LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 7.
+LaTeX Font Info:    ... okay on input line 7.
+LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 7.
+LaTeX Font Info:    ... okay on input line 7.
+LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 7.
+LaTeX Font Info:    ... okay on input line 7.
+LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 7.
+LaTeX Font Info:    ... okay on input line 7.
+LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 7.
+LaTeX Font Info:    ... okay on input line 7.
+LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 7.
+LaTeX Font Info:    ... okay on input line 7.
+LaTeX Font Info:    External font `cmex10' loaded for size
+(Font)              <12> on input line 13.
+LaTeX Font Info:    External font `cmex10' loaded for size
+(Font)              <8> on input line 13.
+LaTeX Font Info:    External font `cmex10' loaded for size
+(Font)              <6> on input line 13.
+
+LaTeX Warning: Citation `oceanstore' on page 1 undefined on input line 23.
+
+
+LaTeX Warning: Citation `bamboo' on page 1 undefined on input line 27.
+
+
+LaTeX Warning: Citation `pastry' on page 1 undefined on input line 28.
+
+
+LaTeX Warning: Citation `tapestry' on page 1 undefined on input line 62.
+
+
+LaTeX Warning: Citation `bamboo' on page 1 undefined on input line 68.
+
+
+LaTeX Warning: Reference `sec:walkthrough' on page 1 undefined on input line 77
+.
+
+
+LaTeX Warning: Reference `sec:source' on page 1 undefined on input line 91.
+
+
+Underfull \hbox (badness 10000) in paragraph at lines 87--92
+\OT1/cmr/m/n/10 A new stage must im-ple-ment the
+ []
+
+
+Underfull \hbox (badness 10000) in paragraph at lines 87--92
+\OT1/cmtt/m/n/10 seda.sandStorm.api.EventHandlerIF \OT1/cmr/m/n/10 in-ter-
+ []
+
+LaTeX Font Info:    Try loading font information for OMS+cmr on input line 97.
+(/usr/share/texmf-tetex/tex/latex/base/omscmr.fd
+File: omscmr.fd 1999/05/25 v2.5h Standard LaTeX font definitions
+)
+LaTeX Font Info:    Font shape `OMS/cmr/m/n' in size <10> not available
+(Font)              Font shape `OMS/cmsy/m/n' tried instead on input line 97.
+ [1
+
+
+]
+Underfull \hbox (badness 1502) in paragraph at lines 119--123
+[]\OT1/cmr/m/n/10 There is an-other func-tion called \OT1/cmtt/m/n/10 destroy()
+
+ []
+
+(./lstlang1.sty
+File: lstlang1.sty 2004/09/05 1.3 listings language file
+) (./lstmisc.sty
+File: lstmisc.sty 2004/09/07 1.3 (Carsten Heinz)
+)
+LaTeX Font Info:    Try loading font information for OML+cmr on input line 139.
+
+
+(/usr/share/texmf-tetex/tex/latex/base/omlcmr.fd
+File: omlcmr.fd 1999/05/25 v2.5h Standard LaTeX font definitions
+)
+LaTeX Font Info:    Font shape `OML/cmr/m/n' in size <10> not available
+(Font)              Font shape `OML/cmm/m/it' tried instead on input line 139.
+
+
+LaTeX Warning: Reference `sec:source' on page 2 undefined on input line 200.
+
+[2] (./lstlang1.sty
+File: lstlang1.sty 2004/09/05 1.3 listings language file
+)
+
+LaTeX Warning: Reference `sec:payload' on page 3 undefined on input line 261.
+
+
+Underfull \hbox (badness 5741) in paragraph at lines 256--265
+\OT1/cmr/m/n/10 In line 49, we cre-ate a new mes-sage or
+ []
+
+
+Underfull \hbox (badness 3260) in paragraph at lines 256--265
+\OT1/cmr/m/n/10 event type (I think both no-tions are OK).
+ []
+
+
+Underfull \hbox (badness 4303) in paragraph at lines 256--265
+\OT1/cmr/m/n/10 To cre-ate one, we need to im-ple-ment the
+ []
+
+
+Underfull \hbox (badness 7963) in paragraph at lines 256--265
+\OT1/cmtt/m/n/10 seda.sandStorm.api.QueueElementIF \OT1/cmr/m/n/10 in-ter-face
+ []
+
+
+Underfull \vbox (badness 1142) has occurred while \output is active []
+
+
+
+LaTeX Warning: Reference `sec:networkmessage' on page 3 undefined on input line
+ 278.
+
+
+Underfull \hbox (badness 1199) in paragraph at lines 271--279
+\OT1/cmr/m/n/10 fines two more ar-rays for this pur-pose called
+ []
+
+
+Underfull \hbox (badness 10000) in paragraph at lines 280--288
+\OT1/cmtt/m/n/10 seda.sandStorm.api.StagesInitializedSignal
+ []
+
+
+LaTeX Warning: Reference `sec:handleevent' on page 3 undefined on input line 29
+0.
+
+
+Underfull \vbox (badness 10000) has occurred while \output is active []
+
+ [3]
+
+LaTeX Warning: Reference `sec:networkmessage' on page 4 undefined on input line
+ 322.
+
+
+LaTeX Warning: Reference `sec:config' on page 4 undefined on input line 325.
+
+
+LaTeX Warning: Reference `sec:constructor' on page 4 undefined on input line 34
+5.
+
+
+Underfull \hbox (badness 1590) in paragraph at lines 343--349
+\OT1/cmtt/m/n/10 bamboo.api.BambooRouteDeliver \OT1/cmr/m/n/10 -- those that
+ []
+
+
+LaTeX Warning: Citation `bamboo' on page 4 undefined on input line 352.
+
+
+LaTeX Warning: Reference `sec:handleevent:sec:alarm' on page 4 undefined on inp
+ut line 410.
+
+
+Underfull \vbox (badness 3428) has occurred while \output is active []
+
+ [4]
+
+LaTeX Warning: Reference `sec:head' on page 5 undefined on input line 446.
+
+
+Underfull \hbox (badness 1163) in paragraph at lines 448--458
+\OT1/cmr/m/n/10 (if they sub-scribed to this event and if they
+ []
+
+(./lstlang1.sty
+File: lstlang1.sty 2004/09/05 1.3 listings language file
+)
+LaTeX Font Info:    External font `cmex10' loaded for size
+(Font)              <9> on input line 476.
+LaTeX Font Info:    External font `cmex10' loaded for size
+(Font)              <5> on input line 476.
+LaTeX Font Info:    Font shape `OMS/cmr/m/n' in size <9> not available
+(Font)              Font shape `OMS/cmsy/m/n' tried instead on input line 476.
+
+
+LaTeX Warning: Reference `sec:networkmessage' on page 5 undefined on input line
+ 492.
+
+
+LaTeX Warning: Reference `sec:source' on page 5 undefined on input line 494.
+
+LaTeX Font Info:    External font `cmex10' loaded for size
+(Font)              <7> on input line 498.
+
+Underfull \hbox (badness 10000) in paragraph at lines 499--500
+[]$\OT1/cmtt/m/n/10 http : / / research . microsoft . com / []antr /
+ []
+
+
+Underfull \hbox (badness 10000) in paragraph at lines 500--501
+[]$\OT1/cmtt/m/n/10 http : / / www . cs . berkeley . edu / []ravenben /
+ []
+
+[5]
+Underfull \hbox (badness 10000) in paragraph at lines 502--503
+[]$\OT1/cmtt/m/n/10 http : / / oceanstore . org / publications /
+ []
+
+
+Underfull \hbox (badness 1297) in paragraph at lines 521--527
+\OT1/cmr/m/n/10 able name is \OT1/cmtt/m/n/10 my[]node[]id\OT1/cmr/m/n/10 . Tak
+e a look into
+ []
+
+
+Underfull \hbox (badness 2717) in paragraph at lines 545--552
+\OT1/cmr/m/n/10 you a \OT1/cmtt/m/n/10 ostore.network.NetworkMessageResult
+ []
+
+
+Underfull \hbox (badness 1354) in paragraph at lines 553--557
+[]\OT1/cmr/m/n/10 Dispatch the event, and that's it -- you've
+ []
+
+
+Underfull \hbox (badness 2310) in paragraph at lines 553--557
+\OT1/cmr/m/n/10 sent the mes-sage di-rectly. If you want to
+ []
+
+
+Underfull \hbox (badness 1735) in paragraph at lines 553--557
+\OT1/cmr/m/n/10 send any pay-load you will have to cre-ate a
+ []
+
+
+LaTeX Warning: Reference `sec:constructor' on page 6 undefined on input line 56
+4.
+
+
+Underfull \hbox (badness 1789) in paragraph at lines 568--577
+\OT1/cmr/m/n/10 This is one pos-si-ble fil-ter (like the one you
+ []
+
+
+Underfull \hbox (badness 4913) in paragraph at lines 568--577
+\OT1/cmr/m/n/10 by your ap-pli-ca-tion ID), take a look into
+ []
+
+
+Underfull \hbox (badness 1281) in paragraph at lines 609--616
+\OT1/cmr/m/n/10 sink to the \OT1/cmr/m/it/10 Net-workMes-sage \OT1/cmr/m/n/10 i
+t will send you
+ []
+
+[6] [7
+
+] (./SimpleStage.java
+LaTeX Font Info:    Font shape `OMS/cmr/m/it' in size <9> not available
+(Font)              Font shape `OMS/cmsy/m/n' tried instead on input line 48.
+LaTeX Font Info:    Font shape `OML/cmr/m/it' in size <9> not available
+(Font)              Font shape `OML/cmm/m/it' tried instead on input line 52.
+
+Underfull \vbox (badness 10000) has occurred while \output is active []
+
+ [8
+
+]
+Underfull \vbox (badness 10000) has occurred while \output is active []
+
+ [9])
+[10] (./md-tutorial.aux)
+
+LaTeX Warning: There were undefined references.
+
+
+LaTeX Warning: Label(s) may have changed. Rerun to get cross-references right.
+
+ ) 
+Here is how much of TeX's memory you used:
+ 2214 strings out of 94501
+ 29658 string characters out of 1175811
+ 100366 words of memory out of 1000000
+ 5405 multiletter control sequences out of 10000+50000
+ 10923 words of font info for 38 fonts, out of 500000 for 2000
+ 580 hyphenation exceptions out of 8191
+ 30i,7n,59p,205b,1484s stack positions out of 1500i,500n,5000p,200000b,5000s
+
+Output written on md-tutorial.dvi (10 pages, 50716 bytes).
Binary files bamboo/doc/md-tutorial/md-tutorial.pdf and bamboo1/doc/md-tutorial/md-tutorial.pdf differ
diff -urN bamboo/doc/md-tutorial/md-tutorial.ps bamboo1/doc/md-tutorial/md-tutorial.ps
--- bamboo/doc/md-tutorial/md-tutorial.ps	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/doc/md-tutorial/md-tutorial.ps	2008-01-10 16:52:29.000000000 +0200
@@ -0,0 +1,5285 @@
+%!PS-Adobe-2.0
+%%Creator: dvips(k) 5.95a Copyright 2005 Radical Eye Software
+%%Title: md-tutorial.dvi
+%%Pages: 10
+%%PageOrder: Ascend
+%%BoundingBox: 0 0 595 842
+%%DocumentFonts: CMCSC10 CMR17 CMR12 CMTI12 CMBX12 CMR10 CMBX10 CMTI10
+%%+ CMTT10 CMSY10 CMR5 CMMI10 CMR9 CMSY9 CMSY7 CMTI9 CMBX9 CMMI9
+%%DocumentPaperSizes: a4
+%%EndComments
+%DVIPSWebPage: (www.radicaleye.com)
+%DVIPSCommandLine: dvips -Ppdf -G0 -o md-tutorial.ps md-tutorial.dvi
+%DVIPSParameters: dpi=8000
+%DVIPSSource:  TeX output 2008.01.10:1652
+%%BeginProcSet: tex.pro 0 0
+%!
+/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
+N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
+mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
+0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
+landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
+mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
+matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
+exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
+statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
+N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
+/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
+/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
+array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
+df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
+definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
+}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
+B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
+1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
+/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
+setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
+restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
+/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
+}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
+bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
+mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
+SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
+userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
+1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
+index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
+/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
+/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
+(LaserWriter 16/600)]{A length product length le{A length product exch 0
+exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
+end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
+grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
+imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
+exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
+fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
+delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
+B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
+p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
+rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end
+
+%%EndProcSet
+%%BeginProcSet: alt-rule.pro 0 0
+%!
+% Patch by TVZ
+% Makes dvips files draw rules with stroke rather than fill.
+% Makes narrow rules more predictable at low resolutions
+% after distilling to PDF.
+% May have unknown consequences for very thick rules.
+% Tested only with dvips 5.85(k).
+TeXDict begin
+/QV {
+  gsave newpath /ruleY X /ruleX X
+  Rx Ry gt
+  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
+  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
+  ifelse
+  setlinewidth 0 setlinecap stroke grestore
+} bind def
+end
+
+%%EndProcSet
+%%BeginProcSet: texps.pro 0 0
+%!
+TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
+index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
+exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
+ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
+pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
+div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
+/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
+definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
+sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
+mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
+exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
+forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
+end
+
+%%EndProcSet
+%%BeginFont: CMMI9
+%!PS-AdobeFont-1.1: CMMI9 1.100
+%%CreationDate: 1996 Jul 23 07:53:55
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.100) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMMI9) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle -14.04 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMMI9 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 60 /less put
+dup 62 /greater put
+readonly def
+/FontBBox{-29 -250 1075 750}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
+3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
+532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
+B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
+986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
+D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
+9E394A533A081C36D6F5CA5FED4F9AC9ADE41E04F9FC52E758C9F45A92BED935
+86F9CFDB57732045913A6422AD4206418610C81D882EE493DE9523CC1BFE1505
+DD1390B19BC1947A01B93BC668BE9B2A0E69A968554239B88C00AF9FBDF09CCD
+67D3B2094C11A04762FE8CC1E91D020A28B3C122D24BEAACF82313F4604F2FEF
+6E176D730A879BE45DD0D4996EF0247AEB1CA0AB08FF374D99F06D47B36F9554
+FAD9A2D3CE451B7791C3709D8A1DDDEFBD840C1B42AB824D5A0DFF0E0F15B0B7
+22AEEB877FF489581DA6FA8DA64944555101EB16F7AB0B717E148B7B98D8DBFD
+730C52937E226545CF8DC3E07C5BA30739BAFCD0F2B44275A6D503F582C0FB4F
+449963D0AD2FAFDE33BA3D77BCA9D1DF878DDAFCA2E22CC4BACD542B282164C7
+97C2BDE318AF9D501CA21F6E662E7AAB75A5F24D2C182E598D175D44E88AB19A
+E7CD59584F95B389183EE21B525BF52A3F23C0FE5383A5565A19361D716F508C
+AAB78411CA5A4D27552CC1C435760D5A89D535B71C593E755C616661363308DA
+A683F54ED0C23FB2C225A008392B0B719F66F11A946A090B7C00B662A3C69599
+B4ECB0CC70C85C4BBBF207E0026F6C7A19F2ACFB7A60804FC98A4BFFD7BFFF2B
+9529E6D9D4238002BBC255BC62959D6F3381FE06E0621B879D5FE5B541D45A1E
+759A6E7DC32B1D1632368D09A97039DF255B6492B1B2B7E2C1434E8306ECA7D3
+5A79B6D614B4979F10988BC76ED53A5F45315CD7DA216221F842FD0F3E050DD2
+BAC23C984D506D8F7D614BCB6B244F5F41321549BB0BD041FBF3053307168680
+3435E9C9456846433DF6235D79BA455E54E35184F420111304C3EFF252F34C47
+4EFCF6EB5196C7288BD93800FC6AD1A8766DAB6F77B5F541E0D3107A2284BEB1
+47E43429404FF1C1827FA720B5A0E942FEFEAB97C0BBB6BD8FAF536C92B1F79A
+459E4AB69F1C8EC929669CACF9EA68D4A4DD0D8FC696F35936541E163B4ED99F
+4C2FAA39D562A0C1DCA241C526C5907DEEEAC517030391DA74286D611508FE4C
+5BC3B1B16A477B50EBD299833780C11EBCEE0C2794AD724271C61960ADFA72EF
+84D5F33282EACA8AEFF10A22A1F13E582B60FA7A9315C57E85819B4E1DEE384C
+D5F11AC28C38948EF8EA4E817BD2CF5F2847F4246DC4FF97EF977686B1088DD8
+615666F0D2C572D2B3A51C150277C659013EC2BA8EFD45482757211E60367F13
+FCD02F864E050B629F3741F281F2F5910004A4C82DB731BD2AE9B70C801C7CAE
+F216AADBFA8937031133BE9AAC8BD1795B7ACAE7F64773E1A024C8E94CD81636
+B55507A68753FB0B1C9F11634CE75A8C84E4E3F3C569EF89EFBC97FF6E14F5
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMBX9
+%!PS-AdobeFont-1.1: CMBX9 1.0
+%%CreationDate: 1991 Aug 20 16:36:25
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.0) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMBX9) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Bold) readonly def
+/ItalicAngle 0 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMBX9 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 97 /a put
+dup 98 /b put
+dup 99 /c put
+dup 100 /d put
+dup 101 /e put
+dup 102 /f put
+dup 103 /g put
+dup 104 /h put
+dup 105 /i put
+dup 107 /k put
+dup 108 /l put
+dup 109 /m put
+dup 110 /n put
+dup 111 /o put
+dup 112 /p put
+dup 114 /r put
+dup 115 /s put
+dup 116 /t put
+dup 117 /u put
+dup 118 /v put
+dup 119 /w put
+dup 120 /x put
+readonly def
+/FontBBox{-58 -250 1195 750}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
+016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
+9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
+D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
+469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
+2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
+B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
+AEBE70DAAED49EA45AF94F081934AA47894A370D635D93B1823EC35EB8316AA1
+86031FCC99F57CB21E8400E54AA474B57112F0D4754A16BEC19117E9D3638986
+0777A71B135CC18E20E193AE6C2BCD89F4A27516DBD2BFE69FF9920D547796F9
+89E0825B6BD5F492B36AF136EA91B826501ADB1979A4204B2CB5C0517F2B9494
+9B2077F316D2B3DA256C99F7549E6BC4B04FE12072B09B4F5D482A126AE351F3
+97DB85F3026A793B51E6B28B54661FEB087F011F0BFF67272DD1E8825C180723
+22AE77CD6166D2605D0C0F131537417CB60086F08E7197AA916D590944BD801B
+DEE8F29FFC516E11396CCB8395CFEC9262E22521882DC0316B0A129DBFA5FB57
+E656890C2471675E0566FE461028FB05532E274E6DF77E7D320D09B2203BBB5A
+8B185B66B2F8A18A49589C4EE27596DD56260D0D759D2A12CEF7FC3010BA1B36
+85A2FD45129DC01A0C7570423305C25D957DFF9215102FFF35F428C823D549E5
+014E7F99ACA6C10B3C92805376D0F3F280D65852CEA54F5CC9DEF9EC1347824B
+0733D3341B34937316E77E952AD9366D3B2ED045165565F07CB636385E5A5911
+2620E185B105EF6C93890833054E05B6301137338A3F1D6AB2F80095E57AE60D
+6E5EE2764624849978C811EC38E014AE4A5823734C5CEB2BC22DDA46BB408D00
+4F25CA8ED287D35E26A4CACA77D2D4B986ED2ADD3BC0C3405741CAD56DE28C7C
+68E8944967C022CC55907B3DFACC1EFAFD38D3EDDA1AADB6E2C006ECBEFAC8D7
+18ED3C46C331623D8FAACC6CF9292B8F1B407806A0D4808F51A5BC97FC6928C9
+9B6A15E04B0B81458C311D31EF1F8CE0355106DE36C5B460B681AECF8095465D
+AA5BA65D4EAD8F2DA2061BA9AEE1DDABC2305F72CDD3F3C2EEB0159E5FE03F7D
+95F112157ADB376E6CE86F39D25EC8763CDD7E937B312AA445A9F2F09D5280B1
+93ABA91F51BB83BC6715B89C989366253B8B5AE48AEAF7BCF273B0C71A62F233
+A5BC0EC75D5D8FBD296C7A3787287749F1A6102C9B86E2D093A2CF6B84D80778
+716F3ED8A9EBF28DDF598E5EB73CBF282DBA861B49D21D91F7AC327779008BB5
+6AACA921409C938F8B1549C76F67D096D423F832F6C9FD49C08F041BDA32E32D
+56E01AAB61F3346A8890882D24A84265183622EBBE4B43C276EECDEF2603CFBF
+6E1836349625378B071532951AD536373AE1176F92929A69311CA496E2C92947
+5D0A43D2838148D8610E80DA5DEDBCA9BA4841127982F0165635EABEF4B0EFCC
+8CDF32E3D138D00CD2C45A3B31276A3966D09044A6075C2E55093A95D64F6F94
+4B94F6AEB0D8BB980A14A2C924823A58A6E3DEC80C652355AA1395564DE6D472
+95D3AF3255828C95B9E5CAEA1C88319F3B2B5A3EF435586A810FBE3BD3B4DFB7
+5CEAF6598F029F9C5660B131D529BA52E634F62397B17F3F6F6227FAAB8B76B1
+7200DA19A08ADA88920F5F1D52A3BB0F7B7816A0CCAFDEB55C75824FFD511505
+41CC2097AD97B07F77A809C5782DEBB72DD246E25F101B160B3915A5D15EF0A5
+144323F3F5F89DD91E9AFE9B1A3F3BE9763890A89312BBB8AEF3F9CA146589F0
+156611DA9EF9A1C418D63DEF2E6CA2128EF00675098FB7B854773FA1EA2A30AD
+26F2FAAB38516CE4F3421B3B0DA64EF692E1ADDB1FC48759FD54DE1878C5B884
+CA022A95CB82B293B441D07FB50DEC1221DC59BD808DCDBA92635D1A264F60BD
+92F2F36BC89E954E2E986A3B9F6F2347DBBE300F936159506E8BB4230ED37AD2
+3B6429F679AC4E9CACB7E6A1E6611140368763D0839D5AAF967908C190885BD3
+F16302C3E366968E71EFCBE0FC1B659609913E1735DCB35A4CC1B14B3D123706
+6D109EB8DEFF31CD67ACB1C3AD5940FD046928886AA820A904DB1F5AC94240A9
+A65E68EA62400209D97FAD60E52A07AC9666FC487E224BAFE043949E0DD086E3
+9B97C14D444128DB99BAB03B39A35E35AFD8FB16C7F3818B21DBB90E76210AD4
+4F5F9C7F311BCE943F016E67BC99E1B86E96D7AA7C2E78CE1E70ADB55950C209
+4A4E9AC8B4509D6A8B9AB265067BB6395FF7DF8B2B1B50729E318A6160A56144
+6BDEA6626CA7C4AD4C15725BB6E7B144BE9E1B31FE467E6FB4F61BF96F8570A9
+56AFD5D6C2A41E3C0C6D16B5BC1CDF0323F2F67AA8F367D36CEAED1ACE5208F4
+09BD25498A09AE910D84072F75D9B50BF4791EBFDA02632554B42F20E6D89346
+B36B2AF1E92BA283421C67F1B4E0F91DCB05D9BD8F01E9EE1770565216BC4F24
+34CDA06474EE9136FA13DAE1AAB3CBB58E59A2910D07AFAE67B22B93B022579F
+415369088B3A750C781AE9A6E3F3BDA480FD4E6EDFF83FD823ECBFFCB8B16E77
+3E77A1F72571CD9E8795840D65406E65A95FBDD7465FD838C39E975A1A8D91E1
+82E9ACCE74FBA40906439BD4F53954F79B3942511D3B9DC007797D979B1C4719
+6B72D76A0D27F3A751CB651772B3D69AE175C724E2CD7DECFA838B038F61A746
+F3514528F6B9659EE9767E9C6E3405C151B92FEB266ECCDF9715A236DB52C389
+57142A21629015FD414F9B1A29A2B2F887383DEBE19CC1D499BA2B95528ADC71
+18EDCC2D1DF537B3F101C6B1759022587EF4F34927C9A6903806141E3B9ED217
+E82395A37938AE91AE1C19C3D2B4FF0D00ACBFFF91025A6EBCBBB49FE2928326
+93B970A5800B205E5A2CFA65995E285DCD9E53F1D0FB4F45E3F3D8063F273625
+AE1FC724EEC73B962F51BB4EB5072C6467E2AD72015B5F9ADABE6739FE9FC49B
+8687719A10780ADAB2370BB1338C42AD33128436F996461BAD342EFE7325E59E
+15128B1D67BF3B447E26E0459DC5AE73A9F940E5A3CFB9535CA3F0E8A6C7CB4C
+F0B0583DB60E705D3C3F1085F75F1B8E76B4592D9036ED11D6964727462DA190
+7B8FB95428E7C9C7D4958B6C0D9BBA3565B486F2203D8971F7007A1C669D1D18
+B62F83FAB5E7B5F1FFEDC19A79350562940A975AC557A983C317A3C83C8FC851
+D26AF3F5652EFC95B4C76FFF7328639C0C66378FF29EBB3316745E8F2A91520A
+F29715A51E4E4DC6152B96F3A7DBDFFB9F9510F7CAB4E23CE9731AF10D788A32
+E2D51F648C439ACEA95428E1E3388200F83DDCC3633468151BE278AC1A661732
+97C5C9ED24442E851588E0081B162B42CC71C6FD10F8E5AC0569398BD11189B7
+43CCA35BCE22D02CB42E531A08044DFBE6352C36504ABE61EE057BAEA0E2A8D4
+CDE40EAA2D543FF9BB5F5ED94515B84D59F3E8CBC32100DA74D116EB4525E110
+ECD92DF605B95930932F90F8B2699E4158D20600681B5D1CF43132BC423FFBF0
+6BE9F880FF27776066D8D4829CB35695ECC2F1A32B4BC114FF7DF65F89FF780F
+20165A8DE596FF82343D4E8EF2046AD83DF5388ECFECC0BC87B43B85A0C6482B
+7785D0E3FA6DE1E29E28E16477542F0A3E905AECDCC47DB5C0C91123A3774F85
+FA1EF571A3A5C92226E05532A35E3122E95E56A721ABBE210B8C09644B3D27D2
+5A8563EA72DB428F638ECA08959EF1A9F92BC91FE9EDA990ECE5EDCB995D5BB0
+B3B39C8566275C912B26ED2AB8B13F10620AFC73F31B5DD9C31A8AC6D67D78AB
+CEBE51D2DC8CA6F0BF2D662A10943998045AD84803C34A7216D1D879A2A231FB
+06549FCCE20F0989A2B6D2001C91A364B093966072F281CEF82ACDC5A4772C37
+5380C19182BD5A94C96AEC68A4896A1D376EC80B611F9AF31EC460FB8315C704
+FBFC94805258BE70ABEEBF1D527560C2A81A399D9AFA7FC987EA4E641B7D46A9
+777757D117FCC530B58B17296A11E315336EBB9913BC3F05063887775C051515
+FE9EC9543AB4FD691EB7F1040CBF5681B396F011A726654B81C943D2099CD3EB
+2DCCD7AD62ED60B630CD3A1EE66E3FB3CCBC2CD93980C03D025AF22C097DA3E3
+6CD1514CBB3F2ED2F6749FE5518635961E3F9C5F11D87EA86415ED4DF80FE4AB
+56F75A334F81F67510BBE51CF379C2AEDB8D9E5D4D32695254B50099BAC97577
+71713BE3E28FE92BA0FCFD8D96A648ECBB29260535B6D80DF09C7CF49BC18BAB
+7B499345657FB1DCF09DD984BE837B1EEDB7BEFA478857826C0630E503AAFA44
+4057B9862A1850F429CF3CF99CA2BDC17880D3E11D18C3AF01C14ACCB7499FF5
+81ECD37BC8140C46F09CA74C2C765E8263AC97FC7C536FEEAF3CC3572D516700
+FA45CBC00797316CAA8F2DAA31528A47B115B72C3BE59187868EDCD7745A6338
+428DD41953470ACF61B7B91030D51F15C71D2FCB7588CED78CFFC84586A280B0
+98B6C111BD7B7A4586E427978F3E8A73353A0CF6C0546BD5324F88EF691866CA
+4E0AFE324327BE3DA5F70675D8EE271295688AF03CE3C4BBCEAD1F797BD32939
+896BAA4ED329A3D3701B9BAF743E79240D42E97BEE61024FEE7BC3B8801E9D98
+6D7D46C0F393BFEB10DB3F5E419E411F28C6BAE1F6DC6122B48BE23939CF5C6C
+47A0AA22CE15365600E81E07B25E30F82808826F8C24E9F05A5187CEDE03C5CD
+D15287255207A58EAF43CDC30A13981CCD8749B195C5317F2937359D2740D2D6
+6FAC9701CA03144250920F5CC4DC1351E9ECFF17C5D52BB9494AF888A15894DD
+F114DDB6C7F667480DB4CF3DF9B0A4FFB85F3877E8F928F567A1366C18C19CD3
+91AE8822718A29A22D795D6BC14D817A4BF32EA3339E4A994B674CF88C4AB860
+B07AC53024B03DDE85C5E339542EEF57F6C083DA96E3410E4A719D5B5CED4282
+95A605EC7100BF662F07DAC8EC91BEC29AF7ECFFE6BD088EA6ACCE4019EDC533
+C9624A1B77EDB94F667E8E7795AC1434CBE0B14C1C40AE1C05A9B302691C59DB
+744D5D0D315068D4621D40C47AD4A4CB8A510DCF1B2BAB7374BDA4221DA2C3D9
+BDE7A37299FF1ECE980387AB9642AB17A3008208A68D9EAE97CC73A65524FD06
+97E78DC9E0C680F17A7170A600790E3943A6DED7B2EEE46F89CAA83E7E8A6541
+F23A1B9E77F5BB45086E7607E4A67CB3AC10F9AD5509DFE4AF9A2CB69752C203
+EF3145EFF50C85004006090A1D797E1A3292A577927A8FF2FD6EA23284923497
+EDD4BF24567DBF3D272DED21D65F9C9AF630C97438AD91156CB72344913485DF
+D0E3E3EF2B071DDAEDD03B7069A2EAFE182826713E4F35498D781CA5A6B4D138
+2842A8C342024BAC8EFB38CB5B8A643226427CEB5370647F7427063B56C97C2C
+7939442B8586B544D94179BD6A845F3553837C92D8D00B349F3A41E4CD84B6E7
+A75398E52B5C9AEDEEEF02C76F44A65BB71FA0C30118C07AC2A04BB8A8C54BD7
+35817AA2937E16FA8ED64959127AFF9FF7A953126872A17499292DD96D657C81
+851732B0DCD1E6F076DA917121F0B3DCB8915C2886CEF7E2A9AAEF53563E0CB2
+007BB4ABB662E104D2C9F654DCFDC1921F1A629C31692B04EBD68A240CE3D63E
+B8480E6CAA157B5B604848648B795FF8B67EEC33CB0B8F904EC528758AC1046D
+CA30E3CFF14278A55AD85CEDC5E95FE51F2B2B200BE0A5A139EB8DD95A951206
+BB5536160AF24A9F92B91234E1E9E0CB49A77079F5BD0B2E91E58F991090068F
+ADFB26B1CA8FE9B84DBB0E3887C54292D6F3A3AA1D2E1A002BE1975471FA6C5F
+7708738AF9DE5ED3013778C02575E0446BF0C7A6BA88CF476E08D4CACF07916D
+CB73A5728F93BE907B9B3D37FA739062C22B283919C675BC1F566459B1B136D0
+3C8FC4256034F29D45FB05057871692FE50DED7FB05EB139F3B9CC15816FA876
+725F0C690B5054880727E9178712537F3344C6999CFF7146E8DDDAD9
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMTI9
+%!PS-AdobeFont-1.1: CMTI9 1.0
+%%CreationDate: 1991 Aug 18 21:08:07
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.0) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMTI9) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle -14.04 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMTI9 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 33 /exclam put
+dup 44 /comma put
+dup 46 /period put
+dup 47 /slash put
+dup 48 /zero put
+dup 49 /one put
+dup 65 /A put
+dup 66 /B put
+dup 67 /C put
+dup 68 /D put
+dup 69 /E put
+dup 70 /F put
+dup 73 /I put
+dup 74 /J put
+dup 75 /K put
+dup 77 /M put
+dup 78 /N put
+dup 79 /O put
+dup 80 /P put
+dup 82 /R put
+dup 83 /S put
+dup 84 /T put
+dup 87 /W put
+dup 89 /Y put
+dup 97 /a put
+dup 98 /b put
+dup 99 /c put
+dup 100 /d put
+dup 101 /e put
+dup 102 /f put
+dup 103 /g put
+dup 104 /h put
+dup 105 /i put
+dup 107 /k put
+dup 108 /l put
+dup 109 /m put
+dup 110 /n put
+dup 111 /o put
+dup 112 /p put
+dup 113 /q put
+dup 114 /r put
+dup 115 /s put
+dup 116 /t put
+dup 117 /u put
+dup 118 /v put
+dup 119 /w put
+dup 120 /x put
+dup 121 /y put
+dup 122 /z put
+readonly def
+/FontBBox{-35 -250 1148 750}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
+3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
+532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
+B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
+986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
+D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
+9E3948FFB3DF7BFF10C9BDA4EFE5F68A8CB1526990D1357AE6D2F7C2D2EF8496
+4E47B39E6712EB8908A3265E5FAB40567E866C244814449F1E993AAB422C3F1D
+DFA8C7118584F2E5197FD4BFA3A8AE9E953C6CD4672C0FF51E41C3A919749C1A
+F06650DF4C5E17492164BDBCDF22609A74BFA7F69960A64B9F949FFC2A807458
+8579366C4F41BDE1FDFBCC4845FA19BBB6963D65EE8532549274BAEBDFF24FA6
+03235D1BE37C06B1938AF369DA75BF38DDBC87A1FF445EAA16E1895ABE9506B9
+211955753E447865D33CEF007391D2666A046277A30A49804FFCED3FEA5EB2C3
+E52EE14A9F75241EA10C91974CDA6236EB840FD44D6DDE4D9B3266C3B99BD38B
+D835BCA8CB819C073480FB972CC028D218F6A1D344CE1B63F4FBF2C826F412E1
+6E0B05A26125865A14FD7B7030B478BB8BC6BC395335C3BA940E1C348267F4F9
+0AF97BBEE253511940F1048E175D3569F7D05A28851B6F50765FEB6C9654FEDC
+1BF52F535DB5BB90C1BD5D2EBF75E0AEBE82B20507F3C28A03746781018D4EB2
+298E4F2C27ACF73FA73EBE43F014BB575AAD516C0407B29E1653375135ECB74D
+C91372F06FA8EF37C31AF3FA48AE65318EAA6C34830A5377ABB2DFA5DA53A574
+4266FD34C25C8025FD7DD45F44301DCF03F51335198F9EE71CBD72BB906F445D
+EE6AFBA2FA06A0A045D56CDE98A6F0DE807D81F26D017B74D1C7A5AE254B7705
+7D96CFB3C342DD38DB5730ED913639C2BF3CEBFA6F3D493DCE5F8218F8BD8035
+9E6CDFB95628F7198CFA2EBDE1905F051BFC4F835C5A787E3B43EAD947EC893D
+9D1B04A9A7EE7CF3E02A58BB0867AA7C77F30CFEBCB4B3E6EC68F6B234FB6B26
+7A9D88A3CBF7A2992A20AC4AB4CCA56A1656BAC37091F120EE4A2957D276993B
+F1BF9B20F3F5058722AF777C7B6569B06D9CA483239F7F44B10B46984677F32C
+26FDCA3E8F18E7B3B7BFBE3EB2D0854A1125AA6FD92646CBBBC60EED141763D4
+5749DD3B551C7616F3E6BB44640EE8191D478DC92B802467205181B41763D212
+DA9236C0C64ABCF8FD70031041CE9853A552E0ACDB7EC0443FF59AA184B2727C
+ACD91E63197235CFBC741CAA23D9E4672CE3BF2C061438503A3D3297F4705671
+EB8B67AF65BF7C085CF59E7C8105A8EF9D9D4A3B7494FBB2323964949B42C5DC
+E80346FE630FE5E44B4D7E68A955F1176D929528F1234E7F7EECA102FCBF918D
+8E8FB49A6B7594B774B9133E5A5D649DF43FCA07590FCEAFECC54CA0A9048CB1
+651987FDA562A1400960FCD9B54076A56360E74EE32F17B7E0AFCF2D76CEB250
+BEA88F82A92B19A9EE1B727677C8B8DE3AEF775B207473D5790A1112789CC0B2
+FE85AB59A2554DC947125A4E091CE30E212C7AA8DC6AAF41D012690BB60F2288
+0583F8066647297C5763A101FC8C8DAEB19FFA3C3416C29AA5C3AB4181F3FD47
+907D6C24F07A9B8B3EAEE5BDF76B6924EB850EA21D1871FC9F5C9C6F39B2965D
+C6FDF66594239B1A282EBB416659F932CB0036BDE1652EA091F59FC8D931DDB7
+3F3B6D12CC2BD3065570B759B4A8A56D3AFFA14BBF10713B39F5DA2F3D841431
+EC64AF1505465EA9F11E449EA853613E93AB2B57637D52D558A98C8A332017A1
+12D90F5239486867C354C7AE19395BF310C71FC11395A7606ED7995F020A607F
+629779AC33E6F01AE118E3D23F199B0CBD1D1C66951AC238F3E36B9C8BFE5C32
+8B1C1EAEDC67477ABF1F27264A12A3F3F52386C581E52E18759949CC94D32B46
+87EC1F41C32C46463A85B515B95B4CE675ED1B627F777AEAEAC75ECD23FD0C05
+8852EFA5C0795FFD42D60ACD8680683F9C8766DF6814D71A8BE7269B8840D57A
+610266ABF260E10AD9A0D45FC16EBA01E7B9340F9B582F75A7EC05F1076FF22F
+571BF3FBDB4B101452CF76E9AB604DC7D6616980580E1CFF44443A4E4859BA6B
+79DD0D8F9CC1197B58E1D76F832C8600CF60FFB0C5BAB1C2CAB04ACEB87ECF55
+6EA5AC16A4EA959BF6DF2223DF422760A384DA1DD78A2D23DC8FB7EAEA98F2F0
+610CF5DB2B7FB2B306D8D0B8499817E266211F1E5D932F984A3A69A54DC92202
+C6DB91AD23862B010538B59EE2974F1B91964ACB94E7E437FFFD74A736699FD7
+D711C1041CFDA58B31278A1793428CEE7F7585636D21E6104DCBC73297631CA3
+7781B5F263B6F22770E151459650493DEE129081FE33712A37676CC1B9761EA4
+C42B1C0A95FBC00534939F1501E0736A51A3CB3CC98BB1B3840610DBBFF74751
+9C981C9B657669F4201F61EE21AFCABD1A4D539A17B5F2A0604F35278B52A41C
+F6B959CE9885A737F17400D20E360A3C82BB4D2A1123C85B1A0DC8FFEC170F8E
+E5A72F80B47209866845208E1AE99B6FD1E7BFAE33E3BE611A3F73E2F5EE2D28
+7D0C2F41D74FE8F50421D4491E5344AB4768D0C2760625A06F65EB763FE6B7B9
+BF2F60AF2161830B85AF0CB64031CAC33BD1E1CF9A3067381110E72340F7377C
+FA2E581BFC6AACE96C73B266B4B2845C4F2267C172C65019E1AA72EC91B1F687
+7ED9B10FF2A809F2360E38CC1EDFA4587DF6F21766B9AAB3198A01119789E2D1
+4F9CE0505B62229F15CA31D92D43F8E7D16D902DAB19D9FAEE0C3C8CEC6A88AD
+349A9A1B6C0EA002A7AAAAAE71EB850B15C07B2C654F4834CA83870BB06829B0
+EF49F9D4702C77A8352D8E16978B68C80DC4703F0DC7FABA78C57538D54F63AC
+1EEA2086CB35059C956339073ADB2010DCF200018ECF7369BFEF5A922C270FDD
+197138A9F100724CA0A03B1F48636C874B50E3B083C48FDB5F6BB95A2DC0B9C1
+F702018242CB34E6585FA6AC9BCAFCBA4BDE33D8788AA89C8FB5A7FDFF63A107
+7F955FF24041F6651261C9B0C08525F5F0281203C8326461EA1033F1F3B1E786
+C0EE985B77D53B6615FAC04536D8EEAF90F75F2D2E54E31B50E0528467EFD613
+193C567333045878CA21228FCA4595F8DC362694B1119A93374C74704AAE41A8
+9002E8F1F324E014D500D31E592A2987D94B2961DA1AB7A723DD1F929C4C48B5
+9F272C39553786746886F1874BB902170CBD3EE8AB089E65A7B862EFB18F717F
+B03BC5350D1601A8155B4518C0860AF7E9442BCB3B01244C5EA261039AAAE8B9
+BAB86DE86A96794F9979F3B8967709099040E92010788844968FE0A5234AFC3A
+337B7A0B3862AF00589534C8CB19D378D7CBD0E494C44494D5961F8116C8F628
+5172B4EA7D16D563AD42A567C51A79843C289E82A5A69C2AE872B53CAB9ABD11
+8EDA898835D429F100AE1ED4CD1BC02815C7A03B324A4923311C97362DEA0102
+83626095911D041DB7F43D43985DCCB749ED74DD679882AAE942D78DD4438F3F
+53C39D99E4C96327E02543D758F888B31290BC7FE170A713EDD411705A7F31A7
+E8610A49F83F02838BFE7AE31B9A4ADBD8CB123068E64EE7D2BC063883824C46
+665ABE57DA78E372DA8A6C93DE23801D4AB0637E5343B7FA97E456587B6B4E41
+CAA42150E12B8017F2770511DFD7333C12D707E59EA4A5A7EA92B1DBF7271C25
+CE5942EC19B8158EE256F580F83F4B453F38978D7576FC454BE03B1D7E369B0D
+07856118BC6A29C3658798E084157890A48B1F937BB437C7C5B0AD5D98FA471F
+E4B8F69CF7A9F6E0E82F78645BCCC8B12239DB8FEE902622F668496112DA80ED
+0CC7ACEFBEE7CEBA6C6CA5AD0A44CB857996C039623F6ED18D70804D59C9278E
+01DAB2DABF402EA2179D7B4FD288DC987F37D5E9976DE10DE2604114F14C7451
+47F91B7649C8DF31BE8E917EE93DEC58734E77B8566EF1C90A593356E8D7439D
+128ADB031CD398A803456E22555D105CE1A6072C15273EE2D897BA762A7BA676
+6AB97E6C16ACDCA0BB274D779BAB02936EA9CDBCB5DFE80DC587341A533C192B
+8D2B5FDCA347199DE00927844248E540BEF40F4331A17F2A869519A32809A83D
+6B7CE2A96BBA7E66D8094FEC6597A445C5E35B2D1F340BBB29965D000D7D8999
+6198F298061C567EA458BCDBD98AA38CAF11152FA03E43A7CE664B432DA91F07
+299B196C497AB7429B4D819C3F41DF64A89D8E21E4DFC770CF9BB8123DEDE3ED
+0C1C91E93356F8C6F53B4FA066FA5E76A68827902D2ED58894F3AD9482959E47
+88AB929CA2F2F8CF07A113CFA8287B541A45DD2ADBA46609CE84943DE2416AF2
+D74ADD073E66B2FE852A147A61BEBD73CD6198B2FE2366CD005C11967FF65E7A
+1C606A341D9ED4656CF0CF2671862DC34BCB83B3E2D42FB5CA2CB8C8CC3A965C
+1467127BCCB6C699021C490727A81D1592157D5B5F8E0AE3A9C021640234EE96
+DCFF3945B00204DBDF15AD4681F03E2C1D9C5A0764CBF987DE45C8054E17FE96
+3ECE98F81CE53A786A16C54558B5EE61E8A13C243E00260A63418126240DAC39
+ACBE792623CCE7D3B53B69A9BFCFD11932FD65D48EEDE173ECA2F87BC66D137C
+EC82ECF58F684A13040A5E57220BAC82CE2113DE7E8617671A6F26597055E6DA
+F2DBA18595545A4F303BC584F7A17FCCFEC94D0140E0AB4FAB3C5DB31DFABD24
+2D190CF84F00B8025061BC80FFB47B50AB352C5FDB968942B2412DDE722431BC
+AD94ED1FBB949FBEB7BD40481A8107C9C0D851A6B4528929FAC1FC664FB79431
+122515E61D16E739C5D5320BCEFDEE3174CA197C0FEC0A1993074FDF9441D84F
+6D16AF0BE4C8DAB3E9AC90F8D4DB266439E3F077731A1058AD1E9BD64D6A494D
+89D2A5FF76F5298F15AAF56B7FB444BE17490ED57708928FD46357C9BF8FC69E
+ECE2AE5BB52F026E7A73C6AF76CC99BED98DAE6D8D0DFC28CDAA85E242E43FA8
+881372719B2031502DC7155BAC76C4107128BF7104FF85EE13C0E9D489E88C4F
+FFB4233D0023A12B9C7A60725A04A11BCD5F7FD83311EEDF1B5C78EA9A91527C
+1CFF60DEAD14D951BD4F7B46C5E01AB7DFBE45543A7D3C21A602219EC3946C66
+37C15EA55978765D1CC8754179D276DE91C8932179C91846F23DB897A49D5B2B
+4229909CB3B8390552C062225553DAA19804E89FB81AB40C8A99BA3C0816F9DA
+8DBD0B36D3E1EFBA10324768FEF6872A6C939BF99100292B39FB3B5B40D7977E
+DC801E65E2DF71B5D68D37E018913ED6254EFF27201E4D1AEC45875E47D5E7D4
+39C71B65FAF8DC2A993563532B57295BA1F0EB7AD534666C70AEC033EEFCFBAB
+42EFB21BF590155CCD935F02899699F13A720175E3C84C86651FFDCF364961B6
+C0CB2EBECB4984CB5F4FDF4B49FA32F130F3A65E168CE1ADB83921F7F779C3BB
+3727708814902693B38F9732D83A38BCD15879F7B90CCCBC409B9D8E85BAF59A
+A907B327D53FAF73435718F7D8B81F4010FBE9F7C7D61D548466CA173E1AC98C
+2B3DD64C3310D44E723C0BFAB4B98CDD4CADF37586971519FF349D07DB40B780
+27BA47644E057D79D7DB572625433C8768A05F7F6FEC649D467D4B8931CADBCB
+9DD017107E1E8DD8C541DB29511B46667BE2AFC46E19833FCD0715AEA47B4C84
+2D6243310C21853E5C19646FAE9147FF00C1E76122662E818BFE4A8404DE9BDB
+EC82D47AF595A0FDB2A6ADADC8EE4355D7C4784DAFCB7D9B353EA5612D5C8F2D
+2FE8EDA3F66E010D2B7B52606B8B015B3AA14D50559419B658EE99C9C993E8C1
+AC62A531E70FDB8E405AE9E0A8D9B48F977BD2BFC9E1A7CEFC7DBD312B77F056
+2A29B61F27ECC5F23A474BFEA549BA4C2F6D1C650F6E2271FA2CC82742CD55D8
+0E868BD7F99AB3BAC6F282BBF9AFBBF43842D006941086809C4BB732D8A6960C
+A4CE5790C5996FA26F13E6C36E1D0A2F12B00A494F97D2A4C3157E664BF10C0D
+6438013DA53333AED0B0387E7C1E8E3B9787A43D86D18309568E656BE667D720
+3EAE674DF28B9B04B17FED81F1051C1E802FB7D7C201F5F9CEA0A66EDD69D36A
+429892DE08B6048DA8784A9EB0755E4300EEE4CDEA36E72304890F0B59E625A4
+4BEB94779CFA8361BD518F852265D8D1556875FF6051F5F81A7764B8985B9CE1
+5B2A009BFCACB1F6EFE12561368E6DE750EA8085E43EC7BDA5207A4D83745222
+1DC865B15B8EB11A7A9D57CBA0AA2F3A0A0636BCA61303900E99B7667B49B250
+CC6A6A748328036D06312CA6F2B01DB645D3A4A7310141268514FE0B922A8EAD
+E1FCF9A47EB081937E159AD7DF2CDC493F2752E398807B99A383188439916E12
+F42B62D9D2DD433B04B1479194FFBD4A24A117F3B9A7ECEF555CE084122D63E0
+1F25E9645602961F6D9778787443F5DC6773F0CBED7CD6A97660DECC29376D17
+6711D677D57A4D1E9783C8CC2A9B6754A9ECD6637C04A2EEB0895D1B2FF9D5AD
+6E883BDB67D43B95CD63F3BA7F740A69540B172FD0A5F9F9231285E62F9487E5
+1E10ECFDBAAE884AEE4DD0996D51D0DFF410B3EAE132B2450E71DC2DAE65E477
+57710E32F4D03B99D47958F0351EF6E44318F708D01CA78F4D7B095D4CFC62A0
+7F8893F265815F28F0D7F7DBE5266316B4F37CDD4A4CFEADE085824D17F8CCCA
+E6E9240E9E231EDDA196E27DD0A24BB40A9CA42D81EAFC36A63E565F89B1A536
+B456B7760D91C8F1BF35CD37FD71ED00299D2B0F16BACB507793412BA8BC16C2
+1D0B5D4401F114EF6286523B778A8B16D46225FE4D52E3B3445FB529149C628A
+BDEC7E28B75719FBB627ED7FD566D1872ECC6584229FC846ECC92658D5724B8B
+9910F666395151094AD4829332D7775039A7ECC6F893307D5457CE9EE59C0A4C
+CC32DFD7572DD803FEAE5FCE095A06BA27AB91828148FABB53759508C14663D9
+34E829DC8BDADD3222043873FAC8E28467CE87BF48B5AA4786D7674EA6613635
+00935502375ABDF33D7486A7DE51074168EE3E83AABDDA45C104DBCA8B893310
+8DBA7DB5DD0CA214E73F4181896E9A309664F7D363A4926B7BCC3B9AA4FF4108
+E6C43F81F83FE82C6BDDB139C9195558254F2F626EFD6B1540834AF55823A98E
+24E1DBFA9F33B71BC0A312952F5773B1E13F001392065C81E9A51F765B63B38F
+2C674C9D35D1644C32004B865999E0C6AC203851E37FA9C093B13D533BE96E36
+15B3C64A9FBC1D1C00FD6ABE29F0CDF99530F28E3177E2B8B496C8955F9BF0B2
+E51FA43BDC7F2526559578F83E46EA3721BF511AFB475B7DE4F543325488C104
+2A6C452D7E1F5325BEA9A44B7843F9ABE972145A074988AFEFE102745CCB5C79
+95CDC07766E8637B3E9309E0D66C6EBD2D77BC6D352442AE8B14A4899FB95641
+923179CFCCB1ACA87BCE12FB68B9C9428DBA850FB2D00AB6AAFCE7FC6E4DC9EA
+088E304B4AD61650BF6A147BDAA9037F7D6FE441BE2C168D804D44B56E82F550
+CC698FD5C67E24333ECB53096C60E132440BBC00BACE6342FD1C746CFCCE33D1
+28D3EDF515DC8F500735EADE7A93FC34D8A4164EF6D42252F98ED1F3C78BD893
+EA58E8420CD82EAF762F0C8A3E75E69A0AA8FCCFEB740547BCB5773AF8D00797
+B3BA7206260A9CE0F7BB9DAE402540C45186C6E84637593F7D01CF0C6BE56BD5
+D0700469CD93CD6C6A5D27A722ED5F11F68CD8B437C81FA701A09617AA904343
+4DE3FB53CEFEEEC7B1A98FD6DC8829FD47DF335A3B713B35E6143ABC8D4A1860
+B7044BEC7E4116148D4D837231A9A484737C9A6EC79B6A38D1F2D287192DB47E
+B1CE1CC9A7738E130C28183C5C4F1F309B578EA0EA027000933797A19255CB15
+75268153F0BE2AF8DA45E4D858D4AB367A9F6ABC794EA53A24CC8433403632F3
+4B84961AA6616D03DBEF674C51F9985A3ED94D6C16329BEF290BEF1E26DBFD5F
+E0D88E4402EAF025A01E07875D06D6A66E74A88984775FC4D14847765E05AA50
+5EB4E28A2F6710BBDEB007776E81DA2E825E2ACB03E8FC77C7F13ABED6C1FE1F
+87F42F39B14B644F54A56805AA037F999643444270544F08B3CDC53DCD527BC4
+9D9CE229352FA734F6C83086F34CA9C302E309BAF31E00ACFAFE28785D420468
+6406795C03000161447551D57BCE9B0A57103178B6D13718463A55826E2E1AFA
+E711B2E29BBB90FE401059F77BCFF2CBAA15891E0012C49E573A29BFE1CE1FB8
+EB4B36CD4193B5EFE41986957E4BF2728305F4A0ADC825CBB929D4C8E42B908D
+6574451D99560C655CDA307089ABF05372B221F9EA28FF376443385FFA510B75
+64EA572DCFF99ECD4DC443655D3C09244E8D299228786AE57D77243D60EC9D23
+0BC58747EF51592F69A89AB6D8D5E6D80D371E5CBBEC71C0C9E7B313812E3E48
+A877B081027D7AE79487108EF2ECE5C37B8C578E3EC8FECFDF7D1F875C17041F
+AE71CB4E30BF193F73956F6659A684ED553ABC63E7809C81980DD0BD9BE21E9B
+09F0DAB3523C22FA6CB2E393E2773F9698301E1877241B1AFB30A456AAAABA62
+841366CD541E32D4158F08FD6BC423E2735FB39329C68D27C6F6AB92247DEDD5
+5F94D26A2ABC1BD371347901674543142E1919FA0D41B91084C5FE6DA066BF4D
+E41DE9A1D52C424A35360FCD3B935F8651128DA88AFC933412EF1E7D7E667E74
+023CE6279921F85E40D36CAE20F3ADFDA1108371B50EF840FAFF45A8EA7AC981
+A51383A2CD291A68770FE70A4BABDE6D5CEE41441E9703F3829597D14F7EC8C4
+D839C01E4CD3D449E727F2D6985FAEACA535633E3AAEFA37C7D03C83251B6F65
+9EB6438631B66A7B96875D1641CDA5447986A42661C86FAE63E7F672DCCA2921
+2C4FD3CDF4CE879974E46025A97078149F72F735CBF5AB3742FF913FCFD4D869
+11493F0396EEC667E707750DE39C67FF2E78CC9DC6CBDD912B80F4C0890EB87D
+AC504691E4D1905C2F3387DE6101840E6613BFF72134C7A1D4DF3967CFF11470
+BADCE15AE8D8253E33987541E9F8F6789788F8B5F9005BCFD4A81F81023D7C72
+7C16501684297ADE25AEBB071BB615499D73B4A79BD90E89D4967BEDC8542230
+79B7523E351593DBDF64E290E23B5DD2FF4F8ADD32EE0837C42D0AB9CC1F4370
+B5CACBBC52C78F6BDEC1E7FAB68B8521B2EEB7C24BA79F4D4D734BAADB988802
+5783043074803624C3541D1C02542090A4B84027FD2F4763D46ED57013FDDC4C
+BCA46F24C987507D685492BDF556D954DCBA679CE51E85232F7D38187483BDFF
+1ECE7CEAA913073849CEC2A84EB5608122396354BE996171F7C24DF2F69C37F0
+6E54055A14F6019492EBF8CB5CF9B2B3D23EDA87953A7635FBFFECEC02037DD6
+F99045E7FBF6742ACA08D6935FF19AC03566C98D066984178CFA34B307D2EC15
+273E917AC878CDF75AFF18971D027F53B869BD6167D072B2984EFBEE80DD6764
+3A89BAB3AF7190F53D64B996FE4DF8BE95BC310080CDE168063024D7CF8C63E2
+4BADD8301C85C1352DFD5DFEBCE583B569CE114A837539D02C859B7AC0FA85EC
+2BA45B5F204930E1BBB93C02A583855096F15D8E9E0ED6AC0000496F69F99F9E
+64F0E9B6C70B608DAF606311511E1B6FDD1AAEC51EC6C8BD7A9A6753FE5E4823
+B7DA93325AFAE858CEBB2B22406B4C5067F27FD6E4E8D093B2BBA198209D29F4
+32E8F2D4F0B11F4C72529F84D4CE3900C07F2FE0F5AB19D812D9D4489B2DBBD5
+6EF4DB3A08FC96B95CA5E969F5FC50A3FCC3E69389F71E9A95E116B6297D9B30
+E815F5E4CAF21CB7E685CD1864058CDBE692F3E77825416FD39080F898723E6D
+C04DCD7E91D7B838EAFC99396DC6B69CCAC5E2C15FDED9B43B0414323DC4F79B
+E4C83A44FB10EE61A837833961CBB074C3F476104972996456B3E2C013338516
+E485DB317FA92069BAD647F98272EDFCF3314A99B4F18105C2A8EAA8DAC68CB1
+71BC5747453554F328455D689D13E22FAE4B25B4F74BE396AF12AE085C6D870C
+47D7187A8B416371E08185E3F680C729A7D83C353CA1944EB03C182F1EF97596
+7232A6AA6BD32349BA4AAD9F53623A8EAAF0CCCF1E5FEAA05317F171356A172E
+673C52AFA131A756FB5024B50A32BC6D19844BC5E89A6BBD7A18853766C4E8A1
+3852A23AF6FD2C11BBF1D019F59FD6D8914D97439F73ABF62FBAADA38ECAC05F
+B693D84305AB221D2F7BF7162E06842E1767DD67537DEA3771350B4EA2F085AC
+5F6AF3FCDC46D2C2D9316AF9467D23F9A53FFF6B96B4B91193BFB88939FE3226
+C994C238DC1CB5A2CF1EAF95947E83DF4F4BE4A92F564B88F4BD21A93F94722A
+099345BEA54F22B95B875EDDD5E553985119E7EA9A4C769A0E31097032EE42D8
+7712235F1D464C5BD1200AA745D9B5CBCB0656527356FA1102C868C6291EDC6D
+8EF02EAB31CAD26035CD3570B5DCC4D12DE1E9CE2BD8F14328FC8F1624628E45
+19593B6400B879CF99D6DAC60E894F0EFEB92677DB74BE51F5B253842C67615C
+A7CC49BFD4A50D88778ED4230E222E00ED6F8322208D64F0F443304BCCA622E3
+B70F6CA2C62EF2DEDFEF0A0AB9EBB6CFFFE53678906ADB490344D60CE788B19D
+8270699D39D2528CA8E2EDE139799E172D3E56EE4645D47454EF78E452004B26
+3FD1A620485D860D7BEF7B2403BCF692946E182120A074B20D24EB61CD0EC2EF
+EECB886E465117E232876900627FD3D0539B25E9370EF9B850A484C1A2B318FB
+63842DF87A36868158440D60BAEA82A671612FB182D8D9FAE72F879855088A92
+BBEBB01FB42B4B8389B1B2C55E9BF0E678CFEA9BEE33AF83E299BD04AECC2164
+C8032C83DA16BB14C3A2EF3D9B6C7AAB74D70AB8CF8282C233666E047424C3D0
+F3F03C331A833AE4085F1FA08E8CAC47F3996087C22B8DBC7C59C8502E8BE211
+C0E777834D3B88B0EC711CF2739545A40EB5717A889D0CE626D52BB968A5EA14
+ECFCB59774050D8689C2D631CF5DAF48EE7F15EA3DD7639F25D7A7D9AB2B680F
+0F8AD1626E6517B0E7AF9CC8A25F2D7B1F447C125B69DE7DCEE63E3DF5F4665A
+1EAFCA7284192E5011D92872B89869C6A82139EFE7ED52AC75B1E8C00D3B9B58
+2C098569837525474F40E94530EACEDF92CF9568B9F464EE16D493686101544C
+B0280E49A5454D8FEC6FDC6CA2B34DEC36A4967555739F7B71663C8588948C8F
+AA7891B31620C0723DF2C2CAB9C94C635FB2A2B3F92E9920FF23C20A8A856643
+2E42BFD12DDF0732461EC7B0A9E251E5D240C08F503E221B5D0A89F7E8CB2847
+F62E23D111D1BB9FF67FDA54C0AA924D8356F0769F844932E61304229ECBCBE9
+2529239CF379AB28B9AFB8273845A3CF9449E77731FE77017338EC961C52994A
+C0D29C766343E9AEF576DC0868EBDEB503F4BD04F395F1633E8B91CFAF3E4F26
+A48A89BD6457966DBA33B012ECDB213F5D4AA66EA9DCF4421447DFBCBAEAC2B7
+CEBDBC0CB7014FF3BCC4F0AB2AFF8CEF1F35540F2ADEFFACC2E7DBDBC3080514
+7E9E1440D4B3C99024217A5D3015209C69584C21F70AEFB115F5454359B04258
+64325B0E98EFA85D8C4C96432972FACB853135519A68572306DABEAD1F0D0BA3
+B49EDE23CC8EAA067B42749AB34F88D5E28EF20C07FB1CB03CC51E84E7425D6C
+C075901F63B27EE20D8C24F2BA81A3EFD8D8A64AB82526E5D180B55694BB9189
+AE66F6E207F98F0E9B6DCB1E0F2B2A3F260ADF6374957023452CDC3418294AD8
+3F81519A59928B6A1A4DA2DA855FE19A8CEF61DFC9481BC208ADA68151D21078
+F4D929329D646F4CC5650CF091DDE6134405A539A7CEF3EF0B6BC04EC2D916F1
+A82BDB0481AD78D596484DB3355C7DB472EB151BD2B3B1EC840CAD9CEAEB0FB2
+AE83ED66DA3721F6228D44D395465F713B72ED50F79A14ED171E8609DD4746F5
+228E8DE111C463DB14440C8449B5C73350CF85229F2D4199719F03F0DD4E3D9D
+2DBB4B44E952C878FFEF27419C029A43D2AE9CD130D718E1EE1FCD29B15AD672
+7065DB29BC3AAAB7FF8232954C9847817AB8B1D153A2A234967AA315E4CD9825
+352853AE92E7DD7CE61C8D7EC01B3820C32448BF5634E7F5F0E54D70912921A6
+6D53048E0634DC71A6665A43A773BCD2AE8B572D046C48DF15075A2D2E72B96F
+E6FA528B4657832B232D3C61FE4248DF579030A5A63C7A7865821BF5AB67FC12
+77B6CD50DDCFC0B37064D868F578DD232FCDB8F5E22383F78315F9BDF4E2F4D9
+9AFA4A77602DF0673A1329F034645C6B194483D6B92BAD40567B78404E1312AC
+585886F03CD4E324AE2872B114D37565998F473A7DADECB9517F70655DD50970
+47174053AA1DD680454DB939297E6E662CBD313F0AB33A97F016A813C5C51836
+B832431358981D040B2B4861E34C3A62E1D9B69099BB08E6D8141A5F6360A1AD
+502BBDC5F8389F3811E0ABE59DA0DBD4D7DE133782B27E463B3F9B75917E0AA1
+B575982A141F481CAD34DDB77F206682E28BD8CD2AA6A48DB0BF0A35D1380519
+BF2A5B091D45B1EE14EC6174AA49ADEB856A0391269B99C9800BFA09ECA13B1A
+C40B8DF569F172F2AD83112E6E68FC4B5CDD996B06B3349D5FD0B8F4C841AD94
+E84C2F3F6232893D77F8D92A167B10D0458B18C3587BD045693F34EC427DB9C0
+A619B69444E7FF536B2C6A47E6E1E9CD351C79357C8A7D9EA75F5A9FBEC0E795
+7656A2A7EE71AF9531849AAF765936B4F6DC6443CFBCC87F8A1E36C9273134E7
+39776872C4C3BC3456DFC5A23E53ED2C4C10904C10002E706E99E8353A526568
+7BF36F274BC43032DA4E702470FB025647F5447EF2C09F34C7A50C7D6E22D138
+34CF46BA86E7F5222047470E34A36AAE0234E9724EF53DF2EAFA9B4038BB07AA
+6BCE192448BBB53FF93BCA0447BB2158C3504658742615598CDD83B64AAE06FE
+6B482469DB776F84C408CA1B5D62F47DC654A31115D99FD37C3AC1E4C9CE1B23
+9D8901139F8AF24F66C32282B03234E23F6D4FC6538F69707EBD5409550A62C7
+A9BA9BB1A2C59A37EE3047BBF4732F4E9031755EEB8D650D9911DD55A7F18806
+F10C26EFBD1F6739E27D29D62F3B7AE139E939FDF0F503FEEA1084DD234BBF0A
+7ED8DEE33E64D65C8EC86B5E08FB22E35520525EEDFBA574BEC452D708648BA6
+41AA04F480056932F5DB25C44FD34D9433A26A9C1E3BBE97CA623D5FBF7F2093
+B95EE2FD2CDA6D21D4CC41A0AD45FD985602143C7B4C9CB97F8CABA2CC623BA9
+281A85E906CF31B8EABC52E3F98B05F131614029D6F669AD4377CED5FC04059D
+FD872C626D59D8D7D285898E3DE01EFF8C1D638C55E88B36EBE90558DA01629A
+4C8F7DB5EEE4BA91FC697B7D1BFBDD9D43523E490BE4F1846C1DAE27C914F8B3
+06E41F352CE6F917CF78D444810DC25CF279A0F9FE198127EF0AC517674D6FAD
+45F69413A84638E6291284FE689DD40DC40490D082626D37ADBF565CE8B425EE
+9968C2DCEDB918A7ECF25C83126459B55F0BD4E85A6E1132FE98F87D99DE0321
+D29935FEE301324057BFC5478EB0EDF22F1C57EADA46579E7CDBB49868260BF1
+AA2C8C7FAA6E71C34BB42C23A62A0BAFA525230FEBFB423CBC674EF945A69B22
+DA917ECC31B4ED12D5E21D6D7B4EB71A7A0B30E8517652769BC41F11FDA6127D
+85BC1FFD7B55F6BB095C2C9A4DBF361D8F2EC14502CA36511FF00326960151F1
+24D13A75B8EB67B972374D836DF26E7320E8CC711B68E98F3DCA7B3C0B604085
+017B834A98E901C0A0330D953B093E9AEFB14F4B825B6A1D2B88E01537EE525C
+1D4F7E9DAF87CCEA7456BAD13CCDB840A0300C80D00DCDE8FBD01E79F7F07F36
+24D092074E0A8C5E2BED72A47FCF69E98B2A87DA11090EAD5F437F57D7F4D697
+44872BCD251E98A7BAF3251B5B4107A9B1DDF623AB7D457808D29E767E08DADE
+F5F42947EF81357F57574BA228FD12CA4DF450C65869CC7841F6C48A96A38CE1
+1EA64F793F32B9A83877F9892C6C2D1BA82EF06D9004BBF78C435AED064C6C68
+0027C3D585466851C7148067742C6812B541A5C0AB4D9DE9E27CC96241219DD3
+83BCECEB75FDDB02845E57666AB6259ABB53A033DFF5419FC41C72E6495187FA
+33CC58FD4AFFAAB7B85084E490D1D5CFEEEE9C85AB5EC3A54F9809BF1F73CAB0
+7BC7E1BD31D74C6C9A96A07571CDA0842179F00F30268F16A5EDB83B1FA16B1A
+36F9B5F6A7ECA5DFF5082691A87D0CDDA4AB218BD9DB99C8BDEEB8C76A5673C7
+E57420DB3A00B0F61536D1E5F1E849F3DED7277822FBD51B901D2B6A4D00F178
+4574D5EB5853CB97487ADD05DFC08D9DEEA8370E28FB3B74B37B7C7084D9C55D
+3ED340A7E08439A62AEEC0A41A54AF8F3695DC062DC03430B4942E64454446DA
+C984F5319DF8CA45911207549A6DE36DADDB7A4B463DC7629228ED646E566A9D
+7998B5E5F39061F5CD7E0A816C5F1AA8297A1748388081AD8EBA93D077D1C1C0
+F211176AC23BA93DBAC2C8370D9483E12CC1E69C6C0E6E0A794D40A7A8227A5E
+EAE9F3365A239B6EFC72F761E4143AEB415A2D41C0EABC78D1D8AAB923DDAE0C
+8AE1609DC1856F57B695A7E15E1C6B3777A3C77C90ACBA19988AE3AFF9C98B56
+FC34B3272CF34E7C4597FC5EBA557755F5A4753356EC19558727C57B58B6862E
+ABC37D770B3169ABA2F603208D17534D4BDD9D8539E2896201FCF6BF01026BD9
+D86A51F1AEF438528C92C99BE624CB1FB72EEB314CBE234E0912158472DA41CE
+57F459424381C0588A5B287ECEB3904116C163E1AE9A6D70B8B29832837CD9CE
+0DF551AE58D0990CF0599F64AAE05363C19E77B8171B535DD0C2736A95598B39
+946C8CFD089242341637BABE60E7A2F5AE22373A6A6BF4A2F317FC39E06DD95D
+A2C447D1563592BE168AC92ED5F8BCC9474DB2B7FDEA37EF4D94513C9EF24207
+EA47808AFEE8F2884120E126D04E048D67124FA924E754711725CC9BF24917F0
+41E6ABC5C76C3BC41C27A7773E3E94600CFC14F3A1AA2A1FA998FFE0D45DFAF7
+884767288D
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMSY7
+%!PS-AdobeFont-1.1: CMSY7 1.0
+%%CreationDate: 1991 Aug 15 07:21:52
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.0) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMSY7) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle -14.035 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMSY7 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 24 /similar put
+readonly def
+/FontBBox{-15 -951 1252 782}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
+7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
+A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
+E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
+221A37D9A807DD01161779DDE7D251491EBF65A98C9FE2B1CF8D725A70281949
+8F4AFFE638BBA6B12386C7F32BA350D62EA218D5B24EE612C2C20F43CD3BFD0D
+F02B185B692D7B27BEC7290EEFDCF92F95DDEB507068DE0B0B0351E3ECB8E443
+E611BE0A41A1F8C89C3BC16B352C3443AB6F665EAC5E0CC4229DECFC58E15765
+424C919C273E7FA240BE7B2E951AB789D127625BBCB7033E005050EB2E12B1C8
+E5F3AD1F44A71957AD2CC53D917BFD09235601155886EE36D0C3DD6E7AA2EF9C
+C402C77FF1549E609A711FC3C211E64E8F263D60A57E9F2B47E3480B978AAF63
+868AEA25DA3D5413467B76D2F02F8097D2841EDA6677731A6ACFEC0BABF1016A
+089B2D24EA6B6976E1F3C02485E789C85C7E810960F119EC37E05891F39A554D
+781418ACFD85A47E5B8CA21171BB12E5FC14122C199EBB08306BD207E8D35D10
+6294680236A775598040BCD3B890F2ADA10D4D7AB4AC31C3FDAB223255464DB8
+D7548AE5AFA82C4C84FE90913ADA0866F42A919869D738F790CA0F7CCBC878C5
+4EB8662598B38324AA3368E7A4D9F3C7C7974512E63C7C9EAE86BEC8E0A86044
+0C670B99CE32A3436E144E03681F1B271A7C66FCFAB987D94411953E7F2F88BB
+7B020A41AC48E566B562008D04802356AE5F5579A430E2E095DC89BC186D8DF2
+98267617AB3E65A24010357087B460810E743A2270967D252D79CAD2900A4FD2
+86CFE19358E245
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMSY9
+%!PS-AdobeFont-1.1: CMSY9 1.0
+%%CreationDate: 1991 Aug 15 07:22:27
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.0) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMSY9) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle -14.035 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMSY9 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 0 /minus put
+dup 3 /asteriskmath put
+dup 102 /braceleft put
+dup 103 /braceright put
+dup 110 /backslash put
+readonly def
+/FontBBox{-30 -958 1146 777}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
+7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
+A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
+E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
+221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
+27D1663E0B62F461F6E40A5D6676D0037D33F24E2FAC2B0009AD3C8350CDF8CC
+65BCA87979C36D14CB552E9A985E48BE4E88ECA16DF418749AF04FDD2B0E1380
+D281BB2476BB45FF30946B247DFD7F57305FA87E50CA338121C71CDFDF927A9C
+77FF14CB4A1D6D80356FB1171ED38C37702350497B44E42CE31DB2F493807DAA
+15B887C671199A54C4C1294BC520F5538C15556BC43C9F62342B121C6DCD6C5F
+491DA47FF360201EE21C08A781ED0589A6DF91B99FE118B9B29E4F068672E52F
+1A06C514D91C4C937D4E642503392B1CD1BA5279B4457B627485A2758184511D
+EA4D44DF84331C92750A333B95478A126836417A0AC59F0A6755BBEBB98D1320
+30B1ED219F095524170DC188D986B71ED8657E1AC173EF3EE9354A6875608039
+5D1FA56305612981567B92D094E27BC1FABF08BED0BF5AB030D76693F9900A97
+D60A861E466299A11EDA97FF94FCE3B933F37EE864FF300CBC6A2317DF3FDE09
+B6C0A5B00BC9CD3776EA7638784AC09E7B35B091BDBFDED9A3E3FF43BEA8113D
+BF4833F77008DB29B11CB3C6B056386818833C68AC3D9A733C3D423A9846B79E
+6E4B4DF74D9B8148B8313AFF75072CF2B7135B3E16028CC6F5635CA5D631CB06
+51514AA420BE5787DB2E758FAA57A2F36055100AB668635F40E786AB33188490
+90EDBC2087D11820C17064F2EA97171734C90CB3DE3A73ADE5300E14742DF178
+494D1991C38C9C028A758D1EC8F48555083523A45AA3D9C491ACC60667F75FED
+04FC890487486D8409FC22F5C3439DF3B6F361858D333DF607F6BC17CEFB4795
+E6D4A4B417D0597839A0FFEB489479E67B35ED59ED7EAB2A001D35BF056D2A7C
+2E853F4329CC560002BF198194B32FC054C4F15C9EFA8048E11AD91D68302A9C
+F8DA8420831F05D19C883735C8DEBC1C884F8FD0069D1ED8721B9E797ABBF17C
+003C4EA7B60F5F0F3CA648DBFD9826188664AFEB28F1943B3F3CE31E28343CD0
+C6DA19C560480B71B48601986015E17A92C6FB950DF58F576BD3D912C41BF123
+B718D02BF906CB704B47EC0EFA14CB33AA663CDF7621D2C00A72D7CB5DEA5B53
+F21141D3B98D1B936D863114ED4F4D557BF26C7E7594E04DFA6AA34E3E9765DD
+03353B48842953193415A5D4F251A7A0A467BE11C19B6F817D310C3985B7C027
+AA30C7E9B24E3944D6AF96C07D5B43D701CDDC5E0138870162D3BB329D775BE2
+E6B4C19CB9ED564BA21C4FDAA9A0023EA802F1638BEA1A8BF4FAA83DC2DDC85D
+B1F2F8E5E4014100D67FCC60CC93D46BA3E2C986A19BAC6A5865D474BBF5AC42
+B0CF26EDCB9936A2FF9AE288EAA04B14FB6CF1BCB487B839E376A7E39AE7AF1F
+292F8731B8BB663F50780410A3D57846E48AE412F95F9815FCCA7D5BEF50D5A2
+A91328407428BFBA4D2E35D8B1F80EDF63502DB3CFB605F2B505365B8B98759F
+DD5A01A5B8CDBA21BF426B5DBA3A0483C3135965D16278E6B1F6E16E753188D4
+7C2D8DC3E92C521DD1DB8278A0A6F3C36605AC26705FDD99DFA2EA3C0C554752
+CF98BE0A058998FEAF7FFA791ECD0E38160CB188C5ABC5337F008BEEE1FE8400
+2E04B0ECC275AF6C2E1D
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMR9
+%!PS-AdobeFont-1.1: CMR9 1.0
+%%CreationDate: 1991 Aug 20 16:39:59
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.0) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMR9) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle 0 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMR9 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 33 /exclam put
+dup 34 /quotedblright put
+dup 38 /ampersand put
+dup 40 /parenleft put
+dup 41 /parenright put
+dup 43 /plus put
+dup 44 /comma put
+dup 46 /period put
+dup 47 /slash put
+dup 48 /zero put
+dup 49 /one put
+dup 50 /two put
+dup 51 /three put
+dup 58 /colon put
+dup 59 /semicolon put
+dup 61 /equal put
+dup 65 /A put
+dup 66 /B put
+dup 67 /C put
+dup 68 /D put
+dup 69 /E put
+dup 70 /F put
+dup 71 /G put
+dup 72 /H put
+dup 73 /I put
+dup 76 /L put
+dup 77 /M put
+dup 78 /N put
+dup 79 /O put
+dup 80 /P put
+dup 81 /Q put
+dup 82 /R put
+dup 83 /S put
+dup 84 /T put
+dup 85 /U put
+dup 90 /Z put
+dup 91 /bracketleft put
+dup 93 /bracketright put
+dup 97 /a put
+dup 98 /b put
+dup 99 /c put
+dup 100 /d put
+dup 101 /e put
+dup 102 /f put
+dup 103 /g put
+dup 104 /h put
+dup 105 /i put
+dup 106 /j put
+dup 107 /k put
+dup 108 /l put
+dup 109 /m put
+dup 110 /n put
+dup 111 /o put
+dup 112 /p put
+dup 113 /q put
+dup 114 /r put
+dup 115 /s put
+dup 116 /t put
+dup 117 /u put
+dup 118 /v put
+dup 119 /w put
+dup 120 /x put
+dup 121 /y put
+dup 122 /z put
+readonly def
+/FontBBox{-39 -250 1036 750}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
+016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
+9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
+D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
+469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
+2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
+87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
+D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
+92A36FADB679CF58BAFDD3E51DFDD314B91A605515D729EE20C42505FD4E0835
+3C9D365B14C003BC6DD352F0228A8C161F172D2551CD1C67CD0B1B21DED53203
+046FAFF9B1129167921DD82C5964F9DDDFE0D2686875BD075FC81831A941F20E
+C5CD90040A092E559F6D1D3B0E9BB71733595AE0EA6093F986377A96060BF12A
+A1B525CD9FA741FE051DD54A32BECD55A868DD63119A4370F8322CCBEC889BC2
+A723CB4015FC4AA90AE873EA14DE13382CA9CF0D8DFB65F0ABEDFD9A64BB3F4D
+731E2E1C9A1789228FF44116230A70C339C9819676022AB31B5C9C589AE9094B
+09882051AD4637C1710D93E8DD117B4E7B478493B91EA6306FDB3FA6D738AAB1
+49FBB21A00AC2A999C21445DE3177F21D8B6AAB33869C882613EA6B5EC56476B
+5634181ECBF03BFEDB57F079EACE3B334F6F384BDF9D70AEBD592C8ECF21378B
+54A8B5DBF7CB9282E16AA517E14843909339B5E7C55B038BF3BB493F3B884A1C
+C25F9E8FB912CBE23199AD9D2C3E573727701BA301526C66C3617B9514D6F11F
+11930B1D97C17816C85B1BFD9B973A191B33CC3B391815AC46268691C741B2D4
+48A840F1128D9B2F9CF07D0709FE796B23A836417BF7B5B12D67F74453C82F5F
+25F7B30701D6F6D4F4DC623C0C27D6A6FBECC7312A3CD10932FC7C10851C3C52
+24B75DEA8A648B7F34F5711DB0E843C914E25663C510185BC37BDB7593C1C259
+21D8DDAD33982C336BF272BAB2F48E68217403FE9F54877B243614A87E64784D
+2796EE4179FBF96123D1BEE3EF89D682B427BA4F12A1318A57F18BE5DD903815
+2617BE9E16176A9294533ECE9AA43A23CFA01403C8AF56BCAFF476CAF6A921AD
+5E015CFB018C5F2BDD6CC9CD6D8DA3F94EE998AAF1A9B6B21C0B12805C49CD40
+2CCC35707280F60E3CB6F69AB97870C8D773DCA9C06167A51DD10943095EBE2C
+43B4FDB56AC9397D77C1DCF302136651B64F0650449C306A0E63C086E42410DE
+E1129624BE3A2CBF0599A36CBB75D48350B12B878988E4A08146F6472D01DA2A
+1741B46DBC67AD2A89CEDAF8B0A3B16E05D36B18D191A3C444B78281BA1A9FF7
+FAEECE6325F645C3352B261B23D72F5F3E62F0435A316536457B3E67FA85FCE9
+1EED205E8403416E04EF27C3E00942C8F74B8C49F4AA132C7852510474CDE9C3
+0FA36A4D47C9A26258536F89302B7F2EBB63819995AE6D7C879B8B88909E3A6F
+AECA4D42041EBAA128A8B7961218F43851B52075C40D350D8BC2E32317BE2B11
+6464628655C59CEAEB0ED23F707A509D058C6C77B4AB205ECCD4FD27FB00D8EA
+355413D9B714C9A4529F0539842463FEBA6A65BEAB4A6BE46FCE5EA8E1A46241
+B39FB21FA9A5651C88EEDD4691B2B2916E9F8AFFA1CC594108D75040F4C08747
+835DC9EC76321EBBCC81FFF2F021BD582D9F2F143D789D1252FDFB7F0940040F
+BCE40E8894EEEB04A4FE29C927B7C1DE4E71C8F915DC3EBF87877206AA703ABC
+228AC7316484531ED6562DAE95742310CDF6D0123906E2AD57485DA14D698065
+EAD356F92BDF540BF5D5A75538BEF5DAB2C7D92A8BA1CCAF7315E8B312A2266A
+44D1C923E0566B62EA072E64F48A1DB6C1F94405B8E05BC20C0A1C1CAB87AD14
+A19B52EE25CAA7F0CBF133C5B97B93B39B1165969C0B12056924678AAA1D4E67
+34B92BAA567BBF1F8E1C123ACE4D07583F48F5A1E39DFF852108358B7D025D45
+EAF8EA1A4C216E4424E5DFE498E4A6D66AC27ECDFB81975C49F59223F5D72BD6
+59C52882169E7E127679DCBBB7156C070E0EA173E39B63601A76D4C4FC57D809
+69CA3FF50653CE3FA5A9E95AE229766BA83A562490AE13570259BA109E4B628D
+C8FAD7D8862F93B01A23C1DD351356B886B8777D113BE1BB3C6013B18F3EF391
+8D8BB4B997064EC21599B26257629EF727AC77166DDD95C4E049E849FE797FB0
+FF5986C9D31D55BC96427CBD4552E557059025E750A46F3F025D9CA7CF40529F
+549CA34F1731D09B76BCC9FC74C69AD18A23C07A4BC36D22710D440CDF3C1CF7
+37DB8E1290727ABEA07162E5D1382183EA0E6BC4CB51F399C11EBB49031447FC
+A2B8B4A32C31841AF0D4CA82DDAF04C1D343AE8829C1C77FADCA0920E919EA84
+9B0CA0537113BDEDB0EFE93EB3C15A2FA47E18365E39A01BBB2FA74093230F58
+3F876E38B380A4C480AC1D7733A964AC75FC45ECFB1F3A49E2D5F9A8C2D6CD5A
+10729F464EFE5CCEF0118658CB8136CFE99F2FD6078679555EDD45156E756C6A
+382D5E27CBBBBDEDC97DF8D770A790E16D62ADF08C61F2175221F7CE4BF218A0
+E2C44E65608AE7102175A103B20865F1FE440C3278582C2BDA240C87999DE458
+4D2A6C371F177B76463EC839D646FE2E32D3254657CB3478BDB2934B43DDDA50
+4C35DC06DC1AAE2A29873862347DB1AFA580ED434017BD301E819EBA7640316D
+3BA1516B9427BC75AC0AADB6DE32D2CD18D887E964CB7036CC762F2B7EB38BA1
+AA13CD34C3295EE2D71517408DBB08FB6EF836DF467E8565D2F0FA4BF5631F36
+7CFCF073D8F45F5F8B7C9C4C07F6ACACA692EB09B41C425B0DB22978079FF16C
+8B83962ECCC0F49A12212AA16D5BCF9516BADB3D9DF87DD8FBAC73EE6100DD81
+B51B3E435653D6DF704D398CB91389DB092885D9D10DE57D62ED01A5211B740B
+97BB8155159FC4ED7288D758C0C77B92A8CEF9AF58A33741D7AD57DD4C9B53B1
+96C9DA56F5A66BAADCCBAD1FBE555E936EC1CE0BFB3D802BFF652B02C2311EE6
+913DA111F167C3E09616DF8AAEADAE671C2103FF1BA61ECF39BD4F7CE4B62885
+7E0B8885D8EC811D87E946010A731994DA0E38873AF96E729E22200C58C77B8D
+6CDD2830C9A2DE080B3545464CDE6FA3753E313AECDD5889EE5F5535BF9FA580
+8B2106B1243400AE5C1B3ABB36228EB033FF302FCF12F80FCD40B97889705FD0
+1403BD6CA3DE16DEA7B26EE2460701412C3615C3626D0663CB0F6EE9CC1A1189
+30BCDF7C9B9BB0F7DC5E70A0F32B8166703A8F9B26E89D4D9F134D1C6AD3AC8F
+2CF9171FCDE2F4E4BEE5BDC40B97EA969E9E30A9CD569C2ECA983F5BF5B20C1E
+1A42EA6B522B8DD9C153EFF9BC75D387BE4EAEBEFB4A5D644BBC6634751F3540
+BE9E150A6DAD143C712DC5B401FBDDD4F441112EC04DDC224FF81BBB3F7427F5
+0F39111C6548EA141FECE53B9DFEC997E88FCF00912F92BA6CFB2B3182CD6019
+E068FF1BF4C8FDD9CB92CC21CBF77F44C9802BA4560F59A391A298FF57A89779
+6C9F11A73E342F909B536643B8C263FB828F86831E18E754C9B1A6E7E2971CE0
+E7E56A04497BA22CD5EFE6C435EFBDCABCC92F50E18F5BCD27C0FC4F1C068C51
+BBDF284F3B16085C8300AB18F739A65F6EFB1ECBF109062D0C12F9BABC1722F1
+94715CDAD673728397F228EB9A7A890B6299471246FB46AD11758F1E6EBBECCB
+4E9025F614A31A29289674453320DC9C156F448064B3495E1FCBA908404C271F
+CF98A38F86E7025E4D7C67B308B28B559F7EE55F3995B2CEFDA8E690413494E0
+1BCB7599D8BEB7F56858D77BB76DFB617CFAFFED467F862BBC990B08F4D5AD7D
+29962CF97987E6EA837921087535D017A5FFAF7539513D2939915005722D5C5E
+9E12ED3582DA505D75ABBCB7C00C986B52F1019DBE98179BE95D5C3D3C1B46EA
+E6A39F418C7316512C8DC8EC1050334B41A26FE432E0FD2309FD273871475274
+F5811D55B67A4B1C227697BACDAD3149A06198AF8BE8CBB2752867FB8FFE516D
+FE08E5B1C921AC62659C93FF9E1ECAB22C37B0865DF60BE6FCCF20C24DA9E61B
+D63A4A75705C045E30F2A474AF376DB60A6D6DD1885B707564BE7308F1EB0614
+6EEFA522B6D24B1F523F414958767FF098F383CED15EBC6F2D0B1CC4884708A5
+FC11586FABCA1035DD586F4E205BE35882B409F4F1C024905999F12BAC23FBD5
+DAECA27A7C5BA28D4A8787827E75A081D866CF186BF075216A6ACF4BFE42F3DC
+57D5FA0BB81DD58C11F89C36CEDE3405B40B7BC995D9C969B7AD851621CE9F71
+93771FF7571298A2E52EFD5288A64D6EC7E421DAC380D8CFEE7CD58B25D6193F
+E462C633007CFFADB1EE4CDB350F29FE57F51959416FAC6314F73590A1BC0368
+8AC79DD73BC2660EE0AD848F46E5EC50CBB764A87FAAF2BEC413E95ECDCF3654
+BFCDFDDA7229807DB51EC9CC946E78A58A23FA0892D4E65D24CC71D398C89D22
+73DF69FC479EA99E404C8D3AEF660242EC6CF8409F3D7145CCC418E4D2A7F1BA
+AED478F7B6D4EBA6BF2BA87231852D1F2D0BFCE37E36ACCEE9DA5F683FB619B9
+35898C5359B24AA64A1D25970BB1A28D0692BBD26FEDFD15B3EDB0BA2DF617E7
+DA85D9D23DB34F7C809DB494A11D22C8D39E10FE42798FFBF1218CB12E108E0E
+EF451BE082DEDB156EAB2E01E978F136B7A71C8CC07FF0F3413169AD768ED16E
+D9D6549253BA496A8D84112B862A8B4EC86BFE83B968D0CF32849DC5A5076487
+970DC05674966400B6C415901221A5B6B2D1FFF953E6F491B61DF12CD8BC2FBA
+D9DB41DF1E2F971B5C464D51121FC4E8399AD5E9E52EA3B8C7A5591976BEA85B
+77C3CDC912C65A16A691D7D04802372C0917533BC39805C19AC73DABA93B5F10
+E78E78F8707A585DEAAD8D912C1FBB6428C1460FCFA3DEF169548DB2963AF7F8
+5FAACAAB4DA46C52024EB97C0AF1A19D5EDDAB3B51DB3D6804747E9A61BFFA48
+652ADE536FAAE08B646846FF183B93DB6FDDCB80F73D18BAA5298AC60E64EA88
+98C08AE4624F4F9079AE74AD946C6E8A8155C8FDB02D0BE349117A88D7397E29
+C1A6C6E0C0AB5A487803B86067B167EA552133CC1102CD88DEBAA98CB4BE512F
+A68A7E7FA6DF8580A5B714D1CB918E2C974F6C30EAEA95F02A35E946DFB5C0DF
+70244575F801C1443CA36E2A3A24F1373ED76D5961C1C6D5FC3D9EB8DBA756D7
+8553BCED62C6CECB4C4430015318EAF4EDA86AE999FF8248F8348CE5A1A6C14C
+569A2C5AFF42B689A2F565AD743827219C9CC0E5493E5384438091D03EF0A637
+2BC379819F17DD831DC0E6605099E70B46495C2194FD6DED6BFF1E762F60BDA6
+E970BFE9E566577225AAFF11284954966768789EBF7E745DC79283183B120D22
+08501BF0CD87A5DF3F4FACF89543D206BE27A07D7BBB01E110067733D188BB00
+39E37952C9DA17FC3E70D9FF91E6844072C7216ACDC4AEFA58A4EFEA85EC9083
+14B020AF976CA08AB8001554435CB844C5BD04BCE811A89FF3FB7FA87F9DBACC
+338F6C6AF37BDBFF6BFEFB2FCA733B2BA761F9D126553B3D6776CFE031764423
+98467C5397043B5442EB373DC596E792800F33C495994B95D67BEEB049733734
+77AED264A936F263BF25645B6911E65F67730A64EAD88B8CE96872901E2067D2
+6DACD3C52E1BC2890273AACB7C9E94432598D734BBEB19FBA78643B3A77E1606
+BF39C0F1CDD2B550F0F432AF24B68298AC3987A0BE286CB7663C68F736641C9F
+236584B14C3945B2207A3491970B4855354C03E4383CD232DBD67B8D797E4D76
+9792B6BC4BDE0B0BF2C760F8DA9F91E311269964AB5DE515A207D8ADCD7E0875
+26CABCDC8C71FE79E0D23B7DA390B542D48065C30966638F8CA99C48D8A3DBE2
+49210E93678263AE0E9F59C9A9D965EF2211D05D238021D47CC4AF1592DF11FC
+918AE46F8BC4AA4FB710DD954DBFEF548C781D6C4AA42BDCA309552631D01079
+E588299C45D1ED6C682F0C7FAAA81C9A5E73CC70EF95E168E4358D65DEAF5905
+A2D7BF8DE5BACD62875D9D72DAB0416613BAC87D4D0DAB07AD7232478AB44B7F
+29CA2D9FB9F6B8322035641975713175A8559EEFC77CE7CBE496DB68D887FA42
+FBBAB339A9AD84C468B2255A45F4BBD8738C1264294EE42E77A87B5E4BFA1572
+0068991046B8227F643A2089327DBF179D013E758ED1AD51C1FCFB2AED120919
+C36AF3F209A1CA0AB240E61FD6F6249CE69E9B3897B10E79F54B7517DAD79B67
+1A424DF8254E644F88776514A2C6433D17355A4F03B51B301148A6628F95FC6D
+D65257829139EEDCFBD68B4EC1CD2679375D096F70EA6953B6B8D5747F07971B
+3B08EEB1A1303EE3CE85B7A2CEC2F70A31940FD23F270433606BD6E2DD08E35B
+A9789D121AB6FD1FBD1B07134647ADE4A852C2C25C9B60F5FFAA4B3262B7B722
+E71EA6CAA2DE1B91F3A741D2333A15BC9CF19BB934E0F8E902867E38864227FA
+0DCFB55E15B2FA8174FD300BE01DBB4A1BFB1358B3115BB78DFB5F03734CF3AF
+394A8A14B7CDB6F1406040EBDA004ED3873C581B5679755E00ACDB3333E37EA1
+EC44B0A03C145E9E27D0945D5075F9D8B01A574D01C7EFF350E4E111A18B9FB9
+52F1E1B099B7749DE54D32481BF77EF5B47A6D6FE524B69CCD898A2360CF8440
+7A919B285BBD1DC19995C5BFAD4889AE3DE17C054C4C4901F0483075AAE18426
+61D5901F460E2E0F41F70741FCEEB11CAB75E81B6B132E7152C3FA54F43D97A3
+95661917D615D665A1EE27C43A1E889272D599AB7007521DE8C84781771C8EE5
+95097107D2D26F564B98C4559CBF62131D8CE28EAF2C66AEDE8706E03B82171A
+3AEC9EE2A00A71B8280DA512993C7E33397A74CAACD40DA95E59D78C669D35D7
+CD53BD8A4BC0A52EBCA87F083DBC56B92EA7506A6996644C02ACD910A8A07877
+45DC1172B8044C9BE3C077BB3E72920936EC8CE202FE4993EFDA50C02369120F
+A62BA4E5A7C4CDE8B52F05A8BD12FACA8E3011EDF9EF970294D27674947D4689
+3A22F060F164F5F52A23BCB15D9147A1CBABB83AC143B9863C4363BBCF966275
+68A4F57AED32346BAA433590EF8A0CCE1E42D831EB91DD24C3AA91170FDADB46
+C3B0B1A4F7F87C66539288F5643A273E16BC385A2C71041F9DFDFD5893710C6B
+0900521BC0CC40340D6AF0EAD2C7D4DB73C8F6B6E84E922048C1648848BC7CC7
+03A827D5715F81CABB0532F0C67928C5E272C6604ACA09EACB8C6A3EDC5D4789
+E283AF58649BB8101E164F314E9EAE1B4BCCE642C79408C557467F3206A11322
+6732D7648198C4BCD74B96DE0E1303AECD44FC1D86E85FC04B65CE7E25A79C45
+FCC9CE8A6D10B166D532C57132C4BE5122859B882B49CC552CE0F77CC2A4746A
+D443CC01CFBC98D358F46A6B5B3383F76F448722BD09D7A9AB81E90D35D6F86C
+08E2011383F27E1D3B6A3090CD954A6F40F699E4B2DE02AC89B1970C4B3F8175
+03F548F020CA0DF14F0C8679FF943BF71945B5B5AD4DE1E3A45795D04BDFAF9C
+19607ED7AEED0700EEDB36AB934B79AB17BBFF3234E30F53273E19335C29C251
+1ACF4178AF8867B13D96F535F86B75D8E2F0D821AE744AD331BCFF9C8B7ACD78
+AE8148B043A77758B43AF612C7689455F224059DF5C62B46E8D34685A36FB6D0
+E2E944B98175E417CBDA34598FBF5E0808DE34FBD397E1B2483CFA90572EDD24
+7A9310002224F66653046D36FE58F52C2719C9FAF17BE6DB54BFC7339ABC0146
+812DCA1C98ADAE51928FCB8FBC027113B088DCE1CF55E8B08033606C04E44A3C
+4287C721804298F36967BD3D0E4FE209AD50BA37EC49596925734E16D6018AE9
+52342574FFE85C0667EA0F7BEB14BC46AD693FD076A07299FD0FC5A8AEB5548F
+A2C5BF3E9FAF5C676C3F6230147CA5E7495444B211A612F9C48B458912C3FBD3
+B99DE3291403FD71B9FB5F8863E958439629C64E3BFBCA195DF8E5C12AFEF230
+D00A67704ABE6CEF4DDE7005AE6FECE7660853532CA4CC8103F3BAA7FB904845
+66F877A0A659B7EF37C500CFFAD2393C46CAA1060F8F477A0901B14CC0747A90
+CF431C6E4A73A1E7BEA6391C9D84175A05C11A30B587A76EB08C409962DAC2DE
+A961E6C9169461ED3FD06EAC0580F35B18BEC749695930365DC24B7C50F4EF21
+03102506233858681F590FBAF1220D448CBE7223872D64AD3BFEFF0A79E48842
+BEC3CC75448F3CA3A3578F27BC07F4C6423A6F72A2983D4C8328DA1056477246
+9EA9AC3E84C05B93B801FA3935DBC9DDFD3648549423B07DFE0692AF66355989
+FD621CFD67184C9AECCA99E3C73EEC6198EBA6B387BCB2D5938A1B1F15DAE875
+EBC63AA25AFE67449B383917AD159CB115326A34CD1A725E689C631AD9795AC1
+1F8F5183D532EBD7C9B0A699A648EDCB54C08113570C1141EAF038676160AEB5
+9480E5FE819F144D1DE16459FB88B03C06D1CDFD58A892D88092B13FE339075C
+C4E4A31D4564B32540611F4E14DDC893BC0981DF820AB8116984F3ADD665841B
+14D82F0CDDA1542E1EE44299AE69FDD96AF7A92D136CDB0E727098A41F0075DD
+94BBD182818AF372AB60399A3E8EB5515BED28348226A45B919256A2521CF89E
+BD847C9A68F9C9B67A962835E7BC390615219F7A7C1424B8956738EB7A9165C0
+AF5D7C6AB634A02B7A67458CBDE6C58D9B437F6E80DEF2DF8916ACB94117E1C7
+947FF4BE9F91FA9D910FD50D7D9B0717CED317246562813237EA71CF8E259189
+92B7F65E99732DF68D55355C3F2AEB8651D8A1E3D2DEF01679620E23C4F79813
+7D224501D117EEF0EE4BD06E4F92011BEB8E487B1B2B0E37CC3E0B4885D40B71
+E4A0D79D4A28DF8A31B3F908CC811670DAB10080B66F45980BA32D544EF88671
+27254EA3BF88AE49E1E895BEB17975F799C71BFD914DC5A7DE43DB7567F4C29F
+364EBC2808C77A68CC35D8D5C8FB714DC348B13A7D1371F67B07FBA247A739E9
+C862AAE7F04067DA23BB2CAEAFDDC63CC9A4C383044D23B1EEF9E2B87B213EDD
+D651473912B6637799DED5ACC3C6917039C183D6D5E8A110DB88874394E36EA7
+600E95BC661AF62FF74448CE70F27DF94D17A4B6B82D37AAA34A3CC67AE13D97
+4D08FE29769A57355B2DE94295C8A7C9B5A2B087CAD16DE02457EEC2C3D16DAB
+AD84D9F20FC7F901C0C67ADF40DB98272C053C969188D673F8D0CC6EE9BE03F3
+52BFF9C5C7804380F02025B988A9E6A06C961455927B29F0011F9BC4052D89CE
+23FC10B2135BD1A987472C715F0492434750AFB6A320855759286FD6B4118EDF
+F0BFED7472EDA16B573B532CD845256737B1024B7D7AC495FE2D8B5E3CD53EE9
+91C5AB2DC67AB1EBE16521188CF6890E8D36579151F6370D859CB3BA6E5F122B
+74CA0EE6C0157E664BEBB8B942234004D0A79D3F3B295B9B4174B8F88CA73052
+B3E46D472FF016D112AD3DDC33CCF32D15BCDF3364861E4EAFE18533B58A528B
+2ED4C229047356847241AD658B4C59C0DAE5CC8B09C90F8010C200D3A2016995
+092551F9F875F6FB72DC47829A4DF31400C6053B958741009C8A0E277C2E1BA4
+EF200F489BBE298C2A14E56EF8244CC6B3BAADDAD4890A95067E3C38D363F157
+CC0807CDD27862769839C406F23674CB71EF04CABCB2F3FC209A94CDB33FB474
+47D86D38DD03AF81F80D86653656EEDA1535C68B902F945A09E2F3EDC83377E0
+A99926E0DA45D05F2E727BCC85D936390FC88721E1AA5A0D23804F8B50D4C29E
+A640C746A7AFEEBC1DEC3678274C79574B2BEC57E18521B97CC30AFD25FEDA83
+0A7B2553F9EF1E0F886324641EA23CE4594FFE54DD2ACD06C2082F57929A29AE
+EF14F6AE0641758182892F20F1294E04CC227594B5A2556CF44822DDA21EA2A9
+42B74508FB3C14EB7EF9D7DCF7C1D99D3412F865DDD7AE46F035D58C31AA2DB5
+122275D2C6C975C044D43A564EC0A77A2CB5343E9FD88BDA243681723746A3FF
+7A2D9E2750E00739A7A32E9E3F18A38209DFB185DCA3A07F4D2B492BA2FD95E8
+1679EDCB3A1F7416652535EADCE40FE9E53C5FEF88AD3F1B463497C42AF50F18
+56853E9ED1938254BCB20536632CDCC770D09D767CB7178CE6EE1A209E039FCE
+5BC1B184CB0ECD0C121995EB641DBDE0D559B15E95516E62679D84582A81FC11
+95F168D11B88C129BB001A168A4E5079AEAE6F9E828EE366DF4E7DA753267DF4
+C254D2E2B4C7F1AF411BFCA676405E712573CBD1299DB71E8EAEFA681F77180E
+0565C74E38E24397895DE612D732A9FE87DB137FC38A52CE3BC327B11A84E26A
+F5932232F17E30C7F71E68F385AC0F9F801EA4F1B4847BBA3210DB27A690C22B
+D6B39A2A025A838D5EE46AF3928D92347805AC916D09EF5D3017DDA1522AE4F2
+3F7E1E3E47CD7F89A21B884048D36D234E0C1FFA369BACEDC04735DA96F8DBD7
+F622D88F08CD87C8F1A4F3D98677794FD9CD11DB25BC1F4DFE30C7A6B37812D8
+81A72337A5462C041D39B0339CE8B2594154317D8FC88224EF3C2657F82977DE
+D3ADDA0D8955ED444E77E97D894EE1EAA6DA6CC045C4E3B3D04B1EE5B96D773A
+FD9DBD7B1012C9A332211CDA58814B9A0D92164F5B9758CB0645746367B3BA47
+A91BE6301DB297757AAB2A3695275DF18E70D4D0EAD2D5E12FED4DE3152A6B54
+4EB1457368EEA180180DC666EB916580596224E9E3C03EB58DBD59942CE47E9A
+3BE70A835518C4C08B3404814729C2F672718C01A0AACF94330D5FCC451F2571
+4247408299640D9801169493E5B42B76B431F769018D4347AB4482AB8F200F20
+0ED28F241EAF41EF5FEB772E62E5632EF2A8D8FCC45509A5FF8B7F47FB14CE57
+85C81A8F1B1F63181F93A402FCFB6C6B21F2A3BD98DDA15BEAC830186F456180
+1FEF1CC85E1977A631AE55F39C317F0FF9C1ECCFCBFF59B4F014DBADF236A59A
+72E8BB6CA4F922132E0C4D65FE6F61D70885AA277D6684ADE1B01D76652E18AE
+AA62C40C8A048F11D64D3BDCA76FEA220C7D09463DCEB3FD95D337308C88432B
+7F117DD0C71A1C68041A929DBC33682EB78F869CDDAC8FFAEFA07507759609D0
+DA43DDF498B7C27092B923E1648C456040C405C52210A9027BDE5852708ED9FF
+F85D7DCFF0971ABF019BBAE56FB903F228EAA9E3168C72D437F74D38F3BDB15B
+FB267686416B8760B13A2742759A1AC4BEA6DDF6BDDF63B73C0BAB8816616095
+D588B6FB492F77AB04F7F5A6156B088D09FA4C06F11037A2BEE4EBAAF85C271C
+C0F03172074E1CF13A853CFF37279A91F8C430D7FF21DBE836AEE11E7D49AE9F
+B6A4EC1D4B43A6889CB0DC83994D5EFAAA654753752347568FB96B15E5B6673A
+DD0A6FB1793AFA543C77968C7190D452FD35E838179D70EA3084D74419D1BBA4
+E030596951CB6DE7733B1E0CAF898162519C3C08A43B2175DF3DDE32A79D1A50
+D5E13C915CA6B1940F2273F1B437C1AF8EFB9C7B9F6087C0DD27783A245A35FA
+A38417F820008C9D22834C856B981453EA8B5B2EED029E4CE9B86AFD156E1F26
+0D01530066EE7BDC22C792F46F5A7205D90A433CE0A3B952743D1356D8A2621E
+541EDF39B1D3A9B90619BBCA67277C824068EDD2602C5A78C0F4333218FAF439
+E8F87A14FDD13A1B7E36F3737D9D4C5A09653CDD681CA7F856694FBB94FD509B
+8D286DA510A2090F812DDB67D1A8FAA8FB8C4D6A6A9658F8DF9D1F11AEA49786
+7266D8A39CE27506728E19698434006DF48599FBEC0C634CC4709A876138E10A
+F3BBB772B3AB4FC561C7A5987D42F4812620CDABE853B750D6BB7D95C6654A4B
+38A780616DB9AE6F23476655688B560A83C351408E9B6452B26C9806B4D588E4
+AD01EA49C5762D74F2F14122AA0A2398AE567BED3EC278580748A7C46AAA8208
+16674366F7938B690060C227D88E6408E9DC9ED476E8281D8A4BBB6F0ECFD4B1
+0D609BDD70F7139559EC3296008AE1E8FFF0D3E91DA1728D076CED25AC61521C
+082CE486EA14E3411FDCCB4E2C799730B6BD4CDFF89FCB3A21D7C893678C66B8
+CE82F767ED7908C1DCBAECBA51E3EF5990682526B1B8DCF33518E26063368464
+4D01B5956972481BBC6E6FC18EEAC2E4BF6D01C2E37F0B345B18729E5F619CE7
+CE920D4EC152CCE2EB1951E59656213F80D481F1CCB19AB5A2E4E6297A8E778F
+04027FD8BA1CC43C175FC1297223BF7EE20186CF4EB88ABFF5C4C302BA6BACD9
+61BAA8B6E2A3CCDF9F01E2EA8F26154409E0D215917B2899DB98A186F2D8AAF4
+302DD877BF1F1F15DC3FDC24FE27CB6DEFA9BCE2BA718D6711DDE3344BB94A9B
+539B627A455069F36714EA2277181704BFA13023AE9C3D868B94A76814A173D5
+EBB986B017B10C7BCADFDFCFDB0328889C8B2970318C89249271C57638C6A191
+5A57C762F8D7EC0E238052859BD6523FBA6B4B22A58578B5D1AB23CB6BB3A92A
+210E16F76D03EF51E685723C3C394837682631A6326DE7F8841CFF154CF59025
+97006BBFF5D70947D35D664732C5EB9F3BF22150B6FF6922E3531B1C50F9C04A
+DD5A2531659731D58702D78FC0205D64ED3388FD1BDCB3AD019D5E229D1163C4
+5FE2B6C720BF61BF056CFD631FCF7BC6B204AB058B6F76A84ED5E4DA336E2402
+977CAED77BD3E73B36D9B17EB0B66E26A4C3A812823F30ECA4EC4888E1B79A73
+A99A6EE0DFB644433C3D4A43010EC32D4ACB3043087DA54CC73893B2866E82B5
+97D70FDBE71611291EBD685CDE93F47652F2A1485855AA1FC857F6956A775AA3
+604A6F746B476E5BA2579E4ED6DCC25B80FD565FEB6C7E2F28F80B746B22CC0F
+6E892D4E2164D1E9A016FBB216021A5D503C6F29D642336ED1E9E55006325209
+1312C29069B4CCAFCA0EC9EA6DB94C9D4043FFA82C3DF35371F4A0890D5CD9A9
+4E56D1954A4A6E3D49C064EE33D5727F80FAF3D957E4E28F00CA102F07EEC80C
+9DCCD025E54254DE4E3B1A40AAA4BB92DFF3B28B797B9DEAA9203FF87976FFDA
+1530649B09F7246D1E8254B75198B6769394BAD2ED717B51C7B113D26AD8FE93
+FB7D77168E8927CB2E8F1A0346ABEF19AF8AB06109D92B1DEE934087A6CC2837
+4743BF71E42641B910856ACC94A24E3F54B0A337FAE645001D8884BF1B25E317
+4742905FF1FBA15661A995E41D842FE1E24B2ED92FD7B4063F46BFBE9D223392
+B82881237F3E0343A9C84636B6218891C7C35B4F32F46F653E64E4585609D165
+BBDB81431318C86A3E8599B53C9D23BEE04B9BE458C053E6506AAA8E6C1344A6
+119EFE38C78AB884D96E36826A0E9EC4B7A6259F9EF2CA52A88F3D3C36D1AF9D
+6CAAE4C5BC3523D02BA26CE76D1C3EDD316E1519648064E0D1D8FE33250F1CDC
+0ACD5C5FFA40D6E140CB5A727498650C55EFB20522D865E3874CB81CE2ABAEF2
+C4FB7AD9E380BE68DA8D1257554A7D85386872B16EBEE4CB32EA08D7F0C46148
+7ADAA7D1ECBD6766CAC86E9E0792D77C8B42795CD75FA4C1FBFFAF6584F00B95
+5617EB6E72F18ACC0C272F14BFFCF9F31FD56A6A0A52C89D417823D21DAF0CA6
+D89D27A582781ADC41C72C4527A299842961F6983161655AABA9E82D6CE55B34
+AEA7550AD1B190F01E1094F175F6EF521929F309F379586BBD56FA8D4EF67D64
+EDFDDC0200C12D4AC25AAE86AD6503C85AC997A6F9BB7AC4BF3E59B0AED3D6AB
+FDDAE4706571EF229A70E42D0767A53AE36CF5DA670B457DBB28D4289DCC4BEE
+19E1B795008401B0DFAA07B2D2563305F0B199390AD516FF937897E9734A0E6E
+C67352230F927171AAFB1E7DE006E605BB29AA4DF02051FED018C987E9310D94
+C03DC3E9CF9FC31826A21CB284815FC96529002FE2B036290D379EE28A3345F6
+10C8175E631F17EAEBAEA33B3A98F6D40759E4C22CAFA8C5E9A3024260CB3053
+66B8F0A41ADB931586CCE66E8E3A2D180DE99C45D004AAF85AA71E5251A4EEE3
+B4BD15CF1DB9E204264F7D081F2A1AE7B1FBED094A3BF4CF93B2BEEE1DBE0010
+7C0B1C65E9A3BA28344F020FC4F335C8A7F72C49E7796E0EEDB86877C6980CAD
+C74D9249867620B0DF9890257709EBF98A455373558E0F4B6C037A91C5498238
+DE5FB0ED0E1112CE1EB7B85FD3158BE5698D9072A3D917B6385F756BC2DE6E34
+66D1AF30BAA157E7B1E7326A09D058513F1CA32DC33A6861F0972B5C83A6CF64
+F2877AD23815EF0EAD4B3F8CD8525CB122A821DAAB34F2910DEB5EFF4D6FB9C9
+054101181C1EBAA1586B659571FF73765B3C272682C1DDA439F04D3185F9B759
+164730F7459DAED1053223311500925B8BD7AD7B478C6CFB80139862641AF6B0
+5803D654B4D1CB45ECC65EE887FB2148B46A766D080D740F682D4F4CE86B63D3
+ED23B76ED86D5EE503D1809F4CAAD1B37E8B339429015167767187B863BCDCD5
+D76281932DCB80C0D6DD29AB50EC5EF102B9B0D7E01B5E27B23F48EDD75A1A97
+85B7A66A79A50F08BD1093ADE964146C54E5AEE01EB4E0FC2CB63DD2B3DE5468
+F2C9B4DFBEFEF37E6E6D34A85135ABFE4BAD365B8E0996C2E2236C945198161E
+54BFB21AB1FC1C8D9553BB3694282F415283E901E47659E31C1757740839BC8B
+8B621EB89977C23CE4C5422490050E1929C39EF964AC8F3FC640ACF4276B64AE
+ED37FC4F9765E0EE038B2736195A4EF57F948B157BD06D63AABFA93115FB30B5
+EF7FF9A735A11C7663B44835355E7CAB1333BA294BA40A4BE0CD6B6D83752B93
+814E25963AEE32426206B655CFB0E50905AA39BC24AF176FFDC98E42CBCB14CE
+B388FC6DA4BE036A75023E34E5F33FC09167001921B23E561D6C48459A36D8C3
+4BB01BB2A21D968A6AFC5A43B41CB1659E6D6E841F7906621FB1441817C41ABF
+4026BEDDA88ACE185B653C836324C682A803AA0954932B18BE96CCA169250110
+456FC615AA7978CB35C7D0E8B5055047408A25600AAC0347351165AE80E26D68
+2311181345B4E6A932410EE4F6F86B64135F356692091B8430CFA41B8CD9C8E6
+5CA8FA2998C79C042F0E21CD7E7B4A5B46A04284511E619437CA69071FE6BEFD
+6C30DC866E9EBA08709320CFAD0E829C30EFAD6F28FA13642BC9DC6B6C76BECB
+C208C02338F2024237490112C411BFACE0A7F0FC47043429161F5DADB3182AFA
+8580B838DAB02445C8
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMMI10
+%!PS-AdobeFont-1.1: CMMI10 1.100
+%%CreationDate: 1996 Jul 23 07:53:57
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.100) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMMI10) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle -14.04 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMMI10 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 60 /less put
+dup 62 /greater put
+readonly def
+/FontBBox{-32 -250 1048 750}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
+3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
+532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
+B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
+986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
+D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
+9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
+990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
+6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
+DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
+59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
+D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
+8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
+6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
+1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
+03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
+95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
+74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
+3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
+47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
+AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
+42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
+40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
+B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
+95601766777978D01677B8D19E1B10A078432D2884BB4F7B8C3293B68BB78100
+16724E495064BA0168CC86D413CB48560D6D318357397832F7A858CD82030C7D
+8A4A1919716E8B26AFF8789AAF489EE4E0A88DC477551A87C7DF2856189E4596
+FE015956AFE5CC019F5CA6323A12B763B7B08B92C1A2940D3C566C43729E5482
+63C6DC5E834AEB4DAFB5AE8F0B8931A4687C94D11587B9071C8D81DA14F12776
+53A1985A3EBE37827656BD4635E03F09C3231F906874645E7DB3E59045A59D67
+E745D8487CF73FC50F64060544F624F357BC998A87FBE468DEBB38A09449EBCA
+D041D7C29225ACD16CB8A59E87924D15A9125F064710A6CCCA3AD3103D8FCC94
+CC3571C6F9192774FCFE5BB42A14B27960903144D28BF047BF4C77646EA7BF6F
+440D4EDEB712C63F2E8080419E42D1D58EED685EB5CDD49F80DB6E5553B519FA
+C6A39A093155802F3EC607721F390307E91ECB597ABA60A537E3F8C045BF5DD3
+D88CF6518D37FCD95D2F295D902D617440D23516D962F47750A682A319ACE1
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMR5
+%!PS-AdobeFont-1.1: CMR5 1.00B
+%%CreationDate: 1992 Feb 19 19:55:02
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.00B) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMR5) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle 0 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMR5 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 48 /zero put
+dup 49 /one put
+dup 50 /two put
+dup 51 /three put
+dup 52 /four put
+dup 53 /five put
+dup 54 /six put
+dup 55 /seven put
+dup 56 /eight put
+dup 57 /nine put
+readonly def
+/FontBBox{-341 -250 1304 965}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
+016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
+9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
+D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
+469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
+2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
+87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
+D1F017CE45884D76EF2CB9BC5821FD25365DDEA1F9B0FF4CFF25B8E64D0747A3
+7CAD14E0DBA3E3CA95F10F24B7D5D75451845F1FB7221D7794A860756CFBB3E7
+704A52A22448C34812C3DBEDD41892577AABA7D555E9298C1A0F7DA638078167
+F56E29672683C51CF1C003764A8E7AD9D8ADE77B4983F56FE2D12723AAD8BF36
+682CFBB71B1D12210144D39DD841A971F71DB82AC6CD815987CDCF29ABC3CC96
+5EEBD5D661F452C6E0C74F9ED8D0C5B3755551A172E0FE31EA02344176E32666
+14B6853A1C303A5E818C2E455A6CF8FC9A66DC6E279101D61C523BD9DB8EB82F
+EAF4D7FDF6372383C0794C4568D079648689A199D4B65BA646CF95B7647E4BEC
+83856C27A8EF177B3A686EDA6354FE9573E123C12EC4BA56A7E8BFB8F9B75147
+9DD79A743968F36F7D0D479FA610F0816E6267E5CE327686A5485AB72201525C
+FB3B7CA10E1BF26E44C24E1696CB089CB0055BD692C89B237CF269F77A31DC81
+0F4B75C8400ABCFDCEC6443CD0E81871CD71AA3064ABDE882C4C52322C27FA8B
+41C689F827FB0F8AAF8022CF3C1F41C0B45601190C1328831857CBF9B1E7D1AA
+246117E56D6B7938488055F4E63E2A1C8D57C17D213729C68349FEC2C3466F41
+171E00413D39DF1F67BC15912F30775AFDF7FB3312587E20A68CF77AD3906040
+842D63C45E19278622DD228C18ABDD024DD9613CDC0B109095DB0ADC3A3C0CB5
+AB597D490189EA81239E39202CBC7A829EB9B313A8F962F7879D374ADF529BD0
+5533EF977142F647AD2F5975BA7E340419116099B19ACCCC37C5512767234152
+1FA1D34BFB42341EC7F0071188293F77879FE335F1923220E53C230A66AECD20
+400B677ED8C36D5685E6624A839EB2081E2A8D459FE04F36C7F4414EB906E69D
+AF62CCD41E3DD56DFD24DEEB388FE4CFB90C403482CE0A8F171805632DB5D827
+C05C600EDB8DFF7A3ADFD41BB61447345D052C33B4A4743424EBE4DBBA768019
+3C80C6BE027A1EF300D4B0C1BC9EBB18936A241893571CADBF49424FCA112463
+05802F285EFE60823AD9B3BA72A5447A83ABCF1A419D78F8E02A12D6035C06B3
+72C529F87A20C93546A003313915CE6CC0F817229165922F5FBE462E67E520D2
+795E42A60D34317D323F5616727B8EFC3242DD85D49CA540F32F67995176E695
+C0848F8B80574480FE4A2FAC68EC79BB3E882C51C3949FF99FAE1DE3257AA79B
+8F7A0F2C0CFFF2E5D3575409D9BD15F6C7A3FF8F45207126694F7AC852F712C2
+E830624E60D219E0782B0BE039EA81BFD89B876378DF046D912C7B07D252E0AE
+82CD730405805A82EF1EE4D9416D1AB662EBEE0578A246CF3E9224F6E1DB8109
+E19E079243A634D008ED951D5789D709D6212D4F916C2A69A3B060C6F42C9371
+AFC9D3062B4239252DF6FD5319CC997A2C867AD49717F2D03C099F141C122DE6
+5E845C428971CD7BA46FDC1D5B56E2F93E4650098CE4BA7104F585C0CB4B1A1F
+3AD5224CA6DAD5DA100FB9FF8E5626692C14931784887ED27E399DC764F88E62
+BDA27C3EED5215D19DFD795F5135B82DA97E07346D15D97C816B6CEE666DA6C1
+ABA9527C7D8E2FD9ABD850E3A1A137A78D67A9D8D8073FF7FFFD575BDA2A50A7
+BE2C1CEBD8D83A0DA07A54D126494160054B502A9642587638A8B57FCCFB9906
+6F02999089F53550B94C0137CDD9E94885C0BA0B0EAA47F088ADD19E256D1EA5
+0F1469BA2D538FC56747784C30180A729969B9B87ED617220D63F452A07CE5E1
+177F7073FFF4CC475944ECA2A8A30993C5FE329C4E7FC03A18A09C55EECB0E00
+287EC24AE6AF95C1D262E7A3D5447921CDA568A156EED7D0672F8927FD70FB13
+8FBF5198258E94E5DB9BD70C3C41B98975AF882C020FAEF37290D449AFBCF660
+578BC80B8A981D8F2C08A84ADB2584B86EB343B9843B1CFA6588AE948634D2A5
+E570BB47ED9717A4DB66C53CB4FDC0FDB8CE0C39D4E6185F8995C587EA24F2D4
+BA2CB714C6175027CE68884FE82A4ADC268F63F2527A85324455AE4F3C34DF21
+35DF4947DFD0D01FE9A4FEB6FBFC4991C15E3BF3375A236DD1E7263C4E7936C6
+3DACABEC83E74B0D27C1EF6B8E4B866FEB94A9C1E2EFDB6B13BB6984C899AEE8
+E19A79309749F67A4654FB0FFB8998A90BAE459E4E8B486060418D391E5ABB58
+14F4B26CD44AB3C93E38270B676931B31535A084F3071D57E2934476627E2BC6
+8260B06F74B9FA10593B451E8B39917C45D4762871DFBDA25A07183A34D2D087
+08F3AC6D9AD527BF0A6E7657B0C2E7C9C6B2A958CF75EBF6B6B87F371D1A757E
+A1BFEB22225A3EF4B7CDA05C5FF8F27C9B39AB79F513DBC38040A9AAB61F50BA
+7C7F04E330BB28EA93E2C096408FDE01B14C1D607E5ACD35DCEB4677FD8DEE5F
+BF51F99AC887DA86D60FB49459CDE688BB8B5696719264B0A7CFF82CF38662E9
+ADCB406FDA84A702A9D4AFF10D3F849E51FBABD743640E59031D012674AE2129
+643345263F8FFD53D46BED1D24478D6D1DA608B93627F656279B10E02C58F285
+7EBCF420443FF3A49484469C4B48418D1F6F0ED8FE576403FA4C2B6C094EF0B6
+6903F7EAD020717ABF0134119AB0FB4AE6CE310665108C93A561EDB55B2621C9
+B5C6AFC0DA32A8E905748BBC0A48868A44BA6B282381884D18547C39C76F9629
+EAB226053D194D2863893FF42A8C0888DBEA3372173F971A7D7E8085CF2B485E
+092FCFC963A2EED088D904F40ADAE6E84B646FEB8C15F1C36E825922CC215AAE
+9E92E2CC41E19F59595DB56D91C2010182C3468AB5A63D0352FA3E3F6C43395A
+6194A081D17DF4D07682FF94307584A10744B57E4B72BF01A3A2FEFFD1EBAE23
+065143B7FCDB7ACD763A4F2DCE6A07FDBB7B255B22BF832CE9F6056D372FD734
+9B8B7CEC3BC2F6B1745EF6BC7B11BA3C22701068E3E719B3B1BBAC18A0EF0FEB
+4DBF5F04D73F71B4C23D90085E8DB9EF752F045AFDEDA8475EBE88F3D32D58AA
+580B51E5B64940015C045A21076DB601EAEB45F321A0D813CE0BA265722DEABB
+91DDD73E44ADE775ADC61FF0C0C11E81C1B9E953D99D9D970703357489B3888C
+0FC5370CC3F371C6340CBD82043C518641A87B468D286D1FC905846DAD200495
+B8842C99CFBEC3F083759A004C1C591402BCCD998D2A2CEDAB519F17206A7B35
+663560F2C021B2EE74C7C6649102EBC36E7CAC9FE20B7F05504E2F31E6ED5E29
+3DE5CC5449471DE95B6A055AE23671692B553C55AA346C12C1766C9D541504C2
+B0007C137E814B5DF0030C5AEAFEC96303D95871EC29A806F795AD16BCD41288
+0C330CDFD29723D8FE9406FE1A6D1C06C237C7C885AA8058E2B75DD3CD7C9E4B
+9497AFAD71618A274393DC365DB092C59079E16B9B2E3D60140BC6A3EA760D33
+5BC1637E4DFBF328EAB77F
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMSY10
+%!PS-AdobeFont-1.1: CMSY10 1.0
+%%CreationDate: 1991 Aug 15 07:20:57
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.0) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMSY10) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle -14.035 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMSY10 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 15 /bullet put
+readonly def
+/FontBBox{-29 -960 1116 775}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
+7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
+A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
+E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
+221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
+27D1663E0B62F461F6E40A5D6676D1D12B51E641C1D4E8E2771864FC104F8CBF
+5B78EC1D88228725F1C453A678F58A7E1B7BD7CA700717D288EB8DA1F57C4F09
+0ABF1D42C5DDD0C384C7E22F8F8047BE1D4C1CC8E33368FB1AC82B4E96146730
+DE3302B2E6B819CB6AE455B1AF3187FFE8071AA57EF8A6616B9CB7941D44EC7A
+71A7BB3DF755178D7D2E4BB69859EFA4BBC30BD6BB1531133FD4D9438FF99F09
+4ECC068A324D75B5F696B8688EEB2F17E5ED34CCD6D047A4E3806D000C199D7C
+515DB70A8D4F6146FE068DC1E5DE8BC5703711DA090312BA3FC00A08C453C609
+C627A8BECD6E1FA14A3B02476E90AAD8B4700C400380BC9AFFBF7847EB28661B
+9DC3AA0F44C533F2E07DCC4DE19D367BF223E33DC321D0247A0E6EF6ABC8FA52
+15AE044094EF678A8726CD7C011F02BFF8AB6EAEEE391AD837120823BED0B5D8
+F8B15245377871A64F78378BB4330149D6941F7A86FBFFC49B93C94155F5FA7D
+F22E7214511C0A92693F4CDBF38411651540572F2DD70D924AE0F18E1CD581F3
+C871399127FF5D07A868885B5FF7CDEB50B8323B2533DEF8DC973B1AE84FA0A2
+
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMTT10
+%!PS-AdobeFont-1.1: CMTT10 1.00B
+%%CreationDate: 1992 Apr 26 10:42:42
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.00B) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMTT10) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle 0 def
+/isFixedPitch true def
+end readonly def
+/FontName /CMTT10 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 40 /parenleft put
+dup 41 /parenright put
+dup 45 /hyphen put
+dup 46 /period put
+dup 47 /slash put
+dup 48 /zero put
+dup 51 /three put
+dup 58 /colon put
+dup 65 /A put
+dup 66 /B put
+dup 67 /C put
+dup 68 /D put
+dup 69 /E put
+dup 70 /F put
+dup 72 /H put
+dup 73 /I put
+dup 77 /M put
+dup 78 /N put
+dup 79 /O put
+dup 80 /P put
+dup 81 /Q put
+dup 82 /R put
+dup 83 /S put
+dup 85 /U put
+dup 91 /bracketleft put
+dup 93 /bracketright put
+dup 97 /a put
+dup 98 /b put
+dup 99 /c put
+dup 100 /d put
+dup 101 /e put
+dup 102 /f put
+dup 103 /g put
+dup 104 /h put
+dup 105 /i put
+dup 107 /k put
+dup 108 /l put
+dup 109 /m put
+dup 110 /n put
+dup 111 /o put
+dup 112 /p put
+dup 113 /q put
+dup 114 /r put
+dup 115 /s put
+dup 116 /t put
+dup 117 /u put
+dup 118 /v put
+dup 119 /w put
+dup 121 /y put
+dup 122 /z put
+readonly def
+/FontBBox{-4 -235 731 800}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
+016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
+9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
+D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
+469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
+2BDBF16FBC7512FAA308A093FE5F00F963068B8232429ED8B7CF6A3D879A2D19
+38DD5C4467F9DD8C5D1A2000B3A6BF2F25629BAEC199AE8BD4BA6ED9BBF7DABF
+D0E153BAB1C17900D4FCE209622ACD19E7C74C2807D0397357ED07AB460D5204
+EB3A45B7AC4D106B7303AD8348853032A745F417943F9B4FED652B835AA49727
+A8B4117AFF1D4BCE831EB510B6851796D0BE6982B76620CB3CE0C22CACDD4593
+F244C14EEC0E5A7C4AC42392F81C01BC4257FE12AF33F4BFEA9108FF11CF9714
+4DD6EC70A2C4C1E4F328A1EB25E43525FB1E16C07E28CC359DF61F426B7D41EA
+6A0C84DD63275395A503AAE908E1C82D389FD12A21E86999799E7F24A994472E
+A10EAE77096709BE0D11AAD24A30D96E15A51D720AFB3B10D2E0AC8DC1A1204B
+E8725E00D7E3A96F9978BC19377034D93D080C4391E579C34FF9FC2379CB119F
+1E5BBEA91AE20F343C6420BE1E2BD0636B04FCCC0BEE0DC2D56D66F06DB22438
+452822CBEAF03EE9EAA8398F276EC0D92A7FB978C17805DB2F4A7DFBA56FD6AF
+8670EB364F01DE8FCAFBAF657D68C3A03112915736CEABAA8BA5C0AC25288369
+5D49BD891FABEFE8699A0AE3ED85B48ACB22229E15623399C93DE7D935734ADA
+DA7A1462C111D44AD53EA35B57E5D0B5FC0B481820E43222DB8EFCD5D30E15F9
+BA304FA879392EE0BCC0E1A61E74B3A1FC3A3D170218D7244580C7AA0DC65D19
+741FA5FE6F8CBF60250ACC27454BBF0897CA4B909C83A56672958752ED4B5E79
+E18660764F155E86F09EFA9F7685F2F5027EC85A775287B30E2069DE4E4D5712
+E7D033481A53A2702BA7542C71062173039030CF28D8B9C63B5596A9B42B33E7
+D922944A38713383D3648A4AF160A3B0C8F3379BA4372BE2E7EA49AABA75AEEE
+C5DDE1D8BF68483C3D21271280ABB91D54CC819680322EAB72E1250A760BC8DC
+FF798F2ABFC4F3539392985C4CB324B00072295FC160818BB0355FDC4F12E39B
+984826450553E3D271F03D8DC2D12A92A4D32034FD16DA13B876DF448467B625
+2BA3AEEEC60550844F5300D7FDCBE636D5951411C6F46CF31F03D3517A96309E
+02D0DDC6DFB8FFBAAE1AB34DAAFD32AA716301301AF68F407CFAC4FF8CAF758C
+C62A6765AB1CD0F3EDD3C556A10E94426AEF2D5B015C5196CE77FA94318AC24F
+D38FC8226E90A7D87B727184CE12331FDBB793ABA098017DA84073BB69A2C05A
+37469032C36588D4CE517C4161BF85BFE4B9542536FC0AE5FA535C611B45D8C9
+7A58AE692B886EDB2B1713301D0DB6701D0563A37B8E221920B53CCE01D16D53
+63631A8F7B33AFA0F30A90BF611C4DC39A9DCB4FCF0FF42E721925F0BC60BF16
+E56824DC5E93A63A391CFCE41C5F80AEE98A412E1FB82ADC61BAA39407C35FC6
+931CB24086749CFF46E389590D3B3D2583A54E812BE9298B58FC919FA109D406
+AFB5793640A22B15E6DAC8C7C7FAAC27F147412F2240E3EFBF4C675D6553F07F
+F81168EB8491F56726DDBEB8890ECBA12DE954F3317AE4A671DE95B95A6D148B
+618480E1BCB8EAEBFB0D1492A2793A5E32835F727A43117E7EDA98DD054ED263
+C8B7BF73F7F49E35A45DE9682129AD6331B66C515277B92227DC67E234BD2371
+23CFBA6B8296ACB49EA77AFFD3DE9533A55DC6ECC05A6B6B15F30CD5BCFF8C84
+A719A09266D8E29B8F98CCC9D5E154937668F3F3D47C1F48BFAE0EA0AEE1984C
+590DB7EE142C27DDE1E0C73EEEC8DB5B30E10C4B48D5DED1EAB0B5B312D29B3B
+C01CEAF07C5457A0F2D3E717DFA4C814814096BC9405B557D70D2AA4EACF4E9B
+12CE61D83C3B129B130E47B5AA0F1EB35A668DE8290496D1AB8636F9FA8EA7D1
+43FDF8A127422270741610EA0298D4A49321702C0B2D142F654A9CAC3C9A9B86
+DFDD55DB5693C7575B892E5EF584AA849F09A182F0DEEEB596F45196B32B40A6
+58190A5BC59AEF87BD45C90F85BACCE9F6F333BF2CA244370D43F5E2B9EE5862
+B0856289C99A84F86D71CBF9B08E27F17471ABF41B43170DBFCF1D0C9AAFC697
+AC25341C2054F4B93B227BF43B920C47D7F0687D128FBC8D035EB7F463496BB3
+4CEF32A71ECFB2C8B68A9E2DE35CC6640A6BECCE9F7494E265F09D622700006F
+5BAC0AFF232B2396ABA4D251375A40A0ED544776A9EEFEED383ABA90462404AB
+CED4C251763C1C865255521BDCC57B727805A0C9EC17D5D8CD111485EC27D8FF
+37BA1759D529A9D0D00E527DE5348D85C3BD15A953831BF8114710A1C80C2ABA
+A91B08285BB26497589A44C836CCA5401095964ACE75AA73B8FE259D1B8D7BD4
+F6F874735A17B1CCDD57F549ECE3F7CF4F6136B4B548F9D5AB21179B57A1852A
+BF04DAD363BF4B957BD9E59B3963750357109E5DCF0338C1B3B7213B26200AEB
+6D96E75A84C5A1543F9570024FDC6161342C5DB254F446F83F62785F90D43E67
+A61D6242685D6BC3DD781C85849C3E67769565390F4A046B9DE2339A74F0F2E2
+D137019FDCBE2D06BB81A4E6DC3F975C40C411B18186D7F3E32E2472818ED1EE
+F08B4F1A8D582ABEC49227B37EC9393F92C4C4BE087E1E1C84F1C9245C50F880
+CCF40533CC4976B328B7045E1E609CB92368C1E784750353BA5CCB11E428CF3E
+6067D72232C62A94385521ED3C058B5BD9FE7181A593B9C0D72886101EAAA760
+254329AD74B247330763406B73EBF3EE908416E89496B9776116E8DEC5BA26B8
+BFFFC4CBF9573016B632F4C63BE4FB434A529FA7E54266E9EFE754B514AD1C2A
+806F4C47392F066002C1001BA78C69772528C2C7AD3E58E4ADAF447BA0F1EC28
+3C31FE5D875DC3DEE0E642B57E3949D04E9567C5720179AC620991AC26E5809C
+5102458518F9ECBD3C477B3D65EDED2C47AA42190E9D909651B501418C68FA4A
+91AFF5755594242D8E00CD1F9967213B1A251E3B8AA4BDD078C399DF004448B0
+E84D2F6F4A45A7F47EC9280C2CF456AE5081918A7129860A703AB8F0278DF601
+1F6174C9C2E7758F1AAB6EB0747679125B4DD1287D690782DD72F79E75FB3D5D
+228AD9AB66B1EDEBA0684560FAE44BFAD0CED5B33848ED06C9984FE21E905DCF
+166FB74EACDDF81C60C8C92FF02F62DBBE0F478B902EC79F0CEF73D367DC44F3
+677EE05A28F780965EBDD1C223DBAF239318412023E7EDD382D7381D05905171
+35E941CAEAFD3ED3C0AA4949439AB55854691C1DAF2161F1F61B660B3F3E1FE5
+C85ECEE8670C5A39AC86AD26862141D587CBC2E5D7566D0B1987FEE08E6BD8F5
+3DF3F9B954B83E1A5FBFBF9AE5533712CAE47127E89E8DFBF6CDD5F4BA775DE8
+BAE5B726D53AE6A04A78A965B1BBC7C9CFD659ED3A048F617DE29D55F5283C6D
+42601B43B2E1F0D36F3BE0FCED5E51CA8BED531CDD0AE630D15CB1EF6AC5CCCE
+1CB2E713B4F9A34FDD9FFE3231F838B791E1738FBB1B2C3EBDB66D9A99DB9C30
+D453D607C6B6D40C5A3EA9133FB7DC596E90ED7983F21FB696386AB2AF93A81B
+83C2A00CBAB5A46B58C6BBBA975A46E59EBD49934A7BF9F0752E2354A6BF1B53
+45A48B455C585C76A7B35A1CB946A9565703A09FAAE98ABB939A227F4ABD16EC
+35DA81C2A6D6C95971CE13AA85F0DD1F2D7EC20C05ADC6D27F17A75F2C495D44
+A44D15CA48C1E34DF80F8BE1DDAE8B0CF5E5398C9A6A0FE0646F762A72EDB749
+EF987B15B684E9A24A544C1B7A9F21B3554251C3FCFD29F706BDE5683892FFD0
+5A2506CA5185508EED69406438F58A90E4B06DB8B7AE3E8CEACF44FE3CA8B9CB
+582BDEFC6A1142F1715A00847925B39A9A83A8E6FCCFD8CD3C10385C490B13EA
+CF00DE5F90E7A923DC4E673B38BD19E543BD8B482F98D34BB566E9CE1FAF12CE
+DAC962442CE1A5D1BCA4626186AE4491CFC0578F7250D29112F9CD7CB9B81878
+82B2782EC88EA944E4B592C7E4478A66E4DE8ADE4833CF49AF9BE3FE241FA603
+F77525A3735E7A3E8ED1BAF74030E97ECD0FD4EE8C3253D8C315D1E17E786E35
+A90C541427B05F33BEF45AB2F8D71D7B39FA868BD1B1DFF84A4FAAD3FC8A187A
+8828A3D4EF4C28466661A8659F292EF0EAFE9A90849ED77BF0A7DACBE4051BC1
+E7C0D92531CFEF7E7A984DA72210DC1E6D76376E478910A61366AF6B5CE47F5C
+806FE286902D1C2A52E18897A7E05C5FDFC42BBCFE96A44CCF44610269BE33BB
+7C34CE39AE912C26E5B2A08CE575BA40D8B001039BAA8329E4DDB2CDBE67474F
+DC5EC62E5AD213D4D1C26A700EFCBA5236B9DDBAC96EBE17089DCDAED88C26B4
+FDC234C69E0397B5CDE66FE9328ACE058CA4996F40B19EAF79FC2877160AB074
+A16C10B7F3A3AAB9C678DC0E3866FBA3D2B4BACCAA53D55601F4538332F58408
+D45C1DDFE8271894AFD7E154C67523228F571098C097FB04A4F0EF478C2FC46C
+7D3B6F7D1175B3A4279C19FA66D653AB857769EBA7BF5D6CFD6633A97B219220
+453EC57027BA359A043E4A0709D10CA15D3390306EB7477540AC5B1F017327DD
+748FACB4297B75E737A8D7EE542E7840818F79CEB4692406E2DCF971DB0FBD4F
+4EA0C8DAEE572A2899241931CDC0DE8E4B9C2BACFE58F7EEEC4A5C57C624EE71
+0979A796CBCFCE23DA425D091D60C2E9700363AAB7A1783710A01056D2A1EB0F
+806DA6F9B4DB0F46007467119643A5888123AB344593DE889CBAD73E7D7C0C85
+A235856320B04E65DAE485B83DE6BD75AAE1B4A667E7E0E769071554DDA7E082
+A3B3E770BC74EE75B45BB45CB359E20ADC7A2678A32E11BC55C5467D2F328DC6
+DF7F064678FBE6398F5B7E61B3701D90F684113F74338AC948076F1680E1B45A
+FE4097C5A82088141CDBE15A7BEB8F1B9F79F650194B66DEA1DD3FCF5B5EF6DA
+CCDB60982E3F38F3B2FCCF1D12281BAAC0EDF6835E5F829142654C6D1C378541
+87CEB91267B16344DF06F05262D3A2B8EE4C3C0803E141F7B01BAC8BBC427FC6
+F3BD14E5AE355BDF1645F5F7DFCB8047224E3605901711BA5427C05741C60B97
+80DEF5BAA91AEF4E1C3562F5B7DF33DFEAF0316E13B1023ACB746CC7F4796D7B
+205D10E126D770E65F23737708F401F87FC61AC0A25147F46FE2FC03524FB62F
+30AE181F0C816FC5B850CE7A910CD1F84D484900482DB32A85EAB7E0F8868864
+B49A383C5975C7DB4FE868E6AF465BBA04EA9B3FC285A1B9D4A5C15B5161F19E
+6331D574F89F38835B77B7ADAF0BE06A24FCFE26C1E737E0C3A459F141D73393
+D705CEC6CB9B025B31CAE121885978C1945AB92B2F60285563497CD08DA61072
+0CBC59FAA77823BE07586527781673873571FF083505DDB222AAAE44EF6562B1
+B30705F97FC655C1C5BA9B3D461A3F79B760FD55A829FEA51DC3A6D978CBE1C6
+72D22AFEDF38B7E5AB455F10F49DF39F8A00A4F946AA676CBF76CBF356C440C6
+A8F9FA571BD222D2D6CA1C105DA9E2A8623E0466CAC01D52F8F9BCC547258C20
+EFF76B9C51B7D84AF994F807F67E2F3131E8D9E0978B79BD74ED228AF408B84C
+86B77FA8D46C1AD2E773D966D82FCD82A07BE7E60C54C872E76B9F913084D4BD
+64F01DD9E51E84857B9FDD33FE55AFE56F51DB4AA2B4AEA13413A7856D69B122
+ECD5BBCBA0465CFEC99912D13B8777070063C8102DED257B3F1BABD5654C939B
+812F263C7394B35DA3BC8FD5A139ECE2126779AA3A88AE65BCD7CC3CBE7516A2
+35800E540ACAD334725004CF887A09145CBC832DED95B02D1273ABB49002EB0C
+D2F73603C119FD46E797ADD3CB9A895D5BBAB3E46927CD09E76AC64ACED91828
+C4D051A4390C86E30D1315F5A98EF2D710F0FD7121EBB85BE5BCDA862E4F9B40
+B5B752A53A45E15D38DF9FF3CBED4971CE1BF16495433632CACE867228290CC7
+BBAFD2BC5246689C266A5032824E0C761D80F2C201C7F61348D1B6D8EC6DD717
+D3CA68EEA68E11AED7CF4740BBD0642BA1D0355333DD6A119288DB5820514A29
+FDF84DD1128FAE00C3BE384016E81F773D513275E227B5A7CF3005C4A4CD0538
+C35590349F2B0045C6614D5CCF18A048F5900A4FB3AFF686211EBB8F9750D5F6
+ECB40C9278BB6AC45BF34D4E243005F8D8C11478A7E72D040CE971F9D07B691D
+6C5BD551FC02512288B6CE9614EBBD8D8EC2D00EA14211FE6B68060955F56B4F
+F8E87CCEE973B39195E7BC7CD43AF9F22A52097642BFDC688D1786B4FD40975A
+0E9BC35CAD7281E64C5CA5825CE30CBB2AA8F98FBEAD59F8B48E07997F844607
+72DE45999AD6CEAC1BC9C78DDA2E587EE1A41C2B6A64CD0E16F9D87EB5A2A98C
+0DCB1F1A6F1AFD723DB98AD1A90E05D50F47924A75AAD8AFCC77812CDFC34C15
+26874C887683BEBFC6B0BF6AE28A0ACD33AEADE122C750AA897923E3D4B6C482
+32F47E25EDA6B0AB41796618980B22DB9B2C69E248D87F574597C5155BAC5AD9
+18093BA787B3F589DB71F134C160126680702DE710C04347FE181A0ABA46BC4F
+F2B56D9A355B0D1EA9CD2B119B2ADC49C26CD4B3F04C013496C221561A9E033F
+34EC89D2BC50304CFF3CD83C25278E13A240AE557B7EE5367268505BA3A88C7C
+C9909606B92F39219703D5F97F86C7759EE0BE2F8F9FC21816640F5FD3C0AF60
+B817306D513C166040902ABDC764A4BF8C80BB6A2C41B821F6BB33D7645C8BDB
+99B7375ADA89DFDCC73C231F3D66F1CD6D0F9B9CBC92E001C000BBE38F3BF41F
+D40CA1FAF4C85174E87C1BB99CE5B3C79A060337CDF8494BAC1912AD41627746
+80C419EE8CEF84BB5D91C27F64A62F0F883415541459C768FF7B99FB5C91FDD1
+C3E5030632FC74E5A45E00D32103FB7DD6205CF6F8B958505ED7D2732745D9A5
+3542C0F285F9BD29206F3E1E08685838EF306E7EEA7E585567D73C9879B4C191
+32F937AACBFC9E32B0334D412107C029F7046A656ED657D3C014EA7BC210A5BF
+C0015B5B4A4459D2DCD1A313F9CEF6C101ED3077B6DAC999DE83A8B6952B8A2B
+EDBF2B0EB98CD2FC3D9CC865502A1F027DF7C107C4F33CB27B3C5D981542ACB5
+CAACA523303CEF1251C7E1BE0EBAF7AA0D31DEEDAE7D8BE947871A21765EAAD9
+E31D3D532DA3D03820B588BDF1699D545DBD78B0A4D61F39A4DF92C639E166E8
+AAEEF7DE6507D6D850B12063DBD71ADC200AE3615C482AB51160BBB60C3E2B3A
+CF829FC607A0ADFCF139B7F1A238203BE530161225EF243DDEEDEE4E03175D98
+E32BB93C499452DF6D02C74F66579E4ACC15016D4B014E046892D662431A612E
+E012D0EDBE201505AD26F0C15D3C579923A653EA737BC20AE9A15D63262B0BB7
+EEEF19823B0F014361C8EF782865ECDF809576859BE93E6975076B618501A2D8
+938B30139ECDB5769131C2D6B4F4F8CA42A6F860F9778D053129AF281452C319
+E3B120F4E69D6E42E358623CBD4FF39B067144002E715EBD18AA595ADEFFA3B5
+0C7EAFE74CA18C7C5AB607687BE274131F0EC6870573EB9E78708F0976C78060
+23AAA01895D2643F0FD7F2E8A67414E1275CEB537A243805E613E4882B053A65
+EA069DC65DFAE2E13AE6CAB68B09F03EB99A03C52E3E8404F2467D9AE08AF5C2
+D9A626DD6EA7ACBCA4F4E8F8537CE31AD06E2067B82BC9104C9B6213A07661F9
+E04CA4CB4CFFE337FC58C3ED9E8988BC929A978C98ADF01B9E787B18D3F46C08
+408CB3E2859218DF2CA266A8F1CA1A9C6A59882E25C30C58B80EB645542B786E
+5611E1C212D1F9E88574A3FA29394B9C0BE052D44ADEBC0271EDC6205C16309D
+1DFBAFCDA34C99DA19EBE824C1B0869D5B4FA00C15BCED1372024258F454A65E
+58A623F1CD44EA19BB03A81D82C6A5431B4D24F4BB86923B54A85A2A15775756
+ED429DE00886A061869F9B680079F98623B4ACB4A2669547AA9851B1FE24C80B
+A6BEDBFE80857950D4A58DD0F16D23B465C41F2B827712028AE09775C83A0EDB
+5472A84FA447C6D4F4F5D318B1CC27CE2FE691766ADE161A521921D93AF63D94
+4DF64E81495055CEEBCD91FD8A0F911E6694150C287C653F7893AB4AC851201C
+E1AD9A72606B5153EC5DF15F36B5400A06AA9BA5D7D1CE397AEE258A311F3554
+99D048D56ECA368EB3D022946A5BCF59FBC881FE6243A8FA77D500578F5866C8
+2E6014AD572B1A210C4D040BE51EEE3174B2AFFBAB565C16EA02B2F30AB11BC3
+613DF7CB28BA99C3E7C2FD21520CD88D03DE4FE23A7D893682EC3BC88BC6F53E
+F9195B015733EA1D03B0F2EFAFB0005850400E77BA0E2D3E5874430AF815CD44
+863C564C706B1D7A6F85202FAB351A10D00BB11C1D2C66CBBB0999EFA10A21E9
+1DB7ACF085CCF8DFF98F0E8E1A2F364222BA4DB7997C2A4F014AA93F1C8F1159
+FA6BC930A6E4E16FD37175C7041BC92DFBE6B673E179CD48F0FD3007D9C81FC7
+0A125AF4FD6ABE8B9D85DF7F1511479D7F65D59BF923BC0CAD51855C1D47DC3B
+C6A8FA2C282BF5F12D7F1B3E8A1172A5827CF3FDB1C3309951F5504C4BEDA808
+DCB5726B2B6D275B351BAD7A3CEA0208582B1F036D18650729F400FE215DEACE
+436DEA3662AF2BB34AF07DC6F9788B964A8B3542EA8EACEB8706E82A3A3B6E26
+3BE2096EFEDF3E47122F4D18B641221561CA5800C2542D1EB58CF2809C9D51A2
+5D303025E5AD7A990DA159F21418CFEA338B0A6568CA733476FD9B5EFCDE0D4E
+7668B9D77F4FE67FABDD53D1D6CFB59A17D58F119F2B7066B761D9A46F91661F
+BE08A60B161D9300C52788CEF1FB42C2E26F5686BF9238D47C125135EB04799C
+6727CD48C4C42962BD8DDE81073E4CB29F5CB751DF6682BA84188C2F089A51EC
+F7DA01F1B6294894AB0586C2F95C828CF24B7441D6088A32CFD3F49DB66E6E66
+C25F62780CDFD71826FB52BABFAE778D1A54500D519763E0B01FD9B83BA96BCB
+E1AC832CF7BBFE10F2C0F034454F4830189267471FB6D9444FE1C72D1D6ED825
+753AA93BC461C3A2978D7FD00ADEB39455C682AB47399742F1A316C6CD4150B3
+CDAF98B58E2C2CA2B44F185A52D9770D30382892120F9BC145CB6EBEA8103567
+1E3845EB5DCE25CB86E82A1A4ED33A9C1D678849BEEC24B0F3DDBCD10FF69E6B
+B8D2E0872877A10E3A1ABDCAB83419866F046ABF32692464936D9B9FD1EF57D2
+BE622FAF9A31EBFD3DDDCD694D37837DEB86E6A2E9392DDB413DC7D534FDFD3F
+B9DC511EE757D17200E95C4D1987822236A6ABAE623FE30130FAC0D347C7D411
+59DA271E3DC826B98D6E06F78579A4CFC24881BFB5A2B2CA8074FBDB57F9C2BD
+9DF7B6AFCFE93BD0406A284DACBE68FB3150587626DFC5F8E606486CB294E935
+50BCA8A833AD1F0FDC458B3505C382D8EF40C3877CAEC3CFA32767B65A011321
+471932DC46BA9018235F0150BCD510CE88841CC4448F72535C29ED4E1BFDEF59
+0B871167CF36576D6F012F8E1F7AC66D51C5224D5873AD691166D59FB964A344
+2ED6EF41234EC21388059B58699546F70EBD6ABB0B80DA5B4639CF25C393C802
+51F2C2863175FE29DA0A6C56DF898DD17128F605E4FDBA7401215A00708DDDD6
+A3B7C64A9D292D1D7D0769E34839B544944CE2377B2AF3E6E1D01D84B38C6E2F
+A05E31768A0A6EBF660AA55A0E96919EA698DC1146729D21ACC84CC26C35E242
+7E35D08CD5178F770D50A1526C40316AA7DECCBA3DEC8511D62FB23B0FD3DBFA
+E4C2E7452BDD3695BC14B1920FA7163F5449D3F99C9D58E7EBA6614C85C7209C
+EC2CBDDCEFEA08CB680E015BF1F3008629A8A65841C8743429431C93F67B8B27
+AC409ACB17ACBE91E1792DE8FD2A3E6443B2780BFC830E721F0E052E27D08336
+6BF5372E00AECD76B68AEF26F7723F898333F709DD81BA69B799776F88A7CD97
+AC867E1DF757C6895274EE1672A3943E182868AC2E2AE2EE021932EA298D808A
+88213182AA877B16D26598D145A6781766591FEB8CA58F398BD3EB52F71E553B
+F33F2FE169875AFEED446F9032303E31BC1AE3D06593A48A2A3DCC91DCF9BC65
+DEB2F8F89F371C81B745FCA2DA62796A7960506F265F3EB1F176D1198A6D2285
+EE4B7135A5305963B7122FC0A4710091C265A4FF583C923914EF447D100477F1
+12072A6FF7BB86434390A6516D59F0BE86AB6ECECA2ADF8DCE74BBB7419619C3
+C0C95E62D09867C1DC68F32BEDEA93FE5E6E51213C7216D25B11403F7647D725
+053437D0ACCFE69516D11A39813C153FE1B2B32FD2C62D55D9A2092534548EF4
+B6ECB57E1EB31349EC7E83C26F9B03E422F12AC09F174B8342CE97C21E77FE59
+EADF43F3EE44E78896F32B812461E78DCDA3F46A223F93F556A7009DC480960C
+B3DF55906D2043C013550B2595FA455AD8057063E9E42DA838E00A8D0E804933
+5BBA7F78775518EAA91DC3ED6DC8F403311A6A16DFBB7C84B5238569C88E6C9C
+5254AC840986480C01CFC10BEBD878F9D9BA646076A63942072AD236F4E5D3A0
+915F34E891F4923AD08DAB821638EB56C35C49F459B31E928BC2E0302853C07A
+0421E3411F8E9B98A56381EA37BA23E1EB9CA2840DE8FCA238AEF3B569BCD8DF
+BE446D5D80075E68F385CA8AD741EA5D46AEC8B10EF56769AC7DAC4444FF3BFE
+DE09EB3C9F58F0E091526D90F284686F912EB5DDF81AEBACA7F8B73EAB8A6B3B
+00E6E98469DE9EA431FB7E7441533DBF0E35DBD472FC66D8FC2CA17AD6AF3862
+E615EDBCF6BCEB7AC6BE52115B9555CF6EED92CE63C339CF4EC178741FD6DBD4
+197DC0B10DD936B8F4554293CA5F98B8FF77C4757E56AECE21AFF959DF217AB6
+3E795AEFF9A051281E66A584A3C814D6EFA3D1AE92DC868CA87C99EA55C19CC0
+FC20460A3291CBB9DE0978D01573A6A89B5E99CACD149D228421817402D546D7
+3A0F42467053BD2237ADAF4FFF1D0BCE89885F808A5DCAB2938C5875AF8FA397
+C432953E030057A514CBE132EAAE4929F10D9F43F2E3EE3C239A29A4C9DF0D4D
+142E2EE1E81D721A953099F008C5FF2ECBEA17C1505AC585C0EE76083944DD07
+26E696CBE28D3A0AE3A7204444DA37D33A0495FEE7EEFA1981446624C0CB6667
+049FDB752E36776C35D5A69BD55FECF8BEFDDD10C6E84A71F492E46DDB44C0B7
+2E90B6B92EAA126D8D5528F4FDF386597B3EA57A53B42F5A82A7BEDD7C9787D8
+6460C74A1B97BC8D82D200A0BEAB4FD843E9457EF88694CB54A05A54688F6143
+6C7CD6CAF8D986F21F9C0E9B768C0A772F7872FDE95B816AEB26D77CCCA0492D
+68FE73806A33B762A290EA65DFC55FC8D29EBA82FBE7C39659954DC1E01E6823
+A74817F529DAF3B1B877DF70B555DE5A5FCF8E2BAC6C132CDA7D9902F431E99E
+311F4A6D6FA6FD7101933C8A4BDF8C543930AE2C7FF2F8194254243B7C51891A
+2651C0DBC04991D8527C5E336ABF9F8716A3F0F4EB4FD96B7233A686060472DE
+A01DB3465B0AD66BF5C362DF4034DC3308F5A258C0AF0FA60050F90572841000
+867B7C2275F5C7FAD8491F40BC189020F4F82BB2551FA8AA1374FE196C203184
+C22557E344BD65CE857244FACD6D7BB7670D2C3BA8209CF90D69188E98E3223A
+C515F0AFC87083494D415EE68C9CA835973F887D310745F32D9F7BD41D3840AE
+0969CB3BEF1E6883250D5A8701250F6EAA84C3FD895312E9C864AF849DC171A4
+58E1A17DC14E8E030CBF0AEFCFDE04E845166D60DDA4017C791ED03BCC74F6C4
+3CED1B988254AE7E2AFE82323E486A31B11F8AC00BFAD4F8234741111E33AB57
+4D7044C9EA23CDF0F7077A2582BA6A63DD545E42E031E247B6E93258C1D6A9C3
+20125E89EFF66D7AFF3FFDE07317543221BDDBEEAF1D483645EFB4845F7B092B
+2E36AB793E640E6B76293513FF52E5288C187F33FFD0152BAD53D1280E0E6F6C
+399AF3C58CEA4C15A23BF54F434079E40CF40A9DAA76BD8CAADC61FB8BEB6B0A
+ECE23EB09F524ABC5B6478FA2F0814AB93425B13A91FF627D1A8965005D3591B
+2011F365168B35595AF92E9ECA2E1BA4E0A18B348BA7225F24D1E9EA322416A3
+472C8B997E489957E0F5BF76E020D433734D65CA92D75D98C62E40C30FCB7B90
+66467D7B287861846EFACBD6639BF6AD61AFBDE855FEE6E4F27C19B72FF40D4A
+F8EE58E8499EABA85E97149B7AFEC9D94BC8CDEC9CD46F8284C2A5B07A537D76
+B06B5B7B89184798E52697472B35644802ED26A9D50B6D1C78DDF3216A7F9155
+5A8A38CFC93A50C559056A8DC28DADB18017F2B9434E91AF9D405A1BFB69E616
+06E60EF0E6771AA898C2F5A34D12B64C96BF316869A200513D4D3894337D83A2
+0665E18C448D368E3C1E52FE874E871A765D116D928EF5DFF4603DC8E6FA15D3
+ABCD21D82B719789426AEFF5A4AEDBC263
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMBX12
+%!PS-AdobeFont-1.1: CMBX12 1.0
+%%CreationDate: 1991 Aug 20 16:34:54
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.0) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMBX12) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Bold) readonly def
+/ItalicAngle 0 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMBX12 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 12 /fi put
+dup 45 /hyphen put
+dup 46 /period put
+dup 49 /one put
+dup 50 /two put
+dup 51 /three put
+dup 52 /four put
+dup 53 /five put
+dup 54 /six put
+dup 58 /colon put
+dup 65 /A put
+dup 66 /B put
+dup 67 /C put
+dup 69 /E put
+dup 70 /F put
+dup 73 /I put
+dup 77 /M put
+dup 78 /N put
+dup 79 /O put
+dup 80 /P put
+dup 82 /R put
+dup 83 /S put
+dup 84 /T put
+dup 87 /W put
+dup 97 /a put
+dup 98 /b put
+dup 99 /c put
+dup 100 /d put
+dup 101 /e put
+dup 102 /f put
+dup 103 /g put
+dup 104 /h put
+dup 105 /i put
+dup 107 /k put
+dup 108 /l put
+dup 109 /m put
+dup 110 /n put
+dup 111 /o put
+dup 112 /p put
+dup 114 /r put
+dup 115 /s put
+dup 116 /t put
+dup 117 /u put
+dup 118 /v put
+dup 119 /w put
+dup 120 /x put
+dup 121 /y put
+dup 122 /z put
+readonly def
+/FontBBox{-53 -251 1139 750}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
+016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
+9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
+D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
+469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
+2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
+B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
+AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
+7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
+20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
+B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
+68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
+D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
+26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
+F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
+77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
+BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
+C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
+30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
+148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
+E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7A71316B2E148D
+E2A1732B3627109EA446CB320EBBE2E78281CDF0890E2E72B6711335857F1E23
+337C75E729701E93D5BEC0630CDC7F4E957233EC09F917E5CA703C7E93841598
+0E73843FC6619DE017C8473A6D1B2BE5142DEBA285B98FA1CC5E64D2ADB981E6
+472971848451A245DDF6AA3B8225E9AC8E4630B0FF32D679EC27ACAD85C6394E
+A6F71023B660EE883D8B676837E9EBA4E42BA8F365433A900F1DC3A9F0E88A26
+32678C5D2145AA309FC027B2EAE4204DD6558390C4B04B1A9A0544E4AEA8BA32
+6A7DBBFCACE482BD877FB7F73AA89D85853CEFD180E410512AAB9CC60AECAC3E
+DA96B0159145ECF95FFEA9700C871861173D390E296DAE1DFA2452F278A3A47A
+A4674CE546C1F3D9ED803083562ABE79FC06C6E5C870AC8A2DB02511E8358ABF
+579AECC38BF4AE5CD67B28807EA96DADF4C99A13109642BAF067667FF0CB197B
+D4D27BA82ACC1BCAF55F4EDDB699A49E6237EDCBC685A9F71088BB192EADE8C6
+7EC198F67F26577D5760DD0F18D8354E253E77DA1DC63989E8FDBEEC26871B02
+7887577F3E9E507F1945600E8FABEECCE7A4B9552522CF1648E4E9151E461AD2
+FEEE98BB8502CF446577E06AE978F786DCE113338ACA0684E0AADE66828CBD7C
+DDD6FFAC06BF9AF847E36437DFC556151E59A47F954BDA55645F8F72E11B8F08
+A30B89AE3C5C958D5B719CE6C3C76B0ED8E7887579B7317DFE26D314DDC392AF
+F793AD11B728822D1CC89F5518A9D2C2A8D142C5870DFC4A1ABB80A570F238B1
+F56527666C7B16FC2DEA2CDB9237E6852A946AD39C743F96CDECD098BCDF4002
+548AA34CF946089904BABACDE41A184B4D93534A5A3E76E6C21EB25FFF0305F4
+CF3D320E090CDD9D622E5609E528E69D10335C38EBB19956C8F12C2FBD477B12
+2A2C7967CF7D145F62658632FF4237178D44489E10E8BBEB1202FB85FF41E11C
+56388F6E83B5EEB1418D6D59200931E32091F47875131965833DE4E2D432E45F
+5F71C4F4B99BE069131C82554AD6D9F2D9E2EC0AA8E43430D97D32D46EE8F9DB
+C20D93A5BE5374F8ADDDCB6313819D2D275507CBB0636286F045F8B291DB13FA
+82751AC607534CFF6C2675E1A876F462E3F4E03C4E6E9AD164FA01337518C1D9
+40A54409260D0107A410FB7E3DC84CE62CBB7D2D1A48509FE24925EE1030183A
+D9F3C2373A1D6B71193602CDEEA13C5FAFDC66666C6B20F4D6051AC96F1C95B5
+2618EB321021E299BA8368B75148624CD602AC893CB23C2274EB538AD51E7823
+DA5C5869FC543AEFB7DBCB196FB0B05129E71BEA507BE6B36D5F3A444E013B27
+C52B240E446477A32F6D33C4CEC41EE8279831F97AEAD2E644652BED801C3AC2
+B6A5FFD6CA83D25E9DDDDC8D32018137C096E3B5FF2068B56974D0B0ABACECEA
+2FFF7F74EFAC5E8A3614127A2E28DE1D4130F2975C44C18D47D2BC87E8E14E1C
+3EF6830A8A6AEF89E78CBF5135DF3C1A0AF67373E6C3FD5E547F988534664C3C
+9EDB2EAD63D4189B73D79A7E763C681A03AD792E77700D36FBC1DD65D2899219
+D745D8E36EA6BC0187C1EFAA1FEA7EC8CB40B16A7E71B476BC91132B230C2F2D
+ADE9D3612FE228350FDFDC35337032673C0A3B8F843E7693AB8B8E4A01DBA041
+278A576C525C368001F247DDEADD78C00EF1462044D6D6E84914C950775C74DF
+C1188C2D68EC59536DCEE2F5771F437F958CDA93AF8A472F0F75B2CE275C1753
+83E5BD3AD0EEDE4ED98BE9349AD2CD53F3107879B66998FDBF79E6B024CF8BC3
+B11CDEE6F2F52B340030995DDCAB5A6971FC9B5138303B8AF13D354A4D652879
+FF73884A13FF95C283D411BF31DF0E64862233C7B9FA715428B3234D1FA3D07C
+193BC66EDAEE3D973B4997990F00401A34BBD963A34FFD03DCA7E40E239CE288
+C9C4C3D71372BA0369F51F81D099BCDA4A8F1363B80E91D7F036F735D2087142
+FECEAEB01814A7F3887C686F39423303BC0E25365F2B2F403558CD9C6DCD5AC2
+DBDE4F06E1495BFC8CB99389C141DD430FCAA3CFF3EAAD04F0767B9D89347257
+C91A7744E1A94D52BCBCC259C599A897C68B674F2274B4E924AB5D71579BFBBB
+56838CA3D86F120F141CD776C36F491FB922D6B367ED77B0466EF45B46B919D5
+B6615BD7A0C6EF3FDFD71627059C9A0439019E619539C5DB43CD3898FE26C76C
+BD14D82E4CEA66C0040A023C82D489AD05D73FD5AB4F956724993C107A1BBCAB
+4F21354685A89202ABDCE5F643DB9B5C2D73F58C73D623F9239F3CFDFEC12B95
+972578B3B35C8D525BA0C941E3BD1B0AC914A3ED956A25F3399F16E13E56AC89
+09BBDEA00F6938629A709AB62F5616A4A1AC26F24B429894EEFAAF980735CBFE
+5AF4AC305D07ECF8FD95E24F98666C45C07E649B713A36683227F8915A3D2B5C
+081BE212EE4DC22A23A03084CB8333022FC77A0BE9E5CAF91A21A75EC4C3517F
+0BC66CC896279085840F0CBD295CE1C18B1CEADFA485BD9FF3E7876A3D667D9C
+41AD9E9E7B02A9BD98AE21AAAE09F49DAF3B6513E8509D012B178E5B2A0DC237
+74390BC9CFCAA2F3531F315A504D82FA7C4542BEDCC52EAC038828AFC224C4A6
+661142123D06F015431C55083A3462EEF9F07670103614D18ACC04F626F5B121
+0060F105EB3D3B66529A93227F8DEF581C0D64850CF1C69766C2091FEFC258AA
+8DAB6423E491645C28C975338EFF094E33190E255B1567E9F24A8F05F3F38516
+ADECD815FFFF1E7DBDCA45338BBD4D70A4F2D36E8942D45591B94C3720AC0093
+4A59857A0E82D1EC60A8101414A04FFF1F489DA483F6A76D86FDC4C56B72F023
+6AE513CC50540C75335365756B3E376574CA2AC208DFD94B753F744101057853
+E99595FDCAE31B026E6AB88F3FC1F9F1E4CA401A2AD4A2A54ACAAA86DBD144D5
+A408289CAFE7A6458778C9AE2994446DFA5A5253AF077CACDBD8F55FCAF070CD
+127BDF75566EB289E9C1BC24AEF4A85FD94803C43962741805C948FF0E88A1F0
+2BFBFFB3E8F262B42FDB21755A2F3209A69197C73608ED9945A6034128800FB6
+AFFED4462F432CB6FC4E4003301344D6C5BE26FDCA99B69A37ADF4DD55234DA1
+D22D9017F65A253BB78BE0F9F9BE8A675500ADD9FA723617429BFF038108032A
+74D084A156226B97ECD738CF3916B3222174C38CB728F9E443FF2B8B20940E62
+0FB2DD9730090EF8C07A6BF48648719430741118E6C292734B9DC17F6A5280B1
+A6F8A6D4FA99B9177CA723CC31D2AA952B6F38229E431E302EFD72BF53B389C8
+CFE66D0AE09B45A3BF99C87FA39FFBA583C2007AE7B7EF7D11F0C1CA68BB086C
+23653593B0C9DDA5291551C2343A6F30AB83ADD4672D08F3371ADCF0BAE7CE07
+87183EF3DC4B01E66ECA238BCF87C6DB69A24CE8E22F0AF3D24224FBED568815
+59E86DCB98964E9A9B975C01E60B0B2F6048D189B102B62B957D89E9F1457F98
+6AEB57CF5907533CE9311A17B8F38979866316EDE542B71B4704273F7F9D6A7B
+34FBEA57984E00E3F39B3EACAE623C39FA49DA5739FA012FD14DF63F05D429EE
+88EFAA80F205E595863D5D7C0275660E769988CEDF36B7976B8C5A36A7B7FA82
+5C4B909E5184E65782B7E4E3EA5F45E9CB3B4FCE2DE9CF3A85A8F1A189B3A7D3
+54D9535C0FE678F8A1CE7F27D946AFCC2CE04BC1996255CB724C4F56D2E9E28E
+90875ECEC4934F51762AB8701A524EBF9D1174C17F3021E3134C723B5F79FA81
+1420DECB9CD0DD3219E3FB86E9AC7A4947C754D713F49A066968899306CF1426
+15FCFAD177E56E81C89F7803C5AC6EAD9EF9A90D77127C75AA4115F81FD20ED6
+CC505D0B4F61CB3F2BE69B5173133ADC4FE7CB2C00EC987794B541836508359F
+1B0B8ED16405BC81AF336E16A1C21C55A46DE0F2FBD2F4ECFFE09F6208D31663
+3E66F6F9712565D43926D9BAE71226CF8DDB323C84151EFCD39D1B121EB9E6A3
+C0DA0F05E78A9AE1BAADE471AA6F5744DE5F4702A1995E52481C8515CA106103
+AE2273576D40C880745E6DDEC93274C14569111FA8647B7F0FAA31812D95BF1B
+51D2D238BB3CFF4E9B9A4BF2A073B17192F0C90B3F16B61A29407ADA993DCB3F
+F27DCD837975831D36EDEF1B42D99C07D988FC8BCD9160AE1C8FD1306AD9B2F6
+D90B8DFE84418B55EC2974C88147A4EC00BC8388B062A1F373136FE1C586D6ED
+F4D6BB547DDA20B9EFBC8E76F3F610B630348043E01C88154341A2E534030ABE
+351E6F1451CD84655E1D62EA48275159A53E4150686DC814A192344DFC44F51A
+D7F6466103764D002059110C44D944EAD409EEA60E00F335311031F1FF029C5E
+6C5DC59F744A96A3DE2EF7BC706C4D4C97882E5137A03DB9A065CD47DAABECF1
+1863C22AA8B96AC4CAABFB504782EF06879CA0161050DE0E7C5E7A3F30CCB556
+06491D64173E7FBA6DF7B9D0C23B79003071AD50243A526A3B2E68E628917805
+8C939FD4F257225F851EDF8BA65CC45D8886F87D10369B45B6D5CA5E4F4B4B4F
+8DAE0DBC5D0978E709F6E589DE3ACDF5A04A111E49C03414F178B265CAB78D27
+B1B8AC2620DD427F303B8A92E563C06DD64486C480CB56870ED291011EE2D9BC
+E0A06484262E275B900F76D5A73B30C34253F424441A358F0049DD108293806B
+5817982E4FCC10366DBA81E9A9E1309F8916A8D6E64D859BF6E1F634E9889175
+75C66473C460DFDA4AC5B4DDF6D74CA7315CED8B457BC9418F9355E407412973
+DA276E9A704A49E2DF424D327C3B56FCAB10602361BCC2240D9EFB1ECEE5C0BA
+E8C203C48C71D50AE37B2633B556D8BD09897A5FDD17A3C0A176E783149A349D
+3B8321A1123CAD33465401AFD81516C5993417162C37620605AC6B0B50D5F0BE
+11D7E0B65E12A3B8F9F54B3ED9CC5E852CF9E10637C160CF73F1FEF5C08A45B8
+77038E3D469AB7D96F8259E9C2F6190044EDB2F23E8CCBBCA8870F891023DFA4
+A9AD205C0E6A6F54A8D44ECDDEDADE68699415E09A3008AE0A73A92405592716
+3E2235B09394CCADD3BB6B9E9BBB10AB49D23BC85050E9ABB961310EC7CC401F
+15E846F43AD767C399657444483F759EF564940D6AC5C196289F07098D382614
+B791EC391D700403FCA7C9366CD632320B022EBC4DA97506262F5270864BE529
+473E6E7C26261FB542A72591B4F8D68186F286C003D50B2FAD125250F07D9389
+B04F4DC486C9CA8F74C0D39BC8F625AB9EDC4E009310D112D6BDD4080DCC08F0
+77E305C9A89F778A12B3EBF620F23B4F5ECF27B010484DEB98E86F61D3B6315A
+623F6EC8671E0BCEF8C94651E4AC73D46A02E7428F5FDA0524C60A6A141AA9E4
+AE6466E01D71F7B70DF7BEDD3BB3CE0EDA22FCAAC2656E2B1F3195F30E052601
+8AB2C1EB8DCC6243489E0386986BDAC52DD4285CC73BDDB237AC49CA1D6B311B
+D92894490E356195516CEBA3A8BD4EE66453A635E69FD85CDADEAA372377DA27
+1256839700613442E7FC9F4D39C6BA43BC0CD023AA35C6384ED9D81A45F375DA
+FA292CA9C09FAF00515AEE357333AF36D072C8503149E53CCFDD8DE5229C0977
+5911A6CC0917818DC1509BAF5E02DF4BB51CE17AC2A68BA13098FC1E52D2C916
+8BB06A487E6E957FEFB832DBB32216EF44A86F80A86502A02FBEC6756EEB75FF
+9A50F161011D0D61757C5F75D472D43D520C48D256D24AB6CE58E61247C9A7AA
+4F5BA7592CD326511C47BBFA91B9977EFDEC57DE2082209D98CC09CBC80007BD
+959B9A794A71322F1E5A6DDDA7ACAC4BC164183B6A40D75B08B7F7B2498929D9
+E21DA90054CD028F9920453AAC1293F51DF7621C7B71915BC5678F073A7048A1
+D88EE469C7CCB01FBF609AB7CFAC0C316389748349FE9EADA98B7B144A3F5A2E
+FDFE51EB89899A96DE4BF4130B1FFE07AB429289B3928618FFFCBF2BA7EB6C3E
+F652494CABC0D7489DDE0450888D8690BEDA8D92D6B18AA7E27A2A91B27EC3EF
+B61F913CF7431637A31100D69D8CEB9374C9B46371CC7FA9C4DF97C071D23C74
+D2FD060728B842AF990F0B6A62485F7611C35147AB8C776F5644BCD7A3F757F5
+165E0A109CB1C7E5C8992037B28366FFBC73F7AE38373D02E4B0A1187B9EEC56
+1139E17B050CBB1D553BB7D33815AD090AB006BA626B545652D467BA707F4565
+44B0DE76C5EE99DF5E58CC2F8BD705033BB7650D5BF069BBEC4D8C4AA3CE103A
+19ADBF9CCD6B2A94A3C665465764BD39D0A498AB1550E47847719E1C3A7C80CD
+50A917B872F567DB838588BA5DA09060306C564592A2F7E87B25BFB8EE6B5220
+541C6584928F26DC95E40676A04E4193F2D5E7800CEF820DF7D271F3B504DD02
+6CB5E884501EB8C84C86A785EFE4F49CE28DCD03E1CF61EF191FA7CC26BEBC52
+EC21AA776D77992C5A416A59C326FF88B3F56D411B9C819E3BA2A4003E4E633D
+FF256C1EC4330EC94A3D656D58D812777FCDC2588FE5A57858C0A5541A5D64AA
+E85A0C1F295A217D483B4E271BE300534BB864BF89694AFAE93F91BB7698740A
+FF1A478EBFD455B90D6522C54815831A142AF0CDE62F87FAD2ADAAE87B68D01D
+02723B79F45B630D432A71D6665B3CEB71E41C3D1473AA1A978FFD872A64CA4B
+15851A8E3814B086E4F4171D248A0C267ABB0794E16AA9DF338327FD9852B6D8
+2362756BB74EA78FE14578568C55BEC33EED382A76215C1DB9C12EC7F92B55D5
+8F5CABE21E2E3271B4F6E100D4E6CCA7053030B200B6EE02766B0BEF62D9E39F
+8D22424AEBA7DE170A262E5F48BD81031B27D03873D280E2685B9A259BC1B7A0
+01AA8C540702026003B2FCB9F52785B6AA04E74ECE6917D861B4BAE1ECD7A24B
+BA200311AEDD04CED9752439DFBC52DA3344FF7E8086D68D6050EA6E42C76758
+5722A880DBB174C9AAAAA3FF303482EFE9ABFC1628FC388DB62D9AD43C745035
+CD2BA0AE8DA3C179E68E843F8B6CB9995347B05E1956AF66A9E7C47122DEAB34
+61A67407EBFF9F92D11339288C7AA9F036DA200AEE7AF77F3B14BA4F8BB57F56
+8C902D6BD23B129AA5A56FA508AD6D76FD0BCA7B182841059823105384E24469
+8A77C1D58A4F9654E144D363FAA7534C76F3C77F4E4838B379D57D903E78F5A4
+29EC3CB7E48F6DB22E080ACD2B5E8741FFC2D571FF7730670FC059DBAE9A9318
+CA2CB3FDEAE67F229BEEA6F53F7F345744A5E64ADF3E082F4C0F2599BCE2C70D
+730B077F907A6F1DFF802EF7C044D3D6F75125F887EEF4B9A3B1C6C8B024AE22
+7B614EE46D98234C03C376323A1E91CA76DDDD25C900597D5C2EBDE28843DF23
+CBCBA42623EBC28BC5E96DE84708AF3008F7E6EF9544D6CAA126400A9C81262F
+B242A899322494B18DC66AE5CAC434E665723EDC5073BC3946DFB1B18290C9CA
+B86D8A618E1E0E8BADEC2520D9A592DAAE336177E40AB7349AA782B7B0A02D10
+0227EF85C279AD0F6609DB03318797B3014ED6B66BC3BC29091CC0F05E686787
+8FEF48EBCF7AEC479ECF214AF30137C4533DD4F4501294905AD43DAC7A61C62D
+797B7748B35B619731A26E6B9183C970E49AA21E02368A1CCF55BF94BF9C0227
+DC94F363A90DD40E116B4CE2E03BD06BFBAA694D3F5C3ACB1CC36BDA65531348
+A1A583360EAA107D105A65117D517CF08C2777DBBD5702BAB4BAB6556EFAC16B
+B8F70139BC8FC7F27ACFF69CDA879A198FE099162CC085801DDBC85FA1B03CE4
+56DA33EF8D841C810DCE6428DFAFE15BEB06CC551A332238DC6304314DBAD5BC
+BB540BADB98762F39BADCF9A1EDA581E26BC1DB85D460AA444BA6C4111ADC274
+27A31066396C780E566D24745C802A4FCEBDA85B235C591BBA9D02A28C37FC82
+F046FCAD79E12C653C9E9ABE19D85D6CBFE993FF9D625894141149785B373AB1
+04D26D58FE3D5BF744105863F39893F36F3AF48F8630CC5B8B71857C6E2E6A90
+68E20CD0461F27B6E83757FB2AD4973C5F451D16ACCAA32B113B01F032F0B123
+0B500970D9DE145293E70E326425BA789FD3B9DF66974CD453DD7DFF19A704CC
+57A1563D5DB25E578DE3E12C31B8E252032533EE0C0ACEE97B296D7B168D4610
+DB511A442E3C15730DBC6638315F24EFB8ECBF155CD1F34B275007AF9D3DB8F8
+AD0435D798CA69DC5C57B3654EF5B6B593168D951CA2D02BD35032C16CFD6E74
+DDC64DEF19500F21B0E80F06003CE76456A6F699D61AFC3FEBC4771D11A276BA
+FD6DEDCFDA83CE5B0588FC99283D90745DE451CEABB58984298FC8CAC5807B0F
+136ACFFF8CD3AB096D615CEFC2801962A31476982F240587D7CBED18B75420A1
+594D113BDE4FC29FA1471637E9E213AE0D99F28AB6F39BDAFA9F2380BA259552
+B0F8EBDDF2DDC96BE7DDE0A08393FB1C773FAAA0DEF3355D18E849428EBA1A7D
+490F4FD42CC338231891FB775B96D21DBAC6CDE1C8231C9936F56307A54B39EE
+1099C22FD1A3EA57362073582887C70443D238DAEE12326E642627A65F47F703
+C987D1230B5886132644E3FE3D41BA4A8062A802F749EA148043B95CCB16128C
+1F86DCE7C1466D6C1649ABF19F19770C52574B8814EC176E381DAFBBA070F313
+7E4F226B8D92511092E9EB246C8687E9CE98AFDCC52E255EE3521BB72BECEAF6
+74803F9ECB450E5DA00F5E91390A451D68E4968FAE336211BE84581C0626EB31
+08BB987A29399668F6BF527560C0FF44540F26C3FCBDFC742DE51343CFDA7380
+C49B7FA5284021D0224F7DF4528946AD5D419E5D938201F79F333113A99C1138
+57937DF1E52284538DAFB23FCD518EB205B04BE0E27F42E996F2076DAEBEBBC5
+67E9B8BDB2A9A6EF233C773D279BEAC7915AFE42796FB447C00CB9FDED596030
+196100E7992EBF2CD5C56370C0FFA871B9CA3824B926B7EFF0B2BA02E8336E44
+F6224B7AA4BBAEF34B9B1C79D6415CA9C4F140ADBA497E493E9B172C197E2932
+DA0015953C9A4DA5188D02666A53957D921FB2CAB0E55F03D345C9472B2778B6
+C4C135EE80463C24A36828F44C17D4285DE17B207B85C3E9B350DDA2844EBAA5
+7BDEFC182517E1F07A808AB80516FA0413F1F7B424A3BE9911A362BF5862F12F
+9C2BC1CF40F04D675B358E438544949ADC064BF0226D6C25D04AC7099F178F52
+C815F2A36D2519A006458A1F35B7093395F3195B0BC07C55BA5877E21F1C4F30
+AF7AA8545E5B571710A290BE4FF0828A1491562F3009C87497A3A21080C749C2
+C0C548D7F5FFF71888C99C33B782B950E3E393656B0AEDD6F027E17D463DEA2D
+37D5F5C82AA211BCC5A288ACBDF19BA52241B340563B75207E935CCDFF1CB529
+46031D3ED5FC67FCB032111BAEC5D238C3AB4A265BCBD365FF6D2441D8303B02
+D34D079918E2F24EBAE93A8DC2F97E4807D7345129FF813C0D95E85BF3278F90
+2CE0408768566B6E32251F775F211EEC544316AC18A334446EBD4CBE6D644F3C
+9DE8C20C46F50477C60D55B38341338C22F152A372A158CF6539E427382CB2D6
+6425F138A9D63B36DFF1C22B8F6123D6441A7F1DE48A8864245994C16FC127FE
+54D2AC827EC818B1557E43AB499103DC823F8948D590010FE7F37AD98A0A9A87
+A7EF7724F45D052BAFBBD530798B437EC53AD673A9E77C476128F80DC994C090
+C01EA1F037A4F5BBD4E6356D8C0F4559FDE29FFF0A3704919A4C9E181519D06E
+D6F137BCDEDB42D5CC451ADE5028436C22274E7C4FCACDE97C3AA14D3623A68E
+0083BE2C65674DAA4E41A22BEE481D2FA9302A099A467EDCF067CB6511BFD3B2
+B643860B7BF4E9BD360737A83197EB0709076F6202B44687A0C77D55D8AD1F26
+E5F3181417AE6A9DD1E704F2C39EC7196FA2F95F4F0DDDFDA0CB14B31DF2B0EB
+8A16DC70FE3F67F182120DCCDE255FBDD48B520C1BAC9E0A2F2F2263ABF0B752
+56359FC96E9A369C705326EF0E1017BE1ED9AB5AE1E5AC7CE9B5EAA982ADAA0E
+6F27D33CB933364FB59DE771AD036D5EC775A87CAD8C67EA3BAF46574976C3AB
+CE69826EA5ECB2E6780A40D1A89AA5B0FB01C42332E6139D02B3D2271B1F60E8
+0E31849A35A5887EAD2F05F5834A1E1426DA05941EB3E4486D3A7D3C3E0EDF61
+1A3902C642392CDBC6CF09A5609D6820D786DECBCA66A0ED9077B50A47A7931B
+7953A9664F6C781A3E162CE1CBB092B89C6A779C980B44E9A95CB683F16EF3BF
+26639FBB73BBDE8534CCB1742CFBE2FFA980B0B9AE318C05433BDB0C95038C99
+C988CFF5887AD955C7CDB6AA4B20F540397BA22B5B2E14A4F929CCA376407E0B
+916A51E580D7A5616C9AE9A51B7F04D2ABBC8A7D61F5DD68A7694AA90432E7F7
+BA0988019C69012048C26C3A74F84DDE06E4152BF84E01A99292F4E340DDD619
+AC731E9875C76CF68D75AD82854D61610B3DD0D4E1026DECD322BC13AB11D703
+0A12660C3D3B4FF570BFFC0BA38453F60733B45FC9CAEDFF68B6B4D305D656E5
+41F609B4D2432CA32AB422E8CE23314D9A831FB3B916D71F8C2FCA4290DF1D78
+2316DBBD3F3F24CEBEC231734B2327A4CA38A922244631338E2A646B2073487D
+4FB0114A3445657DDA73165B006FFA70D129BFF0215BA7C7D8358F98C2AF7D9A
+BE6E95383C6B2A001242735172ADA3
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMTI10
+%!PS-AdobeFont-1.1: CMTI10 1.00B
+%%CreationDate: 1992 Feb 19 19:56:16
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.00B) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMTI10) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle -14.04 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMTI10 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 12 /fi put
+dup 44 /comma put
+dup 45 /hyphen put
+dup 58 /colon put
+dup 65 /A put
+dup 67 /C put
+dup 68 /D put
+dup 69 /E put
+dup 73 /I put
+dup 77 /M put
+dup 78 /N put
+dup 80 /P put
+dup 83 /S put
+dup 97 /a put
+dup 98 /b put
+dup 99 /c put
+dup 100 /d put
+dup 101 /e put
+dup 102 /f put
+dup 103 /g put
+dup 104 /h put
+dup 105 /i put
+dup 107 /k put
+dup 108 /l put
+dup 109 /m put
+dup 110 /n put
+dup 111 /o put
+dup 112 /p put
+dup 114 /r put
+dup 115 /s put
+dup 116 /t put
+dup 117 /u put
+dup 118 /v put
+dup 119 /w put
+dup 121 /y put
+dup 122 /z put
+readonly def
+/FontBBox{-163 -250 1146 969}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
+3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
+532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
+B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
+986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
+D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
+9E3948FFB0B4E70F212EC976D65099D84E0D37A7A771C3101D6AD26A0513378F
+21EC3643079EECE0C9AB54B4772E5DCA82D0D4ACC7F42FB493AA04A3BF4A1BD6
+06ECE186315DBE9CFDCB1A0303E8D3E83027CD3AFA8F0BD466A8E8CA0E7164CF
+55B332FAD43482748DD4A1CB3F40CB1F5E67192B8216A0D8FE30F9F05BF016F5
+B5CC130A4B0796EE065495422FBA55BEE9BFD99D04464D987AC4D237C208FA86
+0B112E55CE7B3782A34BC22E3DE31755D9AFF19E490C8E43B85E17ECE87FA8B9
+1485831624D24F37C39BF9972D74E6EC4784727AC00B9C4A3AD3DA1C22BD6961
+7E0ADAF55422F22ACA5E4DCD4DF9FCD187A566B7FB661D0530454D0DD6C6C50A
+7A3875C6CBF8EC7769F32A1F3F7FC1C072BADEC97794D4E90E0035282A170402
+356E5A9CD9ABD80AC4342A5283E458A7269252F4541CBB6452B39ED54D336D0B
+19928E9CD1AB26AD83EB209E2EC75011A2643813053B5DBB0246097C4821B5F2
+C92554E9140BE35B2DBFCD98809A8EC9FC910FDE9E0D86457C70ACB056EBF90F
+244DC0A5BBD455E15D6E3180311D52CF50B0BF7D0A7F64F3A1821E0AEDBC2E7B
+AEB549FE1D51088C153799C6E089B5D5D65E1C4E2D2B430CDF1FFA23CCB25D95
+5C4DD885310A706B320AB25C8D742C6F29953254FA54DAAEE60ED477877D19BC
+D28E9AB576B0EA088171FD000B60D73B3C57F754BC07EBC9BF751B7D2B32459D
+993861B7C4B0D98C422A11BECEF76F4EFC0ECAEE89723E6CED53E3678D733363
+2DF068AEF0FE7DFB57393BDAA439A6A4C396F86032A98009EAE1247B7DE83B3B
+E46DF2898598FF5E6CA6953127432A967E4FD41CDD60D6E413059A58FA556EF3
+309178B57C16A763CFC9BEEC276944BDEA255789EF4E1ECDE1EA43EEDB955513
+F42EDDCF39AE522A1DC2DC523F046EEC4CCAE25792B702C288732F5B13B5CCE7
+E8B6A1A1DB86B1EA38883E481BEAB54023EDD9BB94E7780DEEA577ADAA169E66
+AB7D8607B409619E79F242CF52E618AC0DAE43317C507CDB27EA8A1472D4E8D9
+17E62C98DFB049C78AD15560CE44A39581BD6B555165091C5D41071212A9D2E3
+05965AA02B8A67AEB04D915DADC1B84A531A1D60569ECC2EEFB7B6B0263B8B5C
+E6EE63CED9FA74FC7C03610F6394D64BAE1BF3B50FB613A39C300CA5F4F16CAE
+F9B9F4DACFC69B69AF30E4FE9E41A6DB0FC987A13A3AF3F99127E5A44E7FE781
+399BF303B773BC0096427B18DFD0DEACAE196EB3927A7EEAE0F6DE8434EF0873
+20F134579D9E18D1E0A10DA116F544FD2B6C6917FD8B2BA682D2B27DA99555ED
+7C47B44193C623C871703226039460A62C80D6FF14121F46F03F0062E0E83ECD
+C37CBF62603F7C3034C2911C7F63CBC7907D036BF27C4B27500AB25DE058AA05
+2D5018239067AB607BF86CC8342643B1AEC261E39EEADF72D34F05B46E5409C9
+2A0640065E14FF4E883B5FB337D01FF9EDD8A149FBE23FBB347684E6561DAA48
+D01F4926E082B3EE68E02AB1EDC3D4FDC4050E03647D1010E814364DEA13001B
+EB55A492F92EDC0B6E4163FBE21BB26A9C180767628BA7A6F05C9DE893E78896
+1B7C202A3BC10277F3507053A77023BF76E3931CF81DA89A4206B26DAF93E285
+3E88759D31B4F81C5034DC36D9C18814EB038CCEC6F37F21654D3DD319390985
+1368A8508B60EB0D0A3B3BF3B71942205A44A214220FEF053918F1BAFFFD4F89
+49B6A39B95014239398A9484F5834B33C3EEDD52DBD73DA55A67EF01E3354510
+349A50C1B24FE896ADBCBA7D82C4DE52E1B0CD30CAC3FCF7F3F4E2421CDEEC97
+94AE9EC9F423063388D308A774A9D7FE3FB65C76A46E76D463AA538B23B2B46A
+433ED6C4BE6D4151E5F440E6EB3ACD48246C622587FA244BB0E3548BC5B545FF
+618074C74A76225880CD178695823BC1EBC11D92DB90B478B019E69A371A8F30
+C5320BC12D2080865A9FD226BD1CA8070FC76AAB8A0CDE334454C235B06CAE2C
+2C01E4E76A1F755CFF6C564028046E23DBB16995AD5CFD1BC2A8FD8A2F744756
+EA72FE5A156BB1C63E09BA7D76475722570CE6D683FC1DAFDDADF7EFA3C6D024
+596F12B4550F7ED696406AE45F1D77276F20E3C9243A5B29BA3AA2262A9E4F68
+46C937D5A383A469145D1DF2D602D091614BA551A296A3569F823ED65E2517D0
+FF228A407E536A5C012B15ABDD20B2826B88626D3B929E3A802145CB91D964FF
+7057FF11823D81D8D48A22FEDCBAA167600EBC94F573788456FEECE2F14EDDA5
+D5EF2840E00A4B5ECD9C4013BC2A32367AFA9A5AB588C3198D7528270807FB5E
+A93E764E4959EE345FCA56916A888073B1F8476CFA2C3FF55B641E5DC3FCD2B3
+A2A2F599769670FC5E32D7C344AB1388BFFD5FC20F0C25816E545BB9082EFB48
+6B8D99F0AE11C12B89A0448A1F3A3D07DBE8512044C078B888D7312AB44E7A7C
+1B62AC0B85B8594909C31C4A9F8CFFC8C3EF5DC8E091D9F3B29C7C9997CBC8B2
+5E21FE1DB3110736A521C68A7E12AC95F9546621E7D977AFD2D82F84369D9C43
+72FE510174E8262349E591FE65E37DAE01DD43B50C583E4E0875620DD376F559
+7995D3078800579F978BC8F672A88D2FDBAE773433241ABCAAEAF833566DE8FD
+28C7C39BAC31D18852C49382A2CC0E310531EDF499A3B79F886B488997EA247C
+84B37148251DDEB5AB6A961226CAC194E9E1C8CA785DB002ECCE40440F9F29BF
+4D8F660A17A085E228662F1CDCAC07CECAB3F6E5F5B79E4F56037E01275C774D
+19B2546F3D367201384B316F64B20D1AA7DE99F46C48C7B9874D360C198BF6BD
+6CEA5E15BFADFEBB92A37D155B229CEE4E58AA098A36C5662C274459BC92C885
+E5A077B98C5CD49A46CF5381AFD7ECC36DD71C0F65F822719FE97D2FAF2546A8
+E3B031DBC8A64286F361293A5F439577EBDC657F5C84A1D797463B4AC0A20796
+009901E3090BEA7959FD7F4B7DA5D6A6B7822F1CE7441865FAE3DFCBE736EBEB
+849A0CE9D26E1829A346F3FC99F7755AF48670237361AA1AEFD3FD2FE2A6EDBF
+85C07F9D794AB40B7D65F739235AB25FA61549CF4F913FC3C6FC953315F95A5B
+104DFDA7AE178941DD465CC6E3FD5AD7720AE111856168362DF7128798349805
+DD013EABEFB12C65E81D8436A337AC56E76B92115463A018541790A668789F2C
+F0D03A6C2DE93FBF385F73AFEF488945E46C3BAA162AD758E908E1BD5CEE6EC4
+FD7A34D042BBE816FCC68F6A6D28B1B9458207D19F651E1D490BA7C6CE2AED04
+9BF4CF43B27D095ADC788909CAF3959FD014F82C70E889295466879EFFB036C4
+2A7D98916297343DCEAE9192951A9AD177D79F72220877D90FB7EE7BB3111005
+EFFAFAB42F27AB32C9B979C812D91B1A050B3562F18FCBCE154E3AFAD3217E94
+C7313081F915D58E9A8FF574ECD99CA83CDDEBDF29FF4D1FBB05C60FD7ECAFF7
+95BC22523771707C5CF2DDEDE69B17B6B63031A1CF085AF3AC66A4223DCF0236
+5D9EE6FA81205CDF2F3B11F08271BEF8654D3A1A604B2AFCB7815A5EE751CAFA
+FC0F7131AB3A917E1680204E70BC5F360F56ED309E7E4E304034CD5495B32585
+2B3E7E2DE6E75D5324007D69FDA56BC02B791E1C79365BC615FC49F51B404513
+D26498DCC2DFD215B6C330B169D2294759E06F8B48C7557F3DC256D02AC4447A
+DB3937BA3FC9A19F3196C083BD99305F0CDDB15A4134C9AA7F55D8BBEF55CD1E
+A6CCE4F0B2ED302C960A23324D7380765E214796F472804FD07A9760D1397E7D
+84C8F2CB521CD9F5D15EF6FEED3D8CAFC5D2AE60BA554E7357A60D704B7EDF2F
+A663DC9EF2D31D5264E3419292FC96979F72FDAF3F4FA981C9E85928E59EF0DC
+3FDBA0F2B51DC34164DDDB46616724FC95E3C7A29918510A8A5415ADFB1B6122
+7A3E5D1B25C9694AC7FCA0F85E6D4744F01C481B7B8342A32E64FCADC0D27C0B
+D263ED69553C6FA4CD5DD90C2846B98C0ED27A54D760C77A2A6F691FA28A5F42
+5D79C79DAD1FBB43D4980C08EE34D255D77309CDD8E5DF746510003E014A9708
+2A23C4AEFE361CFE3D5B64315CCAEF26F805A298CF80ECF11086AC608C85BBC9
+2FA7A6E351812FC068C5937DAF1641F8966BE8A2AC05BD4C704A1233F7A15F74
+0B94C0AF7BA0A31EECFC311799F3B7BFDDC7C9C54667BC342E46F237E35F3890
+29ACEB177836C939B096B32F0E15620809F6D79D97721FA4019CA8D5EA4DDC8A
+6DE54C71B8C4325743093B6B1BE114A2E3B60AC1E12283CE3D89C8F019E1EEA6
+DDFCE3293F8FD829475FCBDC9701B35DA0EA0129AD41B368BBD4A3ABCA437804
+6F1EDD9F1FC4C18037F1D7D413972E5951F1890C1FC37BA39E5E54991E884F77
+6BF68E23B0678F9CA69146B69C73F90911A541211CD714F43A35D7DC9CCF9648
+9AB7E2F914A6836DADB2E381801EF0EC2A3196FC4F8A9EC8D5CEEA554EE9384F
+833F6843D495C5AA824F3CA1B17FE1E6C09DEE7E2BEC6401A102DA62F1D77134
+1F73BB4F321E5F59D0B0066FBD0DCF7374E863FDD36D6262FDA83D635AC1B582
+CEA0F1BF228B40B1071E03AE11B6EDCC204D57C1437B8A48BFB12FEC6EA763A4
+A7B1D260075C48A8075F8D5293BAE675A8801D09119CD5A39FF8FC6724992C41
+71E1670DFAA05991A7BC4079F31597910683BB15DE678AAAFB77EF7CE79C94A5
+0C60D399D408CC92574025DA14FD3902379440722CBFC517AD9199A8C2FBAEED
+D35768B61C72AFD5BE393F8018660D5EE32E0EB0B08139D81914BE1227864248
+6E6E64AE80DE147CB47EB7EFA37AE92E99768FDF80C4E5A0BA1AB0675388432B
+1E8F0FCD2962B78A0094FC9FA0B7A37CF171DC7D9CB5FA4C7F15A2DE5F069F1C
+B1BCA88E6B06A1E904FDA363411DCFF079DA1C764162FB8B5B6571F0C0B2F1DF
+0A8B3EC9E530D55D013FA48199E5DFCAA1404FAF8CBE63C8E7AF1DFF2720C2C1
+EAD46377F772E7822765991E31CA41C20E3DC9C6F9399AC67F81DCC56B74CEDB
+558E3E4C774C3E9CE62C5D2016998E4DA516173867262E66806613D301AE44F1
+A75CA4F04E690FB355FE82C984C75B7CB1BD40686E7A4BCFF8F60BCBEB8D8989
+EF95E74FB3FBC6B1B78036BCD1409E512E0F786D4E7DCF588BB35562D2F4231A
+3D439241D3D6530B3F2D44C8A98655E073532481C3F6B809C03898609DD5DCA5
+9374DFE240D8214FF610ACFE77F74C5C080B10B1A10E3687490399AA5B003C26
+36612C211A6BACD3063BBF2B4A73A88FBC7C44E7960C6151D3C933BF60F5E252
+090D3D1DBFB5F66F26949D6068C4F4E22873DE9423064C23429493331E7ADA43
+C1F2C941F595F902D3BDD8317809437761C7CEFB15A17A21AFD037E338B5F9AD
+74B2D2F27A5378D121997699A288FC766211D11C1F9CB46913DF72DA5969C1D5
+C2C39691D8FFEB5206A337E126AFFBC128635222C7FAA3568D4A67333ED45DDF
+782A24F8C427D78BBC0D574582D538C6D1ABDC9176691EB3E87040E1DC93DA9F
+4B35E0632B5AAF7C3BC675FD71E0B4022BC0EFB1D71A51424F7D5382AA4D7E27
+77FA96F7D9C0DBCDA8931E62C81CCD6E78621FE55F4B1AE465F89263D106AE85
+B55216A342D8C2D8B467434237F7EA89C31B68A0E3CF006CA91C57FCF790B5DE
+BD1D0D9CEFC2F2F708AE46B6E406F3D231D3A3202FA1700BD4C9A66C1FDA7622
+625019A188E47B8AEBFB71B28FDB6343391F00AB785367CD9A0D0B97738E3163
+2086688DFECE8162FA9DBFA8F6BEE4083F911FF2D54EE9445FCCB23F403D1788
+5BFDF29BDB2A7ACCFF5CE65423759182E76E09D338C05B030055AA7CA084FE22
+CBEAB67B444315FFBB1F32F5C1B65F187636D73D1A06CD23056357345FC68201
+940E041AB7F089698BF704BB970E256E7CBB6CD4DABCA0EACBAAF876016E25CF
+4F96899DC44E7B8C0A9890AA93E1B5412887DD507DAC9AD10C34A3DFFE904211
+52E4B1C35C2B23DA6CD77C3C09CDBFC531824021D0A0E49A1F56B1C96382DEB9
+B84E6DBD75153462768CD70EEDCD7A5729024C38B310DCDCC8CF8CC46C93EE44
+D3DBAB70EF510349D8602CFBED00A26057F70F209BAAC35AA0B6ADBDE1604AF1
+9C8D3359470F2A2D04C4CF9F9D5DEAF3906B17F5601B4BE5423288DDC589FE2D
+9C4AA6268D7A3F08DA986B31978068EC3682FF8CBE8E98DE812D6A139C447451
+DE004F1DB1B29893E84148715DBFDD815220978F9C2F9F1BA0317829174AFF3D
+A12F4F16E4C9CFB134A51F2C2EE8ED5AB7846BAF9049C16F5C8470B06FA21627
+36F2AD3D49573D9BBB4375FD293875BEE4690422F8132CEEAE1ABBB30C333F0D
+49F74688F1D8B64CC97A03026B1F9EE11EF4CECC03B3206476BCD63A8D4D398F
+AA580F6B987E03BB13DB20BD19604502B7711B38D0003E9371BE69788260D9A0
+353C80F1B85E9006E0043061C5DF4CF92B3E5A65BCA700032319846A31BC1494
+CAABB2FF05E6BF5C3DBC7D2189455D3339A0069CC0B22C3EF07869AAB17D2613
+B58B6AC9DE1985AADAA7C5CC15EC39E5FA35B707FC665C7829359BE64FF7EB8D
+BAA92A9090193CEC90F1764BF0E9B5424C225FF4A7A5B416EF9369D16210CA84
+60BDDB0D5FE96E40C82A349BD06F32C946CC1759D12B8BA96B78E17C4D696D0B
+E435105717F02F2559B2FF2D5B1EA5EA285B8026A493BF3651F9E86A370701BC
+D7E2F9D71215A6EBF8C96A2CF136165263D087C92FBF2225660C5D0A8120423F
+8297C565EF796CBCA37D4397AECFB937B6BF1DEF19DDACD6594B4C0C3A662B67
+FCC203E83DA6A15660C365E5842982EBAA5CDAD53451C6B5405255F6DCAC0D84
+B4433EAB37116F49D7020638B6B896CD39B7D8D7033A5717B8E177B1C579757F
+132CE10382B9870990E850536A5960F94140258AE16389266EB60C70E9B1E942
+5626E30CEB6E10533237E98A38BC0818325305E9F89A7C317836DCD5381548C8
+5F1CC23707378D24349FB0EB6C0BF477253D1B3AA0F28696291A1D95DB97B774
+42BCC9DDB86E60EF830EE02E320930CC123ECD56A5CEF6DC0F6934607F7B7325
+0878DBC1D8FFBD850FBF2AFD83049637F098436D8342AC96E33D300C7FE3387F
+4EDFD469C17F1229A5774E10CEC83C599F5B3C193EB3D98C713EFDBBA92D658A
+3EDCA62C848BC20406840C9C83295A5513934CE705C7F79FA3927D5C8C653ACF
+E28613D7C63796B82CE3FD3781FBA22FA8047C76493D5FB070F46379F8F9A520
+52F36DC29CA078070BC6B149D92B71E184ABB97819553ACCFF0F162BAC393D45
+6DAC3953BC5428F44E498610ABDD7ED6AF3862A0AFE04188BA55A1CA0A1476B0
+63C818DCACEC4D454E07B62F41201DE11DCC3FD38913DCF3902A899B5602A232
+8884DC57658B4A6A3687B0F2B6811CCE6DE425C4D9981C5456A563DC8FB05210
+8C2A09151E4EE8C3A9C0FEDFB094EC5B660F542D6FD79E315105E6A7334256F2
+ED36DD9A2E3021A1932A799639BDA0C2A389AE5150446EC120922CBE2853520E
+46398F2E84459A5DC75451D0CE0E64F72EC4E4E0FFD9041E46796C40EF324679
+F78DE4382D3D404ECF41B8E49E772A76234936957F8FD8FB6866C0A2D36AAF9F
+8EEFBD86DFE5588976A3146923D4B7CFE0C86C7D97DCF3BC071EB629848C8BDA
+050E3A0AC1C638888A7DFB3B27A2154F8C4F1B7407524380C25F3233028129C5
+79D8246F6B60AF14ACF20078461192829A7A0656906333E47AF1C414758D0A91
+B29233651492B3DE73B59992EDE1C95F23AB83DEA97C1390F4EC76E2FE39E956
+7B9B8493E6659B39D9D9D0A280948280790CFF49BAA61FAFA35157A237019F62
+A52686C4DD78DB207F38CEFDAD792950DA3359B6145BC0364B672DDBBFBFFB1C
+7A85DDDCFA936EC2C09AB2CC1CB273892DDBDB9B019EC82A46D840222786273B
+5DADB59D44530ED1839D34DDE35FB7B15BFAD530D61CB5B4CC56FD3C825EA406
+3287A3A18F42D3663699A292C8248092E9BC58FF2340644BC70DE6818699323B
+0E1355B544AAC28D3D86E2F33821982D53DD48B8DC18BA490A4CEA9F4E162F77
+4C42908BCA7FE83C8443599ECA2088BCC0E94089EE4811990487D79CEE2B76FE
+43D62962287A61386756B047CBA5EB727DD9BEAB8156EF21DE9A0C1053F6E6E5
+17C0209434B5E9158A2D56FDB9048E2598F20BC3600C0725D11860983B695DAF
+8677D1F7ADAE104900F70B492D436449ED46C5FA2DF3D8DF54368F1724CD99A3
+BF6E3929AA18C1976C57546D598D92FD4146D36CF09F71C5C9D9D91579988570
+84DA71318242330D3AD3A44C3590101A82BCE89641F452A3A0DCD3746BA4DED8
+033BA487BABD4054327273E59C439D291628FEEAC49513E48AE1C42029925944
+35CD29E08D2713F11CDFA3CA51E21C61C355BB44547C826B9EE21D9301F91E6A
+F92F020C86AF1E91135F20BF369A0F09C6BBDAE698AAF9DD10ED75140AFFC3CB
+FD826DDBC36B5466892B71467A45B6CF32B02855F2E480C9F79E2E6995C39988
+EFAEB62E56A77837243E70DFCC1D90C31EC25948395B5260C4EB9413E5827893
+7ADAB158F033B48B21749DAB62D036955B5B66CD1A1B615C1AC1CF8AC9F78D20
+BB83BD5A3D6C9847E267EF0E1769F5C9B818B1C0BF2C175DCE0DD27C6FF38DD8
+37CA1F62C44CA5823C7BB4A1EBAD34127A6E5CF41F2D49676227B3C8E434300B
+62B15D1CB64E3CF88361ACE8F339E5D95513CCB4A4948463B244BA11044EED8B
+0DF279968D6D1F04D7F06EFBE038B2DE52B5FA63E49AFC7CC912B1F0E0D1BD6D
+088021A3AF753F43956D9C376114191258A64E822344FDF9226298452CBF26A1
+D584A224F05BD01D538869F746F199840075A3A47F8FF6D7492938410582171E
+DF769AC54577EA8C7D114571662D9BA871A4D3C58E244E01D40EDE7A42F2AE8A
+1EF1CCD4A8F6F6D9C77D37A75EBF947984180AA7EE5C6EE7BE0275731B40F510
+4383A2983A219707A5E1B823C59544347863B16A504E140096D64718E1451A94
+8FEDEE33012BF023A7B6EBD6B8FE7D5F02C74D5EAFC1BDA3337C3D3788B8540F
+BA98A3BB1D7839C94A3B7E3C28A406FDC57D577F9E1320274185A0E2E07446F5
+47B23B710A117DB18752F26498DF03CE343A186522C342BECD0CF88FFE2E2161
+A83A65F11B180B7D61828F62519C32E31F4CB2AF1D078E1E58B60740FCC0528B
+A38AD6EB7271E1F921F34A3EE5B079BF4955D07CB7FE91DB8C75F0F41E12F87A
+06A4C9B2337C91A89F051F15A9D0EEE62BE59C52949770060B72C21D42487165
+232B543DB73E5F4563832DAFB58A801A1EC1C6EF043DDC61CA275C42FFE03F6D
+1A64ABA0FAB3CF202D5C83A2DCB28FC99C59142EF4FB14EF4537322AFC1FC830
+1893153A2D990C9ECBC511D268DB41FA2776DE2440AB18D5DD9A7CDBB5290280
+3EB1E8BED18CD8F703C13151FF4A023E24A78002D9C693F7DA859363E700B849
+DC58F2B22BF2689507C14A28EFDC866C5046297828011B585885ADB0C3B716A0
+7E3A3A35741CB7C3011CA8727F97394D46FC09DCA1588995FA9D1D204BF2A233
+15C807DDC99A34A3107EBD19C271ECD92306E9A375663C6029836E212E3CCE28
+FAE6E052AF7A583238E454F5E69C78C5C5A289280B03ACA1C54F2F2716A4A9E5
+0A3EC3F2CEB876140DFDA7F98E23F37ECA3F70D11E8A944FC44EDC7F7D1D9CB8
+3C1D370B7D5B8AC39DCF34D716C0F6A21E6189F766299EB0B25A8B253F7669CA
+10ADAD3E3ED2C5087F64D69D783F448CEF01084A298B269099B8779B3D4B3FEA
+0EFADBE3221C8DD9F0D555B2D8813087661516929F67DEBC8EA0B383D59DA818
+D2C83880F4770575FD416C2D5B32376DCD68C04B3E10096793DD7692BACA4DCC
+616A5635BF33292E99AEEE3601F2FE33F878054DA03344E0493C92370B9FD989
+FD20467D4C0AFA667FC2E1AA235DD7AC0F4499883C2AC649C4F6825EACE93A58
+2C240E48A3855B6F394C72FC3EF0B9330C1331547D285F3AC81B78E9002E1200
+7B913192B2A6176CAB67EF5EDBCAACFB20C17DD9E61800B83FBAE35C1E487F0D
+670669859BDA3E59CFE4A577C671B76B6D6DD07F93C95A78AC56FA7084B11B73
+C0C4DD245C833D85B34A013E8EEC5EB45FC1542749EFDDC1CB9A9176AB195258
+AB34297F10F89E68B4A3671BB74182C1418C0F41BAF4FD91B6EC8484845A6B19
+41A1E4CCD44C6CF6D6FA006D31F5E3A4676578D7265F1986F1BF660B7C1D6185
+034B01B5A07109FF87DBE90A89D9C72E0DC213494446C5B5E28EE4E0E4FFF0C8
+3580D3CF88BF71C102E3CB86356D7A060BD1DBB51CB7AFF05FD9ECB6ACA2EC8B
+824008AE1D0FADAE261B80D6054F33600FF00B9E61E878F2FB4D749456AD8A0E
+02880B14B4D8BC788499B64E9DFE0DEEE5C725E8F50B574D4CDA69F400678204
+D366A61E8D0E0B5CB033C5851BE617B793214BA95BF075968C5FDA8D70F6103D
+7AE165AE198489C33F59D87EC139453C578F8CDF4215738A224C6A181A9159B8
+9D635CB5C3A5817BB8E659E32351C1B4695E952CBFB54B0E518D5E5856F72F04
+4537F293001F65465D326DAAB6C6E6B95D0259A10747189420CBF3593F6A59A2
+975B77D366851B65F6A1B0A0EF2DA6D779089336A48AAC93CDE45940B3525BCF
+172D2B809D3461BE8CE664E342158DA6CF2923FAD219A16E01929DD99006827F
+726DECF87297598D029744EF73711DFEE390FB263CDCB4EF332400F0C55C040A
+A54CBDE5B87625C62386CC98001B59A63D52A16A21436FF3129BE482F57127DD
+2FF48E8CAEC302254F400687DF502C75DE0C8129AF4DC514122EFD3CACC3C42F
+2E1342F69A001ACE6822B4D4E93AD04D8014831A0514E154D22568BF35985FF4
+84D8906393C67B9B62062EA72D35E396387AFE9667722BE3DFC806B00464704A
+E86F95ADA265D0D4929A1EE3CFC57BC70C9637B75AF05FAD33AE531C9FBEC028
+ABDE8567DA63E767D58ED2C68CEDD29018DB1601EB195071F8F857641B2B575D
+99B5ED3B68FD0133435578AB6C62B05EC402BD353AD5FFCA7B3A4FF595A94876
+437A8F02E28C9CEFCDCEAF38853CD716F96470A80F11BEEC5025A36B85311C26
+A35459F0E6F8B02038F313950C936F93038F3B0CD1B763BCA26AAF462D4BAE7C
+503C589AD1F3D61670DFAB0E2B550C9DBE9C3F3D17E2EE7E113C932A3BEC47E0
+D260920BF1C5F08EDDBAC8EE407DC36CFB9B25DD70138A2A0524D5C0D6404816
+21E8835E509B51D84AC925BF85FE76AAD12F73C111032E878F3D08D1FAD9BE5B
+31D441C241E3AF11800E3DB47B9D261CA10DA78C7E76EFD2E711AD2E1C47884A
+2CC1B7127978DA0E5673649982374B128F27164D3DA4AEDA8EE8FE6D4D445818
+FD93A595CAD3B2855755579C435B04104687006F4C2F4199D61276F9477546B2
+D584F241AE4D1BD8F27392D9398EED57633874F64F36A53610705DFEA2ACC563
+D8535E0424C4085C8322AD2E89E109C2C2DCBA5BBF1196B8426555787AA8E253
+A54F1E7FC579A8CDF3C1C9D147482F3065B57A62323D368AFCD3C71643BE3793
+15A4BC9A89C732E538494B152CD430D2352A
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMBX10
+%!PS-AdobeFont-1.1: CMBX10 1.00B
+%%CreationDate: 1992 Feb 19 19:54:06
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.00B) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMBX10) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Bold) readonly def
+/ItalicAngle 0 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMBX10 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 12 /fi put
+dup 46 /period put
+dup 49 /one put
+dup 50 /two put
+dup 51 /three put
+dup 54 /six put
+dup 63 /question put
+dup 65 /A put
+dup 66 /B put
+dup 68 /D put
+dup 82 /R put
+dup 87 /W put
+dup 97 /a put
+dup 98 /b put
+dup 99 /c put
+dup 100 /d put
+dup 101 /e put
+dup 103 /g put
+dup 104 /h put
+dup 105 /i put
+dup 108 /l put
+dup 109 /m put
+dup 110 /n put
+dup 111 /o put
+dup 112 /p put
+dup 114 /r put
+dup 115 /s put
+dup 116 /t put
+dup 117 /u put
+dup 118 /v put
+dup 121 /y put
+dup 122 /z put
+readonly def
+/FontBBox{-301 -250 1164 946}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
+016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
+9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
+D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
+469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
+2BDBF16FBC7512FAA308A093FE5F00F963068B8B731A88D7740B0DDAED1B3F82
+7DB9DFB4372D3935C286E39EE7AC9FB6A9B5CE4D2FAE1BC0E55AE02BFC464378
+77B9F65C23E3BAB41EFAE344DDC9AB1B3CCBC0618290D83DC756F9D5BEFECB18
+2DB0E39997F264D408BD076F65A50E7E94C9C88D849AB2E92005CFA316ACCD91
+FF524AAD7262B10351C50EBAD08FB4CD55D2E369F6E836C82C591606E1E5C73F
+DE3FA3CAD272C67C6CBF43B66FE4B8677DAFEEA19288428D07FEB1F4001BAA68
+7AAD6DDBE432714E799CFA49D8A1A128F32E8B280524BC8041F1E64ECE4053C4
+9F0AEC699A75B827002E9F95826DB3F643338F858011008E338A899020962176
+CF66A62E3AEF046D91C88C87DEB03CE6CCDF4FB651990F0E86D17409F121773D
+6877DF0085DFB269A3C07AA6660419BD0F0EF3C53DA2318BA1860AB34E28BAC6
+E82DDB1C43E5203AC9DF9277098F2E42C0F7BD03C6D90B629DE97730245B8E8E
+8903B9225098079C55A37E4E59AE2A9E36B6349FA2C09BB1F5F4433E4EEFC75E
+3F9830EB085E7E6FBE2666AC5A398C2DF228062ACF9FCA5656390A15837C4A99
+EC3740D873CFEF2E248B44CA134693A782594DD0692B4DBF1F16C4CDECA692C4
+0E44FDBEF704101118BC53575BF22731E7F7717934AD715AC33B5D3679B784C9
+4046E6CD3C0AD80ED1F65626B14E33CFDA6EB2825DC444FA6209615BC08173FF
+1805BDFCCA4B11F50D6BD483FD8639F9E8D0245B463D65A0F12C26C8A8EE2910
+757696C3F13144D8EA5649816AAD61A949C3A723ABB585990593F20A35CD6B7E
+0FA0AD8551CEE41F61924DC36A464A10A1B14C33FAFB04862E30C66C1BC55665
+6D07D93B8C0D596E109EE2B1AAB479F7FAA35279ADB468A624BE26D527BFF5ED
+E067598E1B8B78188FA4BCFB0B51692D07B0BEBB930C6F0997B437E2C51B876B
+61A563A2673932C2045833FAA35DB22ADE12102335D5DC734AE3AC5EEE6658D7
+92EB62131E1DFBA441F53EFF9021D9D4C491F26BE8F54C61165CAD778CE8695C
+EEAF70E3B20C64D4C2B34A084B5770BAB2A974E898F62BFE90F132A37E2DCA4F
+43E13DB13C94DFA8ECE2B7374827AE168634FA007F8981ADA046CED3448BF453
+FCD9A4F194FA648F9FC0971734BB69CB73439CB0DD021D44A7C11BF295E81733
+4DFBA460FF3D654F9FB337E99E6D66FBA87A817EB9CA1536C84833870E3626DA
+55D48DEF261C3CE14538C0AF5D07EEFCACD74368BDA94AAD203CBCAB5465F186
+82746D4C6A28F9D30C715568BFB638D524132529567EFF5A79866D8F2EDB5586
+8DB2D94EB609436FEE3D7B970F23535BEEF3D5BE6CD45CCCEDC071607FA74165
+3B6DEF9E373B23BDD5751FD1E0EFF6146D06C17FCC1069527F86804DA275D8C6
+F885EA21B23C5B7428F6AE8A08512C9CC6397B0D69545C3F6DAD809BB9AB8EEC
+2C119CE26ED40BB3944222C01F0BABBFBA245E8BF37CFB4BED1C16575BF519FC
+93753332AE319FAC5C83038807C1CF9869ABAC639B076F95235859447903EFE1
+0F284F75EE9336152D7ED559DE54C9204AEB2B123868BD684408B8DF5017D3F6
+BE5A1C3C4AEB59E6AA79A60717C38B23D7CA54BD43619A46D5FEFDD4D1726821
+D269E9087734CA6A9303EA42387DD018BBB2D7221D2DC7171C2C7F806A5DBD9B
+828B8E5DDE1175D22A87896B8F275DE0FFD70425D71F35D18403070CE0D2B7B9
+3AF730850C72D58AE71C6EAC82D9A687BF9A5CB27E52E37E0E53B8EFE9C486BA
+5B4D9CC2989657420C8B33EE5694F5654AC0BFB3A2C968EF269DA799887184E8
+E036205B149DA99B2CD2F337147B5D3D8D32FEE78B1EFDF0E6BA8B37A80394FF
+007D095506A7C00DC38C9C54B2B4B8BF38BE5C26ED0C9A92315083D8EE0373B6
+DCA9FD2863039630580648C14CFED314CE3E181406441F955BCE9DCF3D996075
+34E588FF88BFC236C12944654351BC069CE28F573A510326720EB5A52480298E
+8ACD80256AFF17F7CEEF7E55DFAE9BDD7E614BFFE78D628646C32C1D95C0DAD9
+F35251641DEE00FF8F167815566347A097F48184A0C02B6F8C4AAD95C4C744B0
+3F18589944182A29D4C2176E22C04A7D9BAF8AB98927EC10EAF186D8E92293D9
+81DB970E70DEAF9D4AB0369B5F3D2ED086D8550C6F71BABB36AA3C9A9287D172
+622D47714FCB587825CB3303A571FCFDFE7F575D5CE79D484597A04F844A6037
+934009D50D1FF53F9FE0AFE56EB03248D3C847440CF9523D3BF23F6BBA219179
+F9CFBC03748A6D2608FCF25D0778A1152C43DCCB2D891FBE0F78E1C7D505C376
+39398E08C09A601506D570A8D2373513F1B3A6952FB7D1C1D022A6359AC0C4FC
+B33F8ECB3877F13C2BFED1652493DB8CE21ECE03F6B4CA2B12E4594C779EC9D5
+DB807583479E54DE42C3701F0FFCC3BADDB20538431B7D1DFAAA95D5C3B3F0B0
+27BFAAE9A4447343F6881DBCE974612C9B3B0B53BCCF1A8C6272017829AE4745
+7FB8826F7F78BFB818114C3BE7E1D878906D5D1B5229649C6CD529F12D6482CE
+E91AF1B6C9B2EA3468B41404062CF83565F01C56AF1F3EA4C4B05A3FD5166BEF
+AE57C4CC1D00AB017225540712B4C81E99FCBF989A6775DBFB3265DC29B78967
+9EFDC36127E4D37316A5E9315AA8B8744DD47FDC0072EABB4FD0EB9F436C0B0A
+63E1EEEB8EBD115E6A748157A9F8F4188D876F9A35692009B8A3FB1EF0A7A717
+37EB53689B5C6F6D7A5AB7C03FEE39A83D8DDDE0B1C19F1316A57583EABA732B
+D63E765C432D73B459232E1D262C0559753508647B324D692CFDB9F3D38F6D49
+80BA78418D7AEE4D747800FB387FAC6B347C08AA4A216EC011DDA40F1A1E57A3
+EDD7CBEDD8D02720981C73F724FB0DE905E73C5A35E1C5343143963834716F8E
+D7533408DCE4BCB27515884691C4B00C474BA38A8C91CADBCE3C18EBFEA14842
+6D9746D42631647D0CA4C4D8509A7FA4577464FAFFE12249D15CB2D89A2052CC
+F3957768F68E8DEEF157F1DFEB71B10A9E6D838C29F31B8078E1F38A1E227CFC
+7A85FEEAEF1D66FFF111398CD07D7BCC3D4325CA0F569268390BCF9747F20ECC
+1C5056D5476517C7E460EAD29FF8D932925372CE334C32633293C9EDE57DD4B6
+EFC676AA2618A60E9D2B4AC79BB4D00C782A50CE397328678A1C0BA1CA1CAFA4
+F8464B4E6E089687BE283D252D2C33AADD9FD265A10E65113F5C8DC0322B86BD
+82CFFDB6277A97AEE226702FEFBFEDA5577E3F8CE5AFC5FD05A3587E50C961DA
+50E0320D97C19C15AAD6D48654AFA937645744289E4809A3CBAA2CF44722CC95
+1D8623C3B458BFDFF138865EE4B4E2677F6D3AB6FE40035A0A76881F03CF8E2C
+58708C2C96A1AF5EC53F0688D11631D9C9F0FE90E4006BB5CB05039AA90AE71B
+695718ACBD5D7601ED58CAB48FD54529610F843196743005B58C1881E9144C23
+19AE4493F3896828D1D9F06CF1488AC2A1FB5DCFFD08AFB13D23BBEC2348FB2E
+7FB6900DB7AC42B5096590CA0E92963063C2520B613CACFB12960B9BDC212C23
+2EAA62C81A8596E817D1283C84C25EFC39ABEDFB07709647E0C3A936B8B9A0CC
+CC7BCE01BF64B4A97D8611C6D959F9BE14D39984BD7CB37C78A055FDBC0B356D
+3464FCE3F557E6ACAEAFDBD920063A8D2EE145CD420E0702E6FA9714F2934D4E
+AF0ED90A57BC43EFB448BA0C80EEFCA37F2D71D3F68DF36B0A9C536DE88DAAAA
+5687EC8713E8B1565DF3B9FC091F0615732A6D6886378C8A0D82DCD2DDECB6E8
+0FE4DA40C934427B24F0DE26DB2E2787C7C316DD74BD208971B91739BD1E566C
+524611F0F482982203B5CCBDB95D992548C21DCA6DA1EB07047C8C2B2E60EA52
+8348E0A4BDB405B4814E8874451239F0351142829D8D81E7C4CD0C7C8B88CFE1
+8345AF1BAFAEF705489C42D96FFD31FA866E3E309095E6CBC9EBA2877D30AF86
+8D0564BD7F1B1AD11EC290F33E471FBFD03425C0052F251D680EA82196ECBB5A
+A4A2951F81D14793A6BC758523C655EF083DECCF2560FF8985AE54B7238F6920
+2614DE4A3A803F53A27E278BA990DC521A30209DBFFB2053B2FAF9B686E82C7D
+CD2AEB9779C4CBC31FE120BAE15B9B4D88631542122E4DEF2816A5AC268130D9
+BB182EBA2533A4E08A5C978DC1689178F136A4FA5EFF7979CCC650939CF3F45B
+70081A5515429AD7422785FB46E126974E88C481C31FDDE749BD7D8B6ED872B3
+F94DD30CF5A6DA497D2834D205D656E50E5A5721642A1E4E68D8F7131803C218
+5A6ACF897874F2493BE26CA1A8853AB2593F52666760C64098C3B0FD3287E51F
+A430CB2382ADAB5821FBBE8CB57E2F64B79E81F2B0892C3D8CDA519D4B50AADE
+1ECA7B3C08E1AB618DF745AE9E340E6A157E2FDC640F627E301FE2FDF08680B4
+D84DA715054345E6FAADD39BBC178E409B9618EAAC73C78777B761EE702DEAB6
+74077F54EA61ACF225FEA1606F0B335D41F5B3AABD18B36A319BEEADE40BFF9A
+A27794D7D5F653B074B3470207B992A4FADAB4C01F59C22501194E8F9A657094
+B818CC4C1A0B9A1C4548CD9B66C3BE235CE6C619687BAE0AE66666B492F4A1A6
+00D0B4F1C7EE65432E5A6232E5F05953596ECDE9B206DC6210CBA72D5D1F2D88
+40788E4A9CEED8570FC7B1B06D33244B83D7AD2B26FAC39BA763B5C33054D79B
+292D46770E14C058DA60530E20DC98DF10C5198E6B64D95EBB0AE4273DD4B783
+5D86B8D0D9D7AFAEAC1246FD9FAA968F4209679E6F65815DC2BD106AE79006EE
+9E7379472249D11C1BE1DD3B3839784509B833EFE38A5D292576EC8EF5E56096
+78CADE25615C6B15E6CBEE5F1AE41677AE380EAF3CB7C11F60736A590C378D32
+CB7C4ADF94A38C2B4A64CFC86837A32CEA967058D0970797BF3DC2D87B9C7958
+8B7DA8E2E0799904C9A4593B4667BEE2CA635EACA24CA84ADE2B52EE8707D2E9
+963B3420D66F223A4E227632DF16DCC19862F0E550E4E4DD3B576DBE717F3A90
+2EC7E3E301FB341BDCDDC4CE7350481B12F3CC92B0FED9D060B0AC0B22079643
+BE6C6F720A03B93775B5E3217B13917E6208AE246A8F1BF91FA267BB013DBE62
+17A0B6064425B5AA3C42B0236261E183D0FF5F9D0F76F6D1D666EA9E0F06F298
+00A3EDDAA134950E76AF7597B08C083A7C769EFAC61ABBB86530915DFD74522F
+D9382B6B0D7D72A216EAD6C4C4BAD838B8DC6248B4E296793B4AFD623DC0AD02
+72DAF7FDA3824F7187CB9F0BD77CB45B3ABE949C65DA7D1D51C2EF4E979A3ADC
+D787A8BFFA08FE09CA81700E0E0147DD9E5F2BB4960F28B51A5ECD05848FABD1
+DD1F8E989E4B2303832AB2F8A2979E39F0985B03D0C2D9C217DE97D6840738C3
+CC36CD0F2A6CBBA8FD05D6E8D94F6F8F2B3B2CFE12EED6200BDD25A309588531
+16F06551EE4819FD3DFD6CA18C0648C7E3F06CF82E1E4510D779EE7F8BCC410C
+91F979D52DE4833C877E80F97B4B53540FEC102459470F220F6F236A3BA2B263
+32461D21B81FA9EE76412D4A78EF6DB0AA7723D2DDFC24D15E5B56E74911691A
+CE8BB732F2DED25A69A1E89C6F495250F52CC72A4984E23D69E1F2474937E556
+2CE202A0ADB1EE2AAA5E25762D3AF4E807DA8B53517DDD9CC9C1B5C87A879966
+8523D1FB0A3C59269C2EBC5E419BADCD7B2D74757E8D67B323C551DA8AB18D5D
+EEA7653E8BF5A030D370FC680DF3BADDCB507C667925D741B4F582C0BCED946B
+EF9E5312A1B06E3A658E6E58D1CCCB1F4EDA9B83AFE5625A191E8D5B6DD75518
+C7A4000E04544A6ECC1AB9E2ABCD0012C34154C2A96BDCB9719E79BBA05958AE
+55B541796F2A2A150B03ADB3FA68EC5E0FD1813764C0C9C5977033C10A02D3E6
+B215D8F2FFFE9B8474297EBA3E087C8D4CEEB6D770B5FA468E8293B696194B61
+978BE05F7DE044E3E7EEC26DFE4DECA111F7D20F608DA4724B1092295B14DFB9
+DC647CB3B90756A0EDD32147D57D30D9F91D6FA68E25CC1F21A29E4BC5E5100D
+63A560D3EC61FBDC02AD276855C7EEFD01C6C6986D565AD325E9F951AB30DFFD
+D2CC5A54A00BD8E40D7A9C54EE3C725BD537DE13EEC553144CDB401D435041B4
+1BE2404244658297542E87C357323095CD40E20EF73E7CAF3F2DE83040D04EA7
+58EC6FF7E51CE2AF05BDDC739C9A114AC71F1BA95E4B503793BC8792AFAA0A21
+482EAE58FEFDB7A49E52FB9D025A0B9998AAAF624B18A122882E91AF11EEF42F
+DFB0D88867CE030761C4D57E886C8E8B2D234C0A4329B037D182D8A295A619D0
+C3DB76558D135E8004AE919F017262B7D4653DD99B2AA28D3EA76CDB1CDC0FAB
+AD235E3E687BEBEFC6F0933689ACBC235BA8E970F8B2ED61E48D8E94B66CC300
+A5C656B05D3C540BFB16C365A5702BDD028F466593D826497D8D1929F70B6A6D
+15F6F503DFF6189E20CD1221FE63300D6F62A1B80A14CC5769C00F01B1A5FCF8
+EB1870823A499E71C234AFFE23D012DBBA637837CD2A7EA8655871FE615094BE
+79A1E9275EBBB52FF5E65765B0F579784C5184761A6D4B94DFDBF65533C799D5
+7E58AF9DCC2DA42012B11A131766333D035F749CAFDED586480660D764112759
+9895C21332A1FDD311A71DFBEFB47CE065182D2200B35CE12CAD2E2241FC1941
+9B452081F3B41FFD646279525A7BCA777DED479DE1502DDAD281621A43694EFB
+D7A5CEF4009DE9BB997016DF03E75FDB19719D7D4A1EA2E96C6892E4DFE2CCE5
+270AC395C35FD67D3DBCAB406D4C94280330695B32A02AD3C22E70EC103B013D
+C19C1217918B73A9277D06381477CDFCE2EBE669C32AA739050744D17C70A123
+895BD49286F71E6B652A2229B74748EFA92A6C5B7D48A7BAE1C28466B29055FA
+AFEB8F5C1B5EF48F275914BA43FF69ABBFB88257FDD44E9DEB5152194BBF2F93
+B3206DDCBE111186A0A0E9B333E78A6C41464BDD44CB20F8891A6CBCED8A156B
+9F7DAB652BC815D55D00B24058EF0AA4AE0C2FFC6B66F4BDE302A269092EB14F
+E9914D98B822E7B39CAA36558FE6F4F2152FD5A91013B8F662DD2BC0CDD62FC4
+1BBB2BBAE9AB1E4ACCB11BDC4FB1F747656544086E8D21ED446F5B2260B2EED5
+BBAF97C726F285F7A2A188DC324C48F4D377E47E936BEC71180F6F1BDB42805B
+1F3756F1E66DA2F04AF5E7017D1704B577809C15D3D3FB5A1935EF65EAFD5625
+4973D54BBD8F644124E9FF4B427C286AC69962F50684AFEB84D26798D05198C0
+727EDE40FEAC2A3823DBBC6FA4E6ACBBF6339E9D5E1B494075C33830A48BD758
+8E4B6D89183C16269BB5E836E5476762C1F2C9FD80C63AE022AF735FCF8D8C4A
+F89CBD3A9319BFCD17AD391BC1155B686A98058A0D75280794FD4E28CD544E5D
+841473AD466705C57661EE1C22DA084C4FD829E520A28319D37ADC062658D0D6
+E45EC31185622890DE83B8A611FB3AEF735CD707EFADFBD5CCC483FA3602B6C4
+2304A26103CF1B97BD861E60FB13B8747C4E9E148DB7D22F4EC3F9FF03A5A8B6
+F6C15A2741B5F145E99CC34E713B88552D5505C9F0181EB3B1367F45FA15A9AC
+E1545A8B3C96E040C834068C7B87EE86400208E4E65FF1BDEDBB8DEC81C44F1B
+2DB1A9DF4729184909EDC5E281C85DA340D6C27C5C24DC2166C97DA7C38AB7F1
+588A88021F243325F01E50F2417022DF2F774BEF61F03C8676A42CD76614F031
+744968717D93A909AD2D0EA54081D49A4414824AF22C6528611FE3EE88DFA5A5
+197EA25B210BB50FC3C0644F7060AF976931B2E08F707D619E0DDAF3571BB4B7
+D282B942EDEFF96F0C7998F1BD8C43EE2999E6702DC217CBA6A864D6AECB356C
+1EB4E36373B3ADFB319260E09F8E4D3CFC9B47BE8946E901EDB52CC95DBC63EF
+8D885349BBD8DD4C00FBF8BC380A05C86DA5FED99988B3E4C4F0FFD553FE00A9
+4B92A431ABE1ED60F9D2CC8547A87B0344A937DD013B98A61E6C71FFADBF5D08
+A9E5BF0420E2B2537E3402637CAB32B63984C630061508165B5F51197DCF877C
+0AA3B5E45DE805E5E36E7CAE78639E079322A342D090530224CEE1687406C1D9
+5FEBF6110EF2E7B5EC50D64CE9502DD69B59C6682D291A7C9716891906EDBC4A
+20D7330879A1149E64F91B458F31CF2E137B5A8169341BFD4A3CFEA2693435A4
+D6F422D6E07401F8050F91AE9A01201F299F71DD3A8A2376ADA58E6C2464A9F7
+227098D6C41632CAC00F2C7AAE47A2305BD85098DE12832C178E4E403C223F96
+FC87D4461C213F67F9BEAA49088CC86FE601F5043FFE0E658505853D78E035EC
+2F5F3C69E56F003B87B7C7E3C6DC915E5AC569A34ADDBCFA433800F711EC3BBA
+08A3614611DEEA7DEEBE6E4ED805CB610359FD425F32502ABF570866D0503C6D
+CDC58137B262F8DA768447CC614F5B7EFAAB0F928173CA9969A71AED14D29D54
+781066DE27AE4EAAA5309DA5E6D69EF944B29D72DFF1E189713DA374CC01BC98
+C6EC4E392D32FAE44A40ECA2751E937BCED2C450F340C1A49B35264DE2ED4BD4
+EE31049CE030B7F97FB41E16529A81218AAE67270A41B2F1914C70B0FAFBBA83
+54A1BCCBCF230AC267AE2B9215D97399FDBA0A6BFF8E82F34F1F2B1CB366366C
+01276D47F71398CE06B8983954B5910DF20A67266274F03F6B4BE97A03FDE73C
+24BF09511A2ABABDD402A947B5DC1E679763BEF729E9CE0235680EECCD54AD40
+FE68BF2E5B989AA798BE8E9C95CD81EADAA1E1C2C91BDD181966C04349A65D70
+1A1C23A00149106603E2CCD3A16A748E94044247F04018635AD968B5F6A90D1B
+EDD6A191C1B1B25D9A844CC97515589A08A5893AF63ABE592713F9364AF1D7F2
+26F0518A6837A417205AA768038FBADBB4A3888594BEB1AE1627503BADFB8CA2
+1BE5467733A36AEF87802692388D8A67800C1DFA1D08022168C2C34846C2E095
+B14AD40C846F65113C1A5DC67A2BFC6DA14359031FC52CC0F121560EE60740D7
+6F41FEDB2B24B5584207818E25CCB5D63B309FC37F187596DEAF911D57BD425F
+E7937292270C5FE4C925405BFFCA37550A03A255A91DB500773D91C7AE9A77BD
+747D47ACF3DB95AFA5A5630BA4E0A279DDA5DF91EA82E09FE8CDB4005762D539
+10B0D9EEEA1E9AA509D2019B86FF6AE4F3CC744E4275FB94C45E378B9FE94F77
+E1F86A442544183959136A08F9FA9080666B6E6E9B7F4637CD2214637603F3A3
+20900CE03830841136C18E49FED16EA0937DACF9E4D325DC41F0C11F52FFF613
+B88531454F76F886E7CE1C9F958F8618F6AA63431403008F2954612A9F0C1507
+E9D2EF537AD4D181BA5F045B050E3B47B813DDC431DEECC94FC38B4312C63CF9
+833233D8950B7581413332783ADD8916D63F3ADF0A3F78CF1B9331C81A6E2FBA
+4CC027EBF22B76919EBAA46054E5B5685FBCE77FFF5AEEAA4A5DF853B26A58D5
+E090598475392B0C37B5FA40C2A93F4283B76DDF2CA65D64FB8417988F3A83BB
+129805F45082D908C293CCAEFF601199D316A073709F515B5C9562474713407B
+4A4E2306E6C200DCFF7C89D3A352D7D49EEECDCF49B0F08E26C3896599C24605
+38D3716622EA5007A19E6EA1BB87DE9FD010E0FCABC55D15BE25EA6841BFA0DD
+AB7EB6E837B7CB0064621291D9800940E6E6435332654C04E7BDFC1C58D59A88
+CBF7E12150848BC437F07964F6D80C0BF3
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMCSC10
+%!PS-AdobeFont-1.1: CMCSC10 1.0
+%%CreationDate: 1991 Aug 18 17:46:49
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.0) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMCSC10) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle 0 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMCSC10 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 45 /hyphen put
+dup 66 /B put
+dup 97 /a put
+dup 98 /b put
+dup 109 /m put
+dup 111 /o put
+readonly def
+/FontBBox{14 -250 1077 750}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
+3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
+532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
+B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
+986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
+D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A30EB76029337
+900ECFB1390CA5C0C3A04528044F266BA17BE487C79B94FAC6D6484684C5BFEA
+87BCCC77D40AD11552035E95E3007126418ED49B68468B38A14E88E68A267B98
+076F1C9769A5AFBC285E5B158EAC9F926F1D6C0B8F1D57D9C31D25AE27123518
+9D2CD92E5689E0213089BD268DA5E47525CB8EABAA4B78A15AEA34705889AB3A
+FFB8953B5B3482E52BFA0940630ADF8C0AC2177D907324299EE980E850F203CD
+B627962F43D5A678C44243CDE97853BDC6AB45FD5C09AD274DAF89929F583CC9
+CCC24BDFC68B92111055ABA5F26D2DC67C70906F71C2957701D65AE746A60C30
+40E6CB24B97FCDAD0487AE38A201FBF0E41BABD2181981A71940F1E707F91E5D
+C8CA50CB16D8702D188E56D014D92F76CE0B52ABDB9110E32438D2BBF3E6A40B
+7B005F10BB437812CAC6ED2996F7606DC962C4FDE207FF322782C343DF44CEC5
+FF06A55C630C20E9AE1B0D1C5673753C43BA0767D65D1B451CC6380D8BB3C4DC
+81E8FD8AA79BE993218686F29D3CD925566DD587F541A0DA1B1CC3BCEA2E6C7D
+5E1016F6917A871F1BBAD96AF9E867735017119A381FCF33EB2D3E1E7093FD90
+CDB0CED4818CFD9E201A03430CEC713620BE0D3254158931FB657C6877C1B3D2
+24030F377820DA58F4B95CFE645109F3F1B80DB5FACFD7D05AE2909EEFCF95AD
+9CB286C8B6C075CA2267C101B736139863186C193E31085E7C9FD88EF8BBECE3
+933542C85309013325B4BBFE9A5B606780C8580ABDA2F5D0064EBFC23939B307
+08568C3B7F5F053BF367DEBA349FABB9F760C44D100BDEEFBB01F27BFC61FA63
+A4A06A8A6DE448B703FAC1C902F6D832654461543E185CF1B37142BFA33E1913
+633A92C7B380198B75E8CC28B64D333DBA92DCE2AEE418CEB99E48407FA04A04
+0E73207A06249DFAC454D5EB9D2112895890A23B48BF607100098022247776E8
+C60FE5D2D70C58F9AE7CD3784B472A107667679EFF6E116A9EB3EDC99F046CF9
+A8CD2D6BE7C221153328341E11AE9278E0731AEDC76CA8CA325E823117C61DB1
+B05AE4F4331B6ABD34709C23AB7122D5D4EE7377BB370145C1215A6B4FCDCE65
+58E280472750192CB4F1DCD4DA0585550C54D144ABFF02A8F6D8B1790BE930E3
+F329DF254B93F197806901E22BC8DAC8DF48DD1AEC8DD743C4A8D1D409587FAF
+2D6B32BE71FC253D1B3BD187E2E68EB35825D483E38996B28B100F8BAF86FB61
+1CB157139BE29B8DC1BFDF34B657E553FF825581EF930E8B21AFB837E4398C78
+2362BFDC74832247C96F73A008B167A12C40678B3231AE7872C2CBAB4D732A70
+4762FC1AFD3F50A76272F03733E195F56AB448BE6620492EEE5C3CF1EF0C6586
+7D7611D1B8DC0560BE1C2E9349E978B9D222A1777F08FF9EA97C1C5784F1F956
+A8DB2F93261D23C083B8B40C2F1C97BEAE0632DBE35422C34630FF6055282834
+A54F041D5B58B6282E7732D3F1431850697BBF1176123FAAD27565F46057E868
+1447B85DEE1039BA28470A8693AF4CCB17E10150EC8DF3C3E6CB29039A1D7AA9
+EE984556B1289971DA3F60965CBD407D23C719EC20DDC8C34FF6E7CBB713F178
+CFB3021C6E7B63E28DD499F5A306884ACF2B8974627FEA48EEB388C06E24901E
+EB345701D3D38EA76DC739BB486EDFFFE19D22E42BA5CBA2DF98CC3401E9FBF6
+0A9E2D00B310007443CE445B6434D027DE576B935F731395170EE652FE00BE18
+36FA1918B11E1EFD187E3511FEC3F70A08E8176662791F44E8300316BBBFC5C0
+FBC082A7574E068BA50BDAA6ADB89EB3DC6AB45FCD1BCB6C8F5D7C8985B3E518
+9E20CD6664FA0713F86C07BEF879DF995E9926337CB956FE09CD32C1B14654B2
+668802D5D53805E5CA720656C63016E883ABD90B44E2B1D7C75BC44065098C46
+427B9C39FC7488B1DBB97038120D55F1CCB0177EB91943750AC6F09DAF903727
+8131C36B2D51316D7D86B851DD0AE5E26E5FAA29D5C7B6DB30951B1C982FE7F3
+2614167E28C719A80F4867828D60CCE3F4FE25A7320E3BCE656D8F5F0A6B3FA2
+4BDA28A470CA3E224FB11E41DC36E6466C14EBD4658D9D98799C8230D147C54A
+78FFF149CB937EDC69D0F0E44252D06458EC2EE82684E57AE494A783E6613BBA
+3085BC25B2FCE8EACF6A073567D02C21C4215C3DD11C38031D58DB41B6EF4B1B
+E287193C
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMR10
+%!PS-AdobeFont-1.1: CMR10 1.00B
+%%CreationDate: 1992 Feb 19 19:54:52
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.00B) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMR10) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle 0 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMR10 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 11 /ff put
+dup 12 /fi put
+dup 33 /exclam put
+dup 34 /quotedblright put
+dup 39 /quoteright put
+dup 40 /parenleft put
+dup 41 /parenright put
+dup 44 /comma put
+dup 45 /hyphen put
+dup 46 /period put
+dup 47 /slash put
+dup 48 /zero put
+dup 49 /one put
+dup 50 /two put
+dup 51 /three put
+dup 52 /four put
+dup 53 /five put
+dup 54 /six put
+dup 55 /seven put
+dup 56 /eight put
+dup 57 /nine put
+dup 58 /colon put
+dup 59 /semicolon put
+dup 63 /question put
+dup 65 /A put
+dup 66 /B put
+dup 67 /C put
+dup 68 /D put
+dup 69 /E put
+dup 70 /F put
+dup 71 /G put
+dup 72 /H put
+dup 73 /I put
+dup 74 /J put
+dup 75 /K put
+dup 76 /L put
+dup 77 /M put
+dup 78 /N put
+dup 79 /O put
+dup 80 /P put
+dup 82 /R put
+dup 83 /S put
+dup 84 /T put
+dup 85 /U put
+dup 87 /W put
+dup 88 /X put
+dup 89 /Y put
+dup 91 /bracketleft put
+dup 92 /quotedblleft put
+dup 93 /bracketright put
+dup 97 /a put
+dup 98 /b put
+dup 99 /c put
+dup 100 /d put
+dup 101 /e put
+dup 102 /f put
+dup 103 /g put
+dup 104 /h put
+dup 105 /i put
+dup 106 /j put
+dup 107 /k put
+dup 108 /l put
+dup 109 /m put
+dup 110 /n put
+dup 111 /o put
+dup 112 /p put
+dup 113 /q put
+dup 114 /r put
+dup 115 /s put
+dup 116 /t put
+dup 117 /u put
+dup 118 /v put
+dup 119 /w put
+dup 120 /x put
+dup 121 /y put
+dup 122 /z put
+dup 123 /endash put
+dup 124 /emdash put
+readonly def
+/FontBBox{-251 -250 1009 969}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
+016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
+9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
+D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
+469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
+2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
+87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
+D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
+92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
+295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
+409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
+4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
+2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
+0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
+B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
+24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
+43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
+D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
+5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
+96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
+7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
+0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
+B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
+AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
+97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
+FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
+20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
+956897A7BC784E9865B00EE8B49B918E886049F1F4939403EADAB83A4D8C332E
+2221AF8F6F4A4954501CB6A6268AC96F7091245F034BD65542DF47BC7BBAD667
+1EE6AF9187E298CB7AABA58E3FB5B4C7E86616C1A830A4A937C265CC28A83EED
+8F3C971D6DF5A50A615B713F5332E0CF05C754FD76916FECE4DB2807334C34E1
+E2418FFF1B4429A564AB857F1E23337C75E729645AEBE7F8967630A40E00F8C1
+3054F2BE2768682E50D0B43E3CE3897D9EE7257E77F9894CD4395C21585D16F8
+AEFE05217ED4F78C31FD635A00CE5D0DFC7B0A6BF9444B62C836087731D6D205
+24A45B3C8D80983A67377EBBEE171DE0B4A21368F9B83AF7CB286D8389785E93
+B11277C65D4D789AF99B1D7A3032947A51DFABA0DA3B94D8D4205BE243264127
+474D97F3572385018D62ED4B1A399B8E4AED8D7C329F109DBE3015A727DD70ED
+6DE4DB36BF48205C8CE0EC0A77491A26F93F7C0A036827625F115786A2ACF14D
+47E189148216456EECF3BBAE34408904A558C8A43E369A01C4BB7D2BBBBFB271
+A89201777264C399F3925DACEC43096BFC6EED7D5B536D9846B22B75BE321739
+617F870A37FD856F27DE34A7C074CEF6B4BA9FC0B753B7C131679493C02EC750
+3AB8E866E4819E07E64DC71477A5BCFC19948EF5E7EBC3C291A8F65464223898
+3862200BEB8190285A865AA4CBB18B3E6F253D77C80A00332184637C6C4BA101
+A9B72E249AD37DEE4548C0F48F5CCD7296482781762BE90D4CB4FCA088E40FD4
+C806A80092FA941C986E25AC339E83BCD2A5F6D13A3399C214EC99A23AC0CC93
+8F49DCA9873E5AB5C9061AFE19F6861034BDF25CB9CDAEF9D75039974F55DA07
+9C05AE1BC2FD795BB202B2472C6EE759981E943CD725EDA6ED083BD4F48D015D
+27EDD4D1F61A9317984B1994028550A8DBB59EF6D6594FD2034FC0223195D44A
+790435D7FFF2BADC68AA5C7AD534EA4CD018EEA09F8C992493A452FB8EAB8DA3
+87D121A0B4E30BE8EC1A9A84A3A6B1F7A2D3A80DC8A9CBEAD6DAA641DEEC76DE
+0419B86A4D8531DA4EC3D99E77782C32EFBD53D8605EAF896504D05396232CCA
+1AB6D7D778AF769937C1C329B2253C02D87793DAEB05C87A2BD9681EC090BF14
+4C4A6D921DEF7E745F14160871BD172CBC29E443E858F1B97BAEAA5CF951B5C5
+456D4AA23E3B733745CEBD62E7C87AC75422BA56B31DEA9206B0C03703A3C93E
+25C8617D34F7FBA7ECB71D5A2F357435AE71B6C05BB07B4C208CF207AA05C9DA
+6A1A80E9A0E3E510D5EF12A40D9D71496E6E56729E97172263A505341C4E62B3
+7BD14A415AF1D92FBBCA8340AEB3B8BD5CB37BA76A715238B61A4A3DA50CC9AD
+DD6522EE907D739393888CB71340D4720C857CD6C9C3E3260C7B6F04A43CDF29
+7EBD29C3DD1A7B598CA74289BFE2320490B0DE4976798D5691BDA31C60BF0DD6
+CF12666CC41BA69D895CBC66B7C0175FAC3867D9AC4A7A81E25E46393E4E875F
+C3BEE1C2EDD0D25C8A9057FC15F7189AEA82F26A10688E41C25F1E1F1EC0170E
+7BA97A484BA77DB8FB5E3088EE4CC57E49880BF61BA1F4C602B1470750E59148
+A55600858448D8859DD3FD995233E497B87632B04FDD63CBFD4F8E896EEFE4A7
+A3549B44390F4DE87B9C9010D8BDC870A7AF887CCA3ADF4E6D580CF40ED324EE
+D18EBB7C22F83311F94C9935770B3B97D69FF71739831D623398F089B99102BF
+4B8B8E362F6DFD255889767D0CDC648146EF1417D5C0F6F9A45426516FDB211F
+FB1E9114EF4744FC7921A8394CAEA3054765399686DC79E0C1AE112DD217E9EB
+E283D7DC29C15C3C43BE4E7809904AA99B5E44D2711C96BD32E79B21D86ED5E0
+CCEB6D7F64EBD7038F98621FD14363FBC6039F0279C8B29073F4DE947E692C35
+47706C2665AD8C0A4FB2E6E19410DA7E1DDE3D0877DB0B935C5CEC31F553469A
+8F9383425735CB8DB9E94E16ED682C4AF1CE8116CBA7966C787AAC86F85F0998
+2303354E133CF65BB1DC75E80642B6AA8FD279EEF82768F76BE91F888D945FE4
+FDE9899D43931810EFD6E3251D5B9AF26BA9640285D8E9212C0B4EE96A071F42
+2B34C898B14A9725FC0B3F0609A19E55D89477FBD952B858AA9567EFBDCA9B6D
+1A2DFDE3B6460F2AF259A860BD85C28883884EA1DC8C08BC670EBB4FFC61B07A
+31B27B4CE88C2A4BB577932854C91EC484E4C2FE42CB74C76F26B20CAFF98BE4
+BA375C5A16CF8DDBF58586CAD9605058FF0885D7BD15F9216D547B5A4D99FDC8
+844B4EED2E0674C7F3BF8A9769B7A2CEFB48850953B54219CD3E8734607F7BEF
+8633FA9345ED8E56112D46F5B93AB688B6F5A88AD111866B2632087B1939E9E6
+69736BF59E95106332F30CAF7A7F385A613D92A71F88C91657543F39655986BA
+895AF57C9829AC3E9CAD64CADAC477CF4E98B2FB51ED94A9F6D73F3775A9402A
+CBA740B550586A4E38561CDB3C2395FC4D32C7539B01E26A95F831F4EF5DC8E0
+91D9F3B2D6AB684361042F069695B7D9770759FB0081D75EBF428FA26DE3E78B
+DDD19D3EFA00D4D04811A52443A63D563F92EBD7BC1521564ADF1107994F5ED0
+C5C4659B3EE9FF14CE7CCCCEDCF544FA87E3DD99866CC3B68622C593E053C0F4
+607C4667AE257C8689A0D5EEA55895F7AB07E38511D57ABC7A5FAFAA272E5973
+109747491B7A9A129E60AA91564C900844F9FE6091452015D33DE3A064A86BBB
+F3FB9FE5A2DD490433563E3F766E255BE6485F1D910E0634D5498480DA6FDEF1
+73C84FE6E534D81D7A7BB100E528B39E0916F4536475279E7088155986FA2AFF
+636F49D7C9D2743B646C20DB985E7F6AC6A8ECCDA3E7CA241EEDC54E561835A1
+FAFFA9B223B58C718C83FDA8A47015FBA1D36EB014D1E02E995A533740B5BF67
+5D83F5F858E9043C3BA9E41F545FF423DE06AF8F2D6D9E93218A9CA5EFBCB937
+A1F2E3CB61B31889AC1DCAE84ECFDECC60451D1E31B563F8850797824A2C0237
+8DD2FC23BC622F1C88A95D9E2E7CB1E24EB1C43F25523D43689049EBF91D5E4A
+711D0DA742FCF8359D8FE7A5BA5ED803ED5DA49AC46CA913549F300128373096
+876A1B44C5F3BBBB6F478701E9C5DE361CF67824AC8B288082ADAF71FA70C873
+C1FE3AD5BDE8F993AE969FAFD3DCECCA8B5D54069C8E9B791FED70505E56EB05
+067AFCEDA57ADE518603135F6045968E7E4866BD76C83BCC8E27F1E0B02B132A
+5421E0C688736DACF40F152F9059B8EE5BC9C274248345DAC297B7F7C0E9C9F1
+3EFE4180721E9BFF215C13BC0A06F43BEFF4E0B8039AC2C94C269C70B1228623
+55616BC4D8DEA4830F73CE989BA16A21C95CA117B620E057DBEBE61C71D02927
+7641F797AF9342F422329C7204DF0C217BF9219E5E2E7142F5FBD25B587CC0B2
+9822BA136A3C07EAE82FB374B1C56DA52C3F3204D402CF6C1F6361D74CD03D97
+5C82FD2F1F52C39D26B0EB7729EF64131A531D0E68B959AE7EE633393E94DD3D
+9F4AE3AFCB0A94637B9FD98B53CEA265525C7A975B8B74FF71A60A6409F36D97
+0B0FF67C5F5786049F8651E60D865F2B4611DF1C0157B81AA78C24410F04EEF0
+10638D9CF7A9FC33AD250CB073FB1C9C59EC1593C212F46A7882D7D71F18335A
+01393BAFC05D1B0C3655450AD56C91CB20FF7A4772DD9C8B0EB64742D9764868
+24F87C9E23CB5C0FCB69B04EA7AABF774B8B750A7C4A1F781290A006B1C63E21
+6A6E62BEB6861F39FCF0016E9F9E388F8748A58C176AC556AD65546C40A32713
+CD2B491BE54B58CBDBBB31205FBA1A26989B34B152953ECEC0DF32EF1482D5AC
+D85D5C655CEC11302D1D4E22E531AFA0889594940D2BC5A9C8781100287A6B6F
+6A1B467A9346B2177C76D4EE0C32AD104B72CC8CCE07306568C050ABFA309388
+91BBBAF57241D1CC24C83451996E9684F478F292F99CB0688941816694E56CC2
+E3EDB7909266BB548AF348F9E0412F6D8BAA1C86A79F3B0C18C2883D12A6C15E
+F670B2DE35BAF6F9F3753CDD3EFF9F6D1EE227BE58CAC5D7957317F0196BE9F3
+092CFC8CE10EB7464616A838E84119ED28D478328FC88B073BAA4899921DBF71
+51822F4D9A0F035DA09714ED8EAECDA7616A54F052079BAF1CCC2E9B255E8479
+01721E52000702B529E8F64316590AA3349DD3417E49BFA0EB27F16827F4DA1C
+0F07C0C7E67123821E5CD4E36F6E12313BF7AB42CDB39438F9EED2738A8FCE9B
+A568968B2B2B7D176E2AC0EB12F45460381F5C5D5DB42F82B4DBC1A227E642D8
+B5207E0BBA8FF70659970E06DA9D54C0A3B900DCA595C1D54553985BE93D84F6
+B1F7601AC532FB451C387A2DA560BDA55FC4B70E1AD78693CEAC67B8029C66AF
+5057E7DDBD55637227603AE5F3CBC33BC7A0EBF3B5BCF412990B754CF61072E1
+913370EE5D85D06402B115A1836C588BB08AE9264F146D5D5EC1925D3C889D9E
+7F8E430E872F5BC5F6FDAC2BB9CD62D0CF1963A6331E341EAC3A9545C0597C58
+51DA9A7FC0F951642C5E8B824232DD23BE2F112B418360D10F792CC73770F6B8
+A4FB00D84F38DB65F48DC221AFD00A1343730C792669DE1009D8D5BF6C97319E
+3517204B1900A946AE84C9DDECFA6CE510073FDDC7AFECD71E5850737A7345F0
+F171B690E67B4CE29D81E322B482B19FCF1B2852AB4CFA58EBEB080F58903267
+0A2DD5A201D4D6E178EA6681C9CAB2D64F37BE40A5CBBB85C5611EB7094DD0AB
+6DBDD7E9A96494FFC331E397E6918FCD80C41EEF700467DCF8255535523C76E5
+6F6D3648ECFA66238933671F6C11D90A0FEBCA48F228AA7E97DABBBA8BBAA733
+96D98786A6227563EA9499C46DDCA0FCD5129BB295DDC6D3A08A76286B67E47B
+2A29A0734CF614A28B80DD8FEC9E7BAE6A952EEB4756B9664CE010FD7804E687
+07811F83E6698DC5F0508452D6123619E37AF5C7D2116105F0F1612D8E952077
+960D0EA0E9FD44DC6EAB1DEE1CDE746A627AA8FD5F62C055A75AE4603327C39B
+FD1F787E5B8E8233CEE19D1BCE065FB780D66EC898D6496537F5A18AC660C160
+486CF7DD1ED85F59844CB66C65234BCDE4EAD8FEFBE70B97DAF4DAFE83B8C5A9
+D3469C0E158A289FEF3F6764251C73BDB1D7C3371D17E2FEC59AB37A400464C1
+FE508805E7E8D1B734DC5D56A0AD435B28BBCD32033443305C0541DE0ED60BBA
+F89719139F32DBA4486A288E7BC62BCD1622A00A9B4F0F8D2BD512B8662720D8
+7121582CEB695CCF70BFB4E0DD5215A2FD772486421CF17672DC21F70B43D18E
+E66BDA49DA60CAC38F7B884817ACB8E1E1206B5F3F4D391BE7391108676FDE7C
+AE77CBA9BEA503F5C78BCFDE2FB5D8700E7A852CE23DC4132BF5113ED470D551
+9DC2E1DA964577809CBF76D0A7257F13E6BADDFD017EDCFAF0F0895106741B9E
+40A1DBDD7D5D97A3C83AC0EB64EF2C9A761C8FCB7BA22DB1045015BF9678E8CD
+D3BED4F735B6F8A0902E43A24904D27372C1FECDE854473A7D826782B4482A46
+142BCD5EA924ACFE0276E6CD0739954CEF9CEE49E11544FB3DBA77A87F43CEF3
+8619354F479F0DA7C52F861CB3FB2D1CC905EDD180600D87731F26CE9B42A535
+F2358C99227F246C0FBBDBA1145738990616E5CB3B7A20E62BEDB035430347B5
+F549EFDF5B447B6BC7E34C5F9E243E9C13CAB46491F30741896E59CFCFED98DD
+499B8BB234953DFA17A2160E9DD5D12C0461B5599B06865EC0820C25AA91BCF9
+08EF56A38276CC06BD7D74D5AED69BFD8F7823E000A0C9042154501F9F247B9E
+90050D7A572B963100D4EA390D612D2F28CEF81D112DA77EA9FA0C0EAD435DF9
+022A89E97587CD680462ABDAB23FC8C1148B8DED8126B7EC8F8FB5ECE5B472EC
+4578E00AD41679998C4B69B2BC5D200EBE7A2ECF58DE3EEA5B3995033F3B5B95
+259854BF373E6F473D64C7A80DC4132A79835B75C1A4207FC05914F58A35D2B3
+2D53920940320E3F4B1DC2C8B5BF93EF4B10A8FFACAD081E571BE5CA2B98E470
+6C7569F49935AE93F69927FCAAFA6801C0807989441DC923D131D57114CC8D23
+99C9AAB725B62238104F76BE7D5D383AF211D8D29FF7D2D7034D4B704552440B
+2B6C38498381122B3EA67F55769A52AA2502DB8E3DB363B6893828F9E519A8C7
+34DD06BE7CB69CD4284F4CBD75B1439F860F9794BF49820248B64DC4036B7FC1
+06E0028E240073D24611668EB4F0BF8AACB497051854E90C78893DAB4BC454EB
+BD3E0F20870D48A888558693E56A4134C2DEF26B60803FFAD469A7EA5FD9C157
+990BB2585559D8DBF18F57E5C6B188B9B9DCAFDD10800806DBC18055C26B5B4B
+84A2984E3008BBD3B1BBC11F6B06303D60B13407CDA274C554B2E87F3317A361
+56974832849870483C76655D86A4B3D7FDBF8BC5842C967F34C166C3980FE975
+0DC27C31F1F0C41A3F9ECCC959A200759D19E8FF051342A140A30EE396AAD4AD
+6632E07F39AD75E3DDCE6FE597C38B6F037AB2D84D421C50A848AE71CA2D58E3
+0FD5CA21AA6C587E052DBE2F969B9B9351A20914C8331DC151BFCD65371E9FA0
+A596D405E65AB83B1AA6B17AD91F58C7C0C724DB4C07445DFD8399E6ADA84FC0
+8E3D7F6062D7A2DDE2C6DC79032FF1AD910CD10370AA1991646289F7D696EBBA
+DEB49028F5323084C9003AC544D60901DEA4DD51D7866B4F9F39B41DFBD40825
+1A6FA75C36F630CA8F670E6435E6110CB7DCA4F25C56D7F151872B53837CF5D5
+E19224A0983916596BBA35AC5FC104E54163D8B4CB1BEA0A8A2FFE9FA703CA89
+E1792413B14752285E2B7BF9E1C4822DB1772AFF583E109FD908CA26E661516A
+092BB9A39792AFF17140D634DB81EDD238315767CDD90E578FE99D22E2D144E4
+EB794EAF19C7CBA3B87CB0177F91F0F67A125C2AE8FD73AE6DE954E55A589CF2
+D320F6ADDA9F8FC6900686964A24765E0B37BCD009EFB5BAA80EEDE3F550DE0F
+8B81D2FA8043EFECEB40E434464DFFA0D371D67421C79532CA60F5D0526999BB
+1DC004251627363A28DA78D01D2F84403DD309F8DDE54F097C66DFBEF24AE6DE
+DE724CC3D8735D58B911D6176616B606E735A5EFD3D170BFCE8CE8B60440E2D0
+136591AEAFD12328107E69E22FAFB8B51DE9E1494A3C23F3F55C074B604F8F52
+737B74CD2BC4DE1BB1323B390CC178917DADAE7517B6AA7B46998ED2DC573B70
+B3E692852F7819AEC13F543ABAA01C6F3036923AAC904261993575A2F6E99C36
+7C2CA81EF7F6AD13F3E352A2566BAD09F2A92260B726CFD866082E9A523E430A
+65DFDE675D2791FB10A38859DFEDC90C34F6EE4F5E2E24B4BE1766DC9300E0F7
+7586FC6246AE2E931B1D4A1A199C7DBD6830D63100E0571AD40EF9A8DC0CC5F9
+787308671CBEF4B350703570B61AA7FDD3E776F617D00F22582618E5599984D0
+1B17D1B04F98FD282B95DE618EC598560C4BD7FB7D3DAC9331A551B0D28F36DE
+B053138807E94B882BF82498EB43CAD7B3F54E6A784C9D9DA1468E14831CCBC3
+702C5653613B589E6FCE1944845E21F4C317DCDBA68EC6DD5E5D8D4BD83A2C0D
+9FDCE0CF7CE2DE27FB73AD982C1C7B9589AD16A72E3C87678612CF0ACCE6CB17
+8899F46F3615590854FE861A131FC6D2A5800D4EAE1F6F898DAC30FB0F976F97
+ADD83A3240EC7A1C7588C010A49306412A20C5DA57158457E2DD6800D58AF306
+C0154FD5486B65AF7BDF0C687D835379539D1561A363DF66A435D5C5561827E8
+53E4E8E969D9B6A1557F2C79DCE6A3E15748F9ADD4352068D094A00B5914F91A
+C98F3C0E2DE30E5AD7F6686F36DAE5EA3CEA7AFF9CD388035E6A62F796C92DF5
+218064BB8EB3AA716BC34FBC9B4D3915E7E564F779A0AB5873D3DB75E124F224
+34EFB6E5257953E1A23F23FB7DF820572FEA143A14CC6F9D1A13D294D80E95FC
+243304957ADA14B5B05B5CCF8B1C4897B23ECF1982687043854CEEEE66F4425B
+67858997715CA99901F10F87D13D296663E536B09ED6541D4607295A6092BB0B
+CECF9C9A28BA1AEA8A8DB568B7F07555E541E339B0E14E208EE689F73944648C
+97BBDB12EEFA9A689D61D676F40CC399509441F57F25C2E1945B938E3B82239E
+FBC02CCFFABE0F2E13D215F8D1AC07E0C088ED67E3233187042DF2FFFAB37B7C
+466069A5F175E9626D3D7A92B5AE97F93948B7EAF64C73A435EA60A71EEFC1A8
+47C156F2F5DD647E02F6EDDC796A2CE90A427DCAB35500DC4284846C9998FD53
+65E48E2A51A836A489E18925380EED8617D9F42E9C4782503286389B97B018F0
+6268483D03441946BCB78264A55AC7378767567D21DC2E7AF7ACB4DE7F3E0DA5
+E443085709AAD31C639E8F3410584960579BA59A4C6C61399FF785ECB347D00D
+1797482B40DA5547FC321A2DB8494E10C0457BCA1D62CA3F623FB5DA37A700E7
+37B1DAC3283BBC538FAF2B6FAB8C35BAD9466C3B48093AC71C650CDB98DBC790
+755C75112BCBE7A7CA903E020BC067FB2DB3705BA595004F5BECA4B5AFC9D489
+4373E5266EFC489974B7095FD56D05510777E5724966FDDB19FADF8E043E80AD
+D26678C07DC9925C000ED5A6B8CF15D1D1EB75BC9C2F2CC60BB757A0FACE3F2D
+6CAAEEB10B6B1B3C3F8091B9847AB1055BC7A2A515247C8778F3401C331ABDEE
+F66F404AF7976961A7A61A5571AB1CFA6028AD2A70868CF3DAD8F8A350D81AC8
+88A958C3EF918ADC14A66C185874699A24E10BACD15241754D64062A6930B7BB
+B993D6C788EE8C15F94A14165FCD320D807ADDC01ADF6C26EBE079F49D1B23A8
+DE1C1A72806C5F490D035E175FF7519B83570B6F13D2697CD7289B48412C9DFE
+BE12EA39215B6C11F9A2471BA74B966686A8940535BE0E0FE3FB9AC995323B14
+9A991F35A058365A6E98F23568B20CB50B3A8CBAFEF92191608E8F010898DB2F
+4BA8C149C8B7AE851A03C59D1CF709D0C395492D353C3B16D2565D18709DDC6C
+4A2BA7FEA1C48758D65DDBDECB1D0718E817119A8B3E6F72A59C4EB672CE3221
+53BE8E05960C366D1CFB10A19A4714357699370C8CCABBA81F31346707F7016D
+FB88CE7A8C736669A49C5F32FA057EF6489DA32A89BAECABDFEF5CFF9E80023E
+4D9014A75ED5BD5F39A41D483B98BF8CB7630FDC97D25CDB50E0651B8666E3F0
+1BA404E3EA91EEFE8534DD883C23F9EDA6B76055B2454F20DA888A31D4B49C04
+4F63CBA6238D9D2473491DC1EA12B907287B8B7DE82D4D84A33FF97E427DA72A
+3FC6F7E6021B7186CBC3226310E53487FFE892D230F7C6E8E53DC0E0ADCBFD90
+B17347AEDE0E413667E7256E4643084040D770DB8F8794597AADED3541D2C254
+A8BF170F3FB4B04241B1180FAE4863181D904CB2078157969B6C12EE30547DAB
+0F68F0FDF27A7060B37FCE55DDEE8F82309BD82F351066E3DEAB950DE0DB828E
+BF510AAC9F6564D6F9A248D270E97D97FDEEFECC37DEA687E8C1373C094A0798
+3E3887ECE5AD695D542C7DC3EAB0DFE4676DBD202A2FD86D9D30B6020FD37E6F
+3F935D90A1B5486552CCEA3AC51E7D06CEB784E85EBD71EC3BB4CEA23BA531CE
+133CDE2B1E41DD31CC9656066CF13B76A99012B4F6E6400E37D58EFF0193B6C2
+CADCB5EA3E8CAC2965760EEBA405B0E8EEB13E6F674E01563C887ADF93BAF187
+3B211CAAEA574F37C3D2B92BE6F6A0A2EC9FCE5B796C1F04BD5D7DA2B0C483FD
+A0613446C53B8CF504BC8A0132217577930CF9CF77E3D6CBC15B293AF85A1793
+4394D4D47FA23F2386FAC1373920940CD77D0274E7FCD3AC814A20D6022BCB47
+6AA44DFE556C4D84B868F0A6F1EC5301940D12380B1091320B9BFE647A83A3C5
+FD7650AB04198B2B34379535F2E39D039B1DD03370D0034E84C024A030D875AB
+F398DEAFEC0C977F2D6DB2B9206381EF306FAE38D960314F06C431639254261C
+1F362E090ED60CC8C9768DA60D818AA861ACA05DADE9F21BE0F4180FED6C74E7
+52492117E5CF93E05ADF31B1D4EA18B78670E578207C50B6692BF3A706C1F24F
+36484B70498F51D420BA00C86AA897595ECBBF760292150D947C1BA954711043
+207CF8E5B41405F4494DA716F5DB1C49FDA6D9B7216A8092DFB51011F16B8EE5
+C52B02CCEDDFD6AAE3BEFB6EB5091FB41CCFE40C20A70D300049819AF00617A8
+2E4F472A2BB02631B68064DF95243C4A8D867047631E3B5CAB6AA523F5D6B846
+7B0563C9AE73B9A5ACB246FB95ADD32682AE9C2FF2C70FAC5B065762C91232AA
+B4610668C1931EE12665CED49E06F4D665B9C52CFD41D4B549BF5DC49AA532A2
+4CE7DC30E08EAF95542B20B31EB2E81887415FDAF31D59568BB7A36B761EEAB1
+EE7F81B08A3CA8AAAD1CA7BB9F0D5E31B9BEF317AC2FBACB57142AF5A53B5968
+22B72E45EB8568C3D4D5D22828EDA8937C795BA9DDE3F0619FF94B51B1B74FC0
+2D8F5E12C4F87472477BEF54AA490FF96BE166E7D8F6F6079A0EF2435562F968
+CDD41ED6CD6A1187A075B8C9351070777E281E47D57CF2359DB62E847D5CD628
+9F91CE11156EFAE5BF13A3DBC7DA19FEDFE30629D4E70ABC5D3E9F7B9E47E465
+F98D8BC6AA559017B77F4C00CE2A77A4AC4031DE2F625215321C78276CBDBF91
+9467083F2C50F6C0E553830686770E0F7CC0238520154E35E5B0211C386FD088
+73EB75E128E7E4EFBF89FCAF8B672C66AB37F1B9BD55BB6BC4D4BA122E436C3A
+807E57514AC36D43CC9E4D6F117E5CEEC092914CFD23F64D84E48BA263E97381
+6F39BA0CF3F742DEA181A6AEBFF9269BD88CB6DE0BB13A5010A2BBB9EBE3EAC1
+743A855493F661B75510718CF6C2DA5D4401C83852FF80E66678397BDDAC643B
+00CD2C7FB534311ACC25BEA1DEF38C607CBE249D4AC1EB835E13BAA0F223B59C
+64F0E9CDC858E4C58F359AE7C0D7BC3428C31CBDD63F0258A31A92C9F31D4DD9
+42C79D68E90600E8B5EDCBFCB56D7C7A311921EFA103139C3146686029BC1679
+D6532C021542A1AA912BC8D223FF1EA90FD1B4A91BF0AED320A75B29B701F16F
+C8481CDF8DB5FB19DB1DF217475EE8C97C1120FEAB6E09DFF65E41BECA11E25D
+D2D5CEF96EF6B3132B8E0736ED4EBD4B2064775FDCDEC219B083A5183DC94103
+B1B24223E46A8A6D8A2D7348E7A65DD23D735B2ADEFE2230BE85A26DA1D2CAFB
+31793BEC92B854E0983D08FC8A183091074B95C6683630B3BC258078AC8B5CA6
+C9810D515EAAB381BDA272B6422F690E994C18176A2700D0A17A0DE09E988AA6
+EE886EE8F4806FCED913575B6179F428AEDB36A27F05375B15C28CBDF0583254
+B263DE4DCBD1BE0C1F14ACE66DE3BBD601F1D1B3DB88F12C610C7306B02305C3
+6EBB4B95F2CACC5A397F80B60F5890AC8F27CE9B4FC2E4A20257BD43E29D09B0
+EB6C9BEB8A34666C35191AD4B319942A69D9BDCDDED0D3445B31EC2B79500B22
+4792443DB7502C4068A4B1E08B4D6FBB06C37E27AC018F3884826A11B11D7449
+E3BAA3FC2588862BE47C658D65A3CD5245E7F994363031C65473033CBE967FB2
+FEDC3B195F0A5B78B6CB6511BFD392E845D2824A58E00B7A3D395955CB5F13E1
+628B19403648C8DB5FBFE2DDB3C7D261ED2C30DA00C159B0019B977C0B0E157C
+0DE34E3647746FFB9AD66ABF6B267C068BC7E522F3641AFEB554C366C7B1BA2E
+6CBC2FCECA470E7092FD80608053D0E459C5B265C76B0E605EBBEAB9ACB589E6
+F7BCFD562FDFE92A838E0624416FAB9048FB83101040671CAD42A5393EFE72EF
+8A40DB4F9F752746194B315157B5879DA8139BE03563D41BA7376396AF68B3B1
+2578577299428AB94127DD474AA8BF5DCB56A197F7F6E11DB4D11B8AA6551F86
+C7D4D72EF2039324B6AFBE5EC647B9B339F3CB41643095C97957DFE56756FE68
+958653CDBFCF38F011CF551AE963D14692FA17C8A1BA8B7AF5FA112593426068
+4AEDCF3A69E8C4244519B2DBBAE3701B749501F7AA83E408742BB384618EF180
+D63121CE2EF6AEBE3A970E71AB6F4FCD3DD4A388E83F26F63A9ADCA083D4458E
+F448FCAB6692C4EF529C3D170A5D08DD8B79398630F4069F77779033EEA4FD31
+6A063A81579E2DA43AC8BA301464B33A037847F7DCA4E2D65A7926D873C7B54B
+211A8595643E3BB10D9146CA0E95B00CE8A6CDAEF27DAFA2E6BB1BCFECF50FCD
+94AECF68A0FD20915347BE21D6840A4CBE0A483D715182EC541FA6DA77047A49
+C82512124EA2F0FE60D37E20C4EA24C9DBC75B0FF236FEF0B0F5E7A226D43044
+CBDFA2F1BFE4E012AD6FEBDE600C16D6346F8217FA22BCEB3B6C8B3635F47B5D
+7662D6E38FD3C9D82BA1ECE0B07E9EFBA659F03ADB5E71C5196E7FA032CA7A41
+F44D54F9D72DDCDDC9A47FCB02DF8FCAE3825F02096D5AE128DC6AB15895FC86
+C171C1C6FA7525191FDDC3CE15717032B073611A280952D55F65A09BA2163E15
+2EEE51D0B1E0E479D62005FB0BEA149A9A6F71A027333EBD6AE513CC5073596F
+94C84F97F8136FCC78EA2DEF25643F78BFC202B2FAB19899FE640FFC11E4DCD6
+EC5381D256117EA5CEEEEF0D670227B6CA338B33E869E2E7D639FD561609D8CA
+31B7A0C1A5D5B112292835946C6E30224199D8FEF6736FBC2C0CFE9D7786967A
+DFE0736CE9A3EDEEC5F04D0AC39EE8D05EA601C16E30A435BE0D6A5B0662044A
+B795D660E45A44BABC20E40C9B4F456368EE3E3710B254995ADC495470FF545A
+000876776FEB42A5684B03F036A712C23900D646A306377DCE20E6D05362C246
+4B27391A08B315FB7C9C52970CD522F93C4BE394C34B25581704E78CC7847474
+44149B0323458133BB6534FBC4547FDA8889541440BCD6D773A9EF7E0983FF66
+00A76BA8CDA12D82FAC65EB8C6A54A8C23D13B81D3E5DBE66CE1ED379C913C74
+ECBD3A6482E7EA3F5E435694CE721ED36232E4856BF96CE8AAE54A81B61E4D30
+19D53EBD32283F87D3DFB8285EBEF0BAAA3B4946C2D62CDC1BFE89FD0040CEF8
+E5818466EF8E8381EB9A4367CF9F8E4BCC9AE1934EDDB8A02635248FDFCF8473
+FB1F201D1885DF0803C27E8D8F1FCC32DAB96367DEC375EAF92EED5F42463F39
+DD3BD56B2CD73418B104855AC67503ACBCCDDD4873CBD4E35606251680199C88
+04C79802DC9F1B9BD0B27F7DE2C8B9C10F82FD64801F675C8A4E6D9964698DD6
+69A17F0BE282A9F78F33C66D4803F1DBBC9B610835C58BD5FF1EE15A801B3419
+FDE50142E41BF00A6035C5A0D3B2C6EB3F9AA4FD44E223CD602871F89191AB92
+C0BF91F9FC7784381203B05E28D902A5B1397E2A6F3B420427F10483D7655238
+6069F0119A27F7E0EAD2A9EC83490CF0C39BAA7A3C93239399EC1E7E9430246C
+80D0138560C3D3CDE63AFFB5F6FA5F358EEDEE282073ABB7FBFB99AA211A2BFA
+E59FC548CC5E426199198EED90ABC133741178883E9B2CF32BF6EA4086FF187E
+B66B2EDEEAAF6C60B9736A62581442B3A590CD83BAF728830C1BD3F1063CC581
+2D3D0D4EE70DB55C3056B9BA95E2EF50D3343E9FD79201BFD9F0E5A049322EFF
+3484E3F3A4EF4E46D2627C3095CB0ACF13BB7F1ED7840B9432F61DDCAFE4DAF7
+51000DDC5922A60A2BB5E38922225C52C7635AB5B3FBA6AEA46B6E3AF5F76281
+11816B2AA79F6893CC9662AB654F22DCA777A55C835E8AE3D5E70226489A7B12
+7E000D88932C1FA70A38C6CA411216D2C50B319795F8D92B5F9E635500A8C1A7
+ECE9D40C12F0172FCB542883BF53FD81B049922FC0C0042B483C1723F09CE41F
+8442C553DBC704B60083BA7105290B5F8F366785BD07D4C365D13B3DE4326874
+1E5E73190B34EFDFD75AF29291484613A7BAA56F51E93A02C2038679F893342F
+5782725C167B73E070A75E4B2D49A2A21185739BCCBFA2B970AAE0847ED1D43A
+6E8499A032C45C463A58632ECC216E68FDAB3170D7517A004522D15D1F0244F7
+EEB0709BD42DDFA27258A8B720F22AC93F6858224F3835E24F9FF51292160FE2
+5E9CBCECFD4D997155FDBD56BD86A3A1462DBBC69AEBCFF9D3C504986BAFDBE5
+C111025CF8E1749C733C69899FA27A063673E976994E7920043EEB1774047BC0
+C5E03400779A41E7B5486F370E1E74CD32B1359720287EAB41E224C656FFD85C
+E31AFF26F452481E540E1CF95D72D1F41367E3D63F83C70A093957FF2218D8E6
+2911CEDBD25483B6C6AE460BD26330925F7789E854BEE1B0A83ECB0567FA25A5
+101986694D5AEE783DDD8035E502885A05C5C30759E833464192E3664A020F0A
+D5FEB6A616196065C7D1D49EF0BED736F97827634DA1671832A87949620D2C62
+69ADC87DBC8465BB1620F2FDB95D4A01884463F9A10BDEA7950BA2C616CF3052
+299ACFCA7F1DC37A33B6F563AF0B55C471A27B51D50F1630C450215ABF35594D
+ABA5A1BB68880CEED39E51BF73061A064D07F3FFAD3496572CAA1A7AED7D5F18
+DBB79F7011AA026406857A164A0FB0F116EF8B6FC91C7A2A75B92A9AD00CC677
+E3233C7D4487108B5CA6049FE757EFC0D6008D52745547D62EF6D89433B54F7F
+3865E60F5F416221A8F46C6D78F4625311B56F1CE7B6B6A3D7022BB17FB1D8BF
+2CB21F66BE5E02D7DC15802B02BD9B7C13071956903F896041E2D139230011D8
+C68A52641077C8CD9D6949B8C6B80BD3E6F679769B699D5E11BFD3A09C8B966F
+122270905BAAA2CF578A2673588615AEAA7DC961AE45B2BE12CFC00D06B298C3
+B72805E16F51F1379DCB02D4CEE588706425EDF9C32DA41CE7A79BEF760C253E
+FCE0D65202FA33451BB4FB2B9E389631E15A6AE4AB29646D873DD534FB2620F4
+2473B3A0C4076FBC4E3CD26C34B1AEA405E7559111FB16A69DD9E7217CA8A022
+A10975CF9839BD0DCFA1A9FF9BF9E1982171CD7CCC155F95FCEB6C1BD73D6DF0
+7D523D1D86A5978BC8EADDFBE9FBD66D8138D50EC7C66175E94737E8E515A8A8
+4C88C3AC196845ED4A73275E8A54492F6DA84CE9E5CAC0094F7E9BA5D6F9970A
+D6AE91D1E31FFE4BCAC89D1070F6639411890684BE1B30541BA2C1543E9B2B66
+B05E3FFE869310C8890A723417D92FB933A7C3FA489213643CF4F95ACC9693A4
+76E0BA53876D0F5073D4D35E5F63956968E714FADC5D993531FAF2C5899F0F28
+97402C548C95B58291ED3DCC7B94670B79A34CFD58703BA6CB37ED52B1D377BB
+DAB71133FF9FD2C58E686273C5371E2FA7AAF4AD83B199A3D7941FC8B51AE159
+FF4C20F4552CEECCD3F6A26F1A845256DBECC40BB4FCFB03550CFB85A63F2F8E
+D87AB0D17C50178E90D15E83BFD3A01C8D788BBECD17BA9A09DD95ED5DDFDB51
+A89DF3D8156071F4DEA2F585FBD9D57F067DBC8A8382114EDC9D0785F169D88E
+C52D4F3E145A2C3A13CBF56B206E970714B2AF74B8D4141A4D638075952428D7
+685DF64A8D060C46E60CDE00F75D6386BE4D148E1752B0972543236F38D994F1
+3473CA455703789D6BDC433ECE2550EB012A596F2FE23A473E318105AD17C088
+891FF3554472BB9A73BC9025D3DA81A88043E8D9F0F97421A99F579D3B7987D6
+09935336702B8873E47C7F142371F83CCA7C22630C00A1C38C703E6FB5513E7D
+76D667F34F488DD5BCEDF2842BE25B37F88165C03E91729AB25B7746169C8334
+0790FBC3EAADE1F3A9C91F4892400A730A5A9130024304BD7FBFDAD66C7941A9
+3BF8B879C5B2CCD613188F1A69C34218D73B3C5F3B0D37565C34047FAA92FA97
+238C99CB4BA075A72E4721C04AE65E4BD0BCD50827EC6F8DDB3882E642E5C697
+4BF3939F115E08AD61714FDF06FB23ACE5EDC398FF413E23209361E56A69886B
+277D4775692B66A57588520FFDE95E42CFAB7C6521A8FB0F158113A884B85849
+49511897D9BE6D1EAD0E68757D65EB811BE39A29AEB5D32E20F4C9FAB40DEFFE
+E3EB6A40B85929418480445235F7D271C1DF410C7153BEC57EBAE6B98E599C1A
+5BF1DB18A9A87186082B75027CEB7613BCD1420CF1A49EBC1F5C39F67BAC5DE9
+DFEFC2EB484F82F52B8FB80EE89ED21439801D1AA8A2765DB636F0EFE2EDB017
+073DDF293C041D0FD898583DBF545573FF9D1A6B6AF442FFD093EC481256C476
+C0DB92FD0E8B8213D888EA9EDABFDB5D3FCA5CC8BD504124444A589D6D603A0B
+32D8A9D27C33A116169717BE2C4E9605E8C27D0D12205DA8FF55CF70676C06DA
+85B3745FC891956C9D6F3D84E497E60ABAC439A65814C0C62A98EA6F55D8C8EC
+2E7620EB37E604597C63B1F9605671A50715020CA6D6A390BF2F41F9CD2E657F
+D39C00DADD22F4CEC9317A1B1F3E4B577FE053FE80F4EA4E3CDA37C9B1165608
+E84B1EDD2F747120C91711C35C47C5AB2988A3D7DA41152B3EFEAD650D3B24A2
+8F2C8111C03D379A3CC427A6707EA58234E2213F79CE8966FB6BE47DC8100844
+2471AA60FC95B6807B08A4C77E556564E1BE2FE73A92DB329E8589B26097156B
+C7C788B7A681959EDBF7D690459C33DF90E32FBF2189C8C4F4E1D7B607E1203D
+286A5C11102724FFA1CF9858B2CF06EF1DA191B1FD79173A209EC8D164DAE256
+EFED651F9363D2C434BA7450B70E428DC5FD09AA0C6670BF21D33ACC802E7954
+B7962F7964367F95F1FE36934724C1D292A3AB7FABB5588897D5A43F951152B3
+60A8CF1505C1A4418C24C0024FFECF786CAA0D7E2EB1E6EA1231BDCEB627B6C0
+099A782D6FFADCD1371B459B892F1EC0EE333CBEE3A476705010ABF407369D16
+E07E76254288DEBF37EC2D863984E4764A7AD6A6B36359A6931EE0CCFE18916C
+A98C1AB8172FDF3E20DFF3618CE142ED79CA4640AA2F241522E554217199D279
+174876CE74312157CD3B8E5D70A6FF23D0D60F66A7C6C93751C17D768204DF2F
+28C04E477CB5C02E71E1F5E5A1633A972B71455740968A1E5039A82F4B6986AB
+B3FD834FF7CED747236405480EC04CEEB6FAB6337F0EB3EFE4EBA7AA24A1206F
+1141324784A8379DA19C8D2EE83070E5B97E03642697BA12E493E7C137F5F816
+0CD2D8156E8553F62F0FD952DF6C7BD90932DB98C2A083D348AA430B89CE8F06
+0C65095364C868C6BF7EC40F515E174DFA53D358102333C60F71DFB1A5F0DFF4
+DB11E88F602CC8067B9B0C70AF9679B2073A5DD465A0BACB455BFF8240C625FA
+D4CB653568FC5CB25BD4960CE38AE6B229055667A9064F949EA80F871053F52D
+2FAC115F89417E0D15D0F383328C32970103C08E2E811142D51D894F2B860483
+831F9F89E303F31536D3BAF799692C4FD173826D5359AED7B4772357176C39DA
+BDA30DCDB275D5C8670D1E2041906A31EB2A27172D9EB6AAD1343F395F06DEEC
+E35707E4D2FB366D772D0F3A05B99CB8AB5A8059DBE239A4F26AE163AA3BD264
+D556062C0819C71EB87DB1C63E649F8C234058C4340CA603803E0E0EE90DBCD8
+D922A50DB207DCBACEBC0EE2F3AE5A99230C5C2D6A86CD43708CA244B1212C8E
+E2395D75C1B68F00226933129A1B642D71992F59BA3FB4FDF4F4471B67A35470
+D5F8CB4D5AD6074D2ADB450B01C558F0BA3AC238DBE45CB1F6F58233EFED49A8
+F98B84AE49109C87FF8D3355DC52416CABFC1B2B0FD3D18520B6D36EECA07605
+3011C1BE8C3B760DFE76705A0CD90D0D39CFCCDB6EFB56D434774E4E4A04309B
+A9DD77626964C7DD54DBDBC9CE8806FB0BBC18BC6F1F91238B87D201808AABCD
+AB25FA551663D544887BE2C421F926D375B6BBC311FA96A34279A4BFC982D44D
+B36D941B084E12A542E8E67FA8C3979D1987875766A97FDECB0813D9FB4910F8
+E6A21DB10A74F478D464D1026D7E14E544BDDF4BD2D83568E95DCDBD2F04F31E
+C19DC5D1479852B9D6FECE2E91371DF201DCD0AFE65AC2BDF38042A352AED774
+E7F140E68C6C4B844AB248A89A1EF2A7E3DA05242AB9CF24A19417BF54A9A310
+8D7C5C64B3BB15F368AD6C2F805334F60961F8EA96D04ED8AAC71865AABE90A3
+78EE60C7726402650663DD501924197D1207ABADDA76C95610E0B8BDF16E3AC8
+1871A6E663F3CFB0DCB3768F22044FBF79D619FC1DDB1A5DBC11FC68C7F95AAA
+FAD8FBEBCA98D26505869BB916B7DA39DF0E060D53F3FB03387E8DF3CF0CB5C9
+B7A367042F7C9AB56316D8B90E5D6C611919266151DF39598AC90D87814BB162
+EFF822AABE8F8DB5F118BBB3F44D6697B97A02FBF8F8E667D84B54481C5564CE
+CF0C5C9FB5F70A0F543F6A21936D13518E2C262A8C04CC8148D257D981E7B4FF
+CECE4C4D6DF4BBC3C9AF570D42162FC56AABBF64B2045E9607D8FCD51A4E7C0A
+0B2C79B2825F7BF0F06A2EC6F154352DB9877BDEEDA6B6117DA49BF183747E48
+13B90A019EEF5ED26FD259CC9453F517962A22AFD6401C2358A6A1A4DF55333F
+33479FE90D138961750A03C1A33023E034D7D373A40DA9F4069FADB096F1B4C1
+91927997BF33413AA4BEFBD0FABA0C7EEF5D2072B7646AC39B9E2A1128C33C52
+E13032055C2FA439565889B635EFF833680385299151941B260A221D2B8E021D
+62018B6C1BE30CC83B2AEAD364C57B62F20CDE4D108330ECC2831BD02BC04B42
+F7AD26DFF19550D9E424A8F767E0214B3F5BEFB7EB0E5241CFD334F87AB3534E
+22A96CA1C39D14E7E2B99E97A848C08DF9B588A8DAFAAE31BF9EDB11C9723702
+DED88A36A0E3543EAE1CD45D392106E9460C7F1DFE9AC65843FFAA499DED065E
+8C620F614C95CC117F489248C12C0264250C08123CD5F4F045C6437E0232F254
+1AAA0F9C480D899AA1660BE6AB03D622B13C46272980130F909D4508CD84EFC3
+D6D55C96A9EEF8A465E875A9C021448CDFC9E33D500CF5BC6FEC19E06A8196D2
+39B32A4FE55B7623AC79483930A303D6ECAD6AFB640B09BF6C4E2F077BA2104A
+E7D989E599A01D080AB7CE022AC623305D4D1DB2E3B611C8D50A8EDE9E9B8F3D
+D9CAF43F98295357E57CD7BE1919EAA25453BE2470D7C08265388DD5BFCCD889
+C2C4EA26822ABA86B43D5AF1B10A6D01DBE89CA3A9F02A2C0DDD87853735DDC4
+F86D0632101725
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMTI12
+%!PS-AdobeFont-1.1: CMTI12 1.0
+%%CreationDate: 1991 Aug 18 21:06:53
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.0) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMTI12) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle -14.04 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMTI12 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 40 /parenleft put
+dup 41 /parenright put
+dup 46 /period put
+dup 64 /at put
+dup 97 /a put
+dup 99 /c put
+dup 100 /d put
+dup 101 /e put
+dup 103 /g put
+dup 104 /h put
+dup 105 /i put
+dup 107 /k put
+dup 108 /l put
+dup 109 /m put
+dup 110 /n put
+dup 114 /r put
+dup 115 /s put
+dup 116 /t put
+dup 117 /u put
+readonly def
+/FontBBox{-36 -251 1103 750}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
+3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
+532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
+B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
+986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
+D919C2DDD26BDC0D99398B9F4D03D6A8F05B47AF95EF28A9C561DBDC98C47CF5
+525003F3DBE5BF07B2E83E66B7F97DDD7CE0EEB75A78BD9227BF359D002B6ADB
+8AC57A33FED4EF021A7085B1E2B933DE602F0FF71467ECD501744AE338AF29A0
+26F7D368AC6F25CCB882DB7B7343566192BD687E1349225982823027D3B66703
+3B0DB7A7E680A682B98023D39C7FAE81A5D5B867A0A66C8AA0DBC83B1596A84F
+0436AC6A7900B767BDCCE0060A4811003C79FDCC71D73F7F2D0A6675E93AD21A
+56B4CD8EF75EED3DE8C0A18BEBF7B9D1BE72504872D56EDB272F1E97FC726CB6
+68C85C713059DA19F6C2E0F3E12710A59B6FC4699AE883DE8C8615B7292AC25C
+D5714B6CFB14EF0EF11EB13009BEBA4F345A5D3D6D9926ABC2BAD7DB1328651E
+437BFB3C46DA7B62219660FC368CF3D3704DAD3AB461C28F711665BF484BF61C
+052093D231CA65618EA463D63E406ECE858D180A6C0589B2FEDC321371C28E77
+DE974D655DF5FF7D41ED01FE717D928A885F6FA6CFE4D2C0807F8E7F937916E0
+96EDD1A3BA67802B1F4A49100E75613BA0356D9DCBBAD4DAB3C59E70A47058F5
+2163D1730F0EE4D1F87C3A4AE723A23CFD7986FC4FBD399347E9F5946354E013
+D860FC446AFF0B0744F5DA27CC777C96ADB388D1E835DDCBE123FB517679B9B7
+EF696E091A9D51510BE264701A41C04FA8125A48F306ACA7A83E35D5BA0C296A
+BC594ECA2CB27E92FED95B595C21E5BF0DA724D40761CB377BDE5FB98C9D152D
+6C0DC98C4083E9656321BFC445CD6FCC142DEF16E27DD6FAD0B3185223B1A7D6
+779F39C70793184F2C3B721FD0AE6D8E063BD47804785DAEA74AF8C75483B713
+65061653E24FFC30D571E77C48863E0C382D48172FCB66FF19AC51D1481D35DB
+1904EEAF3DEE91529D23A8CD927213248E67C0157DEA73C5282767BE76598DF1
+9FC75C6C71DBA15CA3E70D4F4E201967C21D14A8E6EB7794E81CB86B9B06A5CA
+D71DF5D68FB40B259F75E71DDB728641A8303BFDFE87F1D16EA8BBFA1CCB8F6D
+3848F94D2D24AEC6F31C2B0D505FEBA93EA53EABABD138481EA2AC3DA2D3CB43
+0083EF8AFA3B3012C14AD7B2471C4B258F9FA6F540E921DC67F8B9BD3DC31758
+830D3DB1D71472BFDEAA2FA5108425A21503F62FAB6A0D057A9C89EDA6866680
+50E621378844D991EB7F4C2A4C0DAE4C2345CDE11167E1BDBDE9669231B613D4
+2E0203BE17471027E550E4C01D83802E49EDC661486102B78D4C360C87480A45
+2ACAB28512E7ED71649661CAE74B54E6076E83362106D7F341CF16751982B9A1
+578609F0B1B60B749D9CE3A7706D6219942D4EA3A839A44D79C5BAD7BA564721
+013A125DF059B7DA5E79B238D166514E6B62D4A5370B7F46D35D761AFF7BAF7C
+07A4F14E3741D96267C1F69DD6FD0F472AF776D74F83C6AB85B73C259783C1F2
+3A28569D7487DD5D5DC1A6CC2A76621B9EC8800073EB5A0E7F56FDA88E3844A8
+94D1E59FAD5E141488FADBDC79C3477913A434E2122A367083D5F059F57C7ACC
+CB0FC757470B4768E9B71EF158E6831C5FF2C6A8EF71D1E57F9C9F4CA28054D7
+6EF5A04B647C6910C5D0BE2881B02459393CA5F5DFC45763DEA0D10731E94E2D
+CC588871691173FF85386548EBCDCC3C4EF7D32A060C2203D8F078DBB3B740A1
+BC9C79149066763B8001B1FD1F7CD61C8ACB1301C7DE9B2A012FB1A4016E9573
+E6D0395FEF55F6A31B4D33490B02D642FF6C6FF02EE014E923989FA6FF0EBD55
+F93937B54CA0DAD7BC1E69B1617BED3DDD23005406B75B8FD62698D2BB82DBC4
+4D256C6F3FD345A95A847935703B428881697DF97F4BEF5CB6592A14130BFDEE
+390CF7CF2226070A54B96C1FBA5BC925B613F1F7881FDD2C2517659B20AD4D34
+56394783DA980A5503A0FA1CB1CB91AA0EBA5DF48699350D53A74089F20FA4FB
+2AB4523D3281E275BCF90E7806AFBCEA6811D388C2A43611B5FDC19E3FF58D4C
+C15B03165CB82078858C3995C97ABC9672D42AC9A4B323C9A4B4F71231FE54C1
+C2FB18FC6E1862725D81A80E0E8162BE5D3E7EB1E5DB733D97826B59B5668D99
+A40D24BFD0A83B83FC8B90B34B60536E4FA340491ED5C1E578ED8EC94DCA5CC3
+AAF58DB8A71E9E2F6F8E9B083DA66DA2892F3AA343EDA0FD0F6ABC3ACEDCE959
+60E15B4925ECF6F4AE3DE0C30DA372CC4FF2DC8EC5E44C43BD55FFBD42ECF291
+7BC1F0FC59C978B69563B3F51029A75D15048968BF75E65EDC5FD29A8C2A9E07
+7EF9661B169F4BDDE620C00DF20AFB0A512DD7DF77833497135CA964BF3C65B0
+F0153EAB94771E8F1F0D61155DC6C981926A3F628BA8A001E3E051EEDF8BD970
+0B0B04FAC2BB5D9A2DC24419574822549C067C7FB8F93FFA46A46D60A33AE2CF
+20CFE8FAED26DD8939B678CD6BF59EF5992230CB890080F6CCE8F005E35B2ADA
+98D9FDF6088B5C25C9F2F722FE90502DDE7B5259FF28445318E83E2676149489
+98803DB09429A335CD5C30D0362471BAEEED97C270A5C7C3CECAAEFCBBCD988D
+6BD58D7DD031F889DA37EB1B03D2B982711DC34BA81402B4B2D213877D24F5E9
+844A2F0CFE8998E0E735DC5507FB3B50523E76396489CB25D10373287112056E
+D0651D44FE5648F79D75B8A5CB79B261F6A812BD58BB1AC48125B71D7CAE40EC
+B2BAB62CACA184895BB1B582A03E3A70621963D4F61DEDAEFFFCA0D0387B4069
+3BF967E5D710D787785234DE7AA2EAFC349621CDCEA465410949E16F142A6125
+4CCFFEFF8042BA355FC9F0A2BAF0EC3F59E8811EBC83C0567679159AAAC4E6C3
+5E23793B407B5223BADCC74F25C179E8BF6B3B23250A30E1A74C5CEA0F8DF4D9
+081092B6BDF54F3E8D92EBC547D08E5DF5EA85CE4CD0122241C223F2DC843391
+FBB009573765D697C8B38191C5C40B8C2501BEEDF305CA82B757C348DB40B74A
+1641112EF0EEA970B77C529767D4C49B6E4556C643084851918DF859874CAB46
+73A097CC6FBB3C1AC82A5DF13F816111ACFF4CF7C0E74B90F98442E8BB9D1923
+8EC88E4480D8B63B2820CE1CB7E6958C2F754A8C797CD6EEA4BBFB6890AE6FDD
+1775DEBEF826C7CDBFE593DE5D44A4407FD84649EFE49ADBF725A78DABDB0E60
+45AB79D96916738BE58598D34DBEB28AB21471A15DF1705B456479D8A89D5F8F
+1F10F5D5F1DF68CB05438467C45D710C3316D26C9E10BD9A301AC4DDE6575751
+A41A26DBC92160C679AEF12DFA4292F3ED5E1C7A2DB06E96F8FD7EC5E14F5A7A
+FB08836CC61DA2E442575EC5F92A00321E50B8F2936DEA2429CAE5A113A8E7F3
+BB47D72D2AE77C42A45EDB4DE96390B66D2B13A7F0AFEBC05FC44A2705FAEE16
+C607EDE0917EF658524D04243D56354F137D13FF8E379793D442A9B755E239A8
+C8A49E5DF2846EB031DEEE2BC808F99089DA6E8D3745F03D4B1A2A761DC9753E
+2C62F6030551BF5920587EF351ACBDDF2B45459B231BA3D573F932A8F78C755B
+30E82145020AAB0CE0A727424E7C7EC161917CE3FB267BC3E54B3B1BE40FA441
+5666D94497582A3AB878152F8BE9675F8ABBE6F61F3434FFDF9A973119DB524B
+0ABC09871D752421B536DD720E23197460EFA769B81A1272BC6DC79E087D3DCE
+3FC74C532E06218C0A6D61A945597CAA14F63F4122D4A0CDC0574EEF3618E373
+11175C2B05E7E58F598CD2C984F3B3468DC8A281A4AF3D7A417D9E9AC91EB5D1
+B769E27B4E1255E1AC5768172035B87E07D6EC4B5D2DF778A6E098D48C9CF7A8
+BCA43E3850FBE1040AD2181A61A16AE63FFD1130E68BD52D99D8AE22D2A614FA
+8E31FD30212C0FE8DEF854CE4E190DF2C09FCB9945EF6515AD7B318D73D22B77
+5920B8349D298DA6CCA8FC82AAE77C48A591F161B4971DE620B76034188ABB68
+4DD1B8D6CBE5B9EE7342868B611882DCCBA5A79F821638720005CEC117E1D0CF
+BD761EBF69A66DEAE50F4B1651F9560BF3C8F7B88A5BC39D974A604D121FF80D
+084F6B9CE77B2A604964B413D715B89BC148A84EB2FB5C655457BE1826EC0257
+335205FA2DE89C90408889ED9355E508E7C7A02E9ED04CF3F961C22E20712D7E
+B1AEA5F9C53F9A842C6401E5999D510D80AA125C36143F93548E6BB91C401B70
+A81E3C5B6BC4CD574366DA3CDAF8680258E3AF994E45826B1FAE39CB11BAB37D
+7459F020D8FA8088F1D17F4B75BB20783127E88560A85F7EB3758F4977DFA462
+1FBD4396D922642716F3D82520B155936A2F75D80B7B12B0FE2A067BA45804CF
+5D308722127D42536EB29575AA5F0DC45BABD158303254D1F03F0F5AB6F79FC1
+9101DE33A17D5254262EBA59CB28D3DD448587B3725BEB79AB235E278264CE4B
+C575CE9098420D820BD5BEB3F20514592893246B091D9949172A9BAB9F78343F
+461683B9822DA725A070CE4054D7B0D50275646CAEA8B89B01679CCE764A31FD
+81EB4E7C4D59381F376B93F6E266EFAF1FD507369C5BE3AF559D8511A4F24BA0
+7625169E0FB1D54919B3D21ECC403D2CAFC6DCB093AC08EDFA01A56ED5D8B22A
+F2FC067E44B6FB5C90928C8046F80BBDED5D3623CC41BB4C7DBEDD0A6D4BA469
+7DE58AC9D5DF2091510A4D9EF24DF61FDAD564577F1010C825F03D642F87E2C1
+85CE1A40B46ABEA6957AF45782CDD991B2E02D9C4E1D2F8286F5244A7E05CA52
+5946B86CC02217ADCFE179591281CBC8459D7A0B048CDB332282499B20E65917
+DE8D87A3FF608A0BB0ED3F5A0A25EEEADB20526ED13085C4E804033F6359BF95
+3F69114C23CD039843818045022119985757D6F1A83A7C37D55F966172F5F5ED
+151059A9FBA8C155513B0D9778FCFAFAE70C015D4DBE41ED66ECD3F51761D1B8
+DA8F87375B88648D54418DA2B69390DF63836553E0128CFCC3FDB04F4C596D52
+19027632019696E44782183FCD84A4349626CBAA503CA1FCAD125D7655D5D159
+47D570ECB9383AB439A49B9F818333A0CB1F37FEB0DE5E610406FB54EE73A4FE
+B7AF135DAFEA30EB60057A331A29BF9E6B0D1791EED12C5C2C85E371EF6B8EAD
+F8099EA81AB951E7E7C60D4378733AD0B192DD181A5EF7E54EDCCBF1EF7924C6
+E770F862C88C06107C1E0A99803DCF502C78C670AF370B330D4A0CDB9C823834
+45B631CB95339E799A881ED6A63629A618C2082AC018E4F3C8FC9FE226A1F224
+C07D58C4BA15F041264AD2ED0653451313B5D9C32B4C4978E23C8510CE7C8930
+60D53D7EA89F4BAF09B7AE7A9CF4CE2308D719F2E59FD11632FDECC4AA155987
+24227907BA8E4E66C13D424B8C4F8E34D1D8C6F061895CCE99A7E60F21713574
+0C0B04A95BC1BA1CBEB6184A3539A943175910519750ED20132CCBA71B322ED0
+A429170CB10EC14516A6364A57DC025686C8A45AD61A1A2D86A1B8C8B3B6D619
+BDDF620D6033C2FF47A783F63CB2F8064C346C4FF047813B44DA81A72F8B63B6
+A596801A8F657BD4E6282FB459B97DC74930166CFC41AC3173F43578B6D68D64
+1366426EA6A730D0B2F84A8B0611CF0A3F9402FB8D5E63FB420ACE0C31836735
+62D26DF7DE17276A5CE355AEFA11FA9D84EA527295E2E3F83618C85476332ED6
+DD52F6F957D71E9AF65E7166D343232622FBCDF93C9034E13D84A43847563562
+351A1ED3FD04B7C926A508BCDCF02AD8253A7563FC6BB85A6E3B55A125CF1701
+ED9873D76C29A5B7C6E77240ABC9ADDC8EE6190A972C25D130AF1644BF124F2B
+345542D85ADC4CBBD133F3CD6E559CFF7E1287B6829FE22E6E0C4E5EFC5B7D7A
+F18CB8433B78744A9720438358D6237E5D928E84FC34926827F1517C2C289906
+BAF57251C06BF260CFE91D7F5A315CA9410F810ABA85F0C1F344A195934D103D
+C3AB7C211CFDCEE2442E26146C
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMR12
+%!PS-AdobeFont-1.1: CMR12 1.0
+%%CreationDate: 1991 Aug 20 16:38:05
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.0) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMR12) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle 0 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMR12 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 48 /zero put
+dup 50 /two put
+dup 52 /four put
+dup 65 /A put
+dup 68 /D put
+dup 77 /M put
+dup 97 /a put
+dup 99 /c put
+dup 101 /e put
+dup 103 /g put
+dup 104 /h put
+dup 105 /i put
+dup 108 /l put
+dup 110 /n put
+dup 112 /p put
+dup 114 /r put
+dup 115 /s put
+readonly def
+/FontBBox{-34 -251 988 750}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
+016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
+9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
+D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
+469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
+2BDBF16FBC7512FAA308A093FE5CF4E9D2405B169CD5365D6ECED5D768D66D6C
+68618B8C482B341F8CA38E9BB9BAFCFAAD9C2F3FD033B62690986ED43D9C9361
+3645B82392D5CAE11A7CB49D7E2E82DCD485CBA04C77322EB2E6A79D73DC194E
+59C120A2DABB9BF72E2CF256DD6EB54EECBA588101ABD933B57CE8A3A0D16B28
+51D7494F73096DF53BDC66BBF896B587DF9643317D5F610CD9088F9849126F23
+DDE030F7B277DD99055C8B119CAE9C99158AC4E150CDFC2C66ED92EBB4CC092A
+AA078CE16247A1335AD332DAA950D20395A7384C33FF72EAA31A5B89766E635F
+45C4C068AD7EE867398F0381B07CB94D29FF097D59FF9961D195A948E3D87C31
+821E9295A56D21875B41988F7A16A1587050C3C71B4E4355BB37F255D6B237CE
+96F25467F70FA19E0F85785FF49068949CCC79F2F8AE57D5F79BB9C5CF5EED5D
+9857B9967D9B96CDCF73D5D65FF75AFABB66734018BAE264597220C89FD17379
+26764A9302D078B4EB0E29178C878FD61007EEA2DDB119AE88C57ECFEF4B71E4
+140A34951DDC3568A84CC92371A789021A103A1A347050FDA6ECF7903F67D213
+1D0C7C474A9053866E9C88E65E6932BA87A73686EAB0019389F84D159809C498
+1E7A30ED942EB211B00DBFF5BCC720F4E276C3339B31B6EABBB078430E6A09BB
+377D3061A20B1EB98796B8607EECBC699445EAA866C38E02DF59F5EDD378303A
+0733B90E7835C0AAF32BA04F1566D8161EA89CD4D14DDB953F8B910BFC8A7F03
+5020F55EF8FC2640ADADA156F6CF8F2EB6610F7EE8874A26CBE7CD154469B9F4
+ED76886B3FB679FFDEB59BB6C55AF7087BA48B75EE2FB374B19BCC421A963E15
+FE05ECAAF9EECDF4B2715010A320102E6F8CCAA342FA11532671CEB1855A22BB
+7B0B138892F4D0C10FE8A534231413BC3C758D2018F74F5BF01D886C9906B2A7
+95809D2DA4E8CA21C047B1CE8673690246BCE1AA892A56BBA639AF5D90D6B8D8
+54BD5148293D1206099BC8808D4AD4EC8725C712F512B6AC04B71FAA4F824A2F
+F6B73C539E7B4FFCD3720060E9E36CB203A85067DD55F0EDA94C4613F0FD895F
+F18AFD93FBEDF1C87B842CEB4C3AD774426166AA04AB328FE5C5B4D91A94B92F
+25BE3EB9491AD2F1D84160B6CF7F1E871BCBFA4FE16028E57BC5524217102F52
+C3A40FD502DEEB9D1F6B402FF7AB918FEA7CE82C6D7E4794AB494B445E3A3613
+19BF6AD8462AC3BB93FE123B6C31A227EBDC1231195DD90E21BE41D367A33DD9
+D87FACDCB7784DEEC013CB2E1A4BE5C89EA9D64213ED2CE6755D105D34A1DFD5
+3173395E8935360C14F759BC8543CE7E070A4C6DAB0C5ABF17D0CC36921DE41E
+5E169A90F132B88EACCFFFED4D27DDF07C00535754E14CA94683F01BDA50EA0C
+5D5E65DBB200DE6E65A9EADA7383C4A1A2C3B96B09B626A3CC309C4960B179A1
+79FCD41DDEDCD4E907BD4175D84C6E6FEFF1ECB96007DAC650F64E8AEB438880
+2D86AAC091DBA24755182B86538E9357121F9C76736B9563A0F21E098937E440
+5E1A665CCFD61FC55AE43FA8CA3955E0708689A32649E61064615D5CAB02A9B8
+31924F0BDFF49232BD206D6CFFDFDC6427C41B8CA5A4373DC0C26F97B3AC066D
+96940C2962BF15CF9D2E9D4C4EDAF55B33A50F051710BDE636B0C82118E70F7F
+803AAF0D686C1C3FD62E5FFEDE56336ADE5F2E8533A2702565663A1014FEC33F
+D484B8322CFC4C850D439AD8EB7AF5C00B4D23FD721DF70763806D396CDB0422
+8B65ED76D92585695EF90CEDAA4135C7AC7FB4FB465EC22DFC775F64C348D6F2
+7C852CF8860922842B4F88D6A1E09AAAB66D506D4B53F1A5FC2A423E2019E66E
+B1DDD6F4D8B44EF25455BD5344A9EE63FBE8C742156C697FD7EE7CFD8171FFB8
+E92AF9767081E4C3949B6E5DE5A0C029EE912394326B865ED96F714AAF06DD39
+28033D92D44994B7DD5947C1C84D7EE6CA23DC441D96958AD206114E6149524C
+DE62508D26D5A9C46311D0BA0C4C6C6D1A9C0F539B0B208B1973E56BB9C4D909
+42AED153A1D0F04827B541C65B76B990140D849B74D87C1CEF4066E0D20C2752
+BDB65F64E28CA3B2B57CFFC5B80D5EF91553117E34CB8FB151A3E21831604FEF
+1A6D296CC70B9F435CA741560E75015B5A36533579149E40910B05C5BD18AB13
+E5646C9D6C50BA216E4EBD4453F263C9FD94F860A83F07E3D2D1B54683074C61
+9D33569092017C33C7D13443E42C53AD3C81B25A6ED8870546811E03ACB85CD6
+FCC2561A248CD2C01710FB616790ACEC46AF602D518BA75F23440F7119C0ACDF
+4ED4579160BA2CCE49E05D3EF1510457175A5137F512892EF7342FBFEFD93358
+63DB329F43EF7836CD9E3E569DD9490523B3E629662809ED49176D65040C0EAA
+58D8FB7F730ED629B7E4EFE2E22D646431078EEB2404317783AF6514764B52FD
+2C146F1FB90FC57620EC75EB76C96BD1A05285321828B8E9CFB89A1454A6571B
+7D072146F20D189627929BCA5D956D8EC05B04349433BCBBE47CE8CE6533903A
+294CEDB87425E491F49FB19819DE3AB683320D3C2B058440A97CEA334C32BA12
+C8F9C94A7217430C3725110D6C1ABE1A40221D31A5EEF661CE5D6C6C3B1E26F0
+29B4A3DD0CA0342990587B44D91CFCB3BFC95906B0DE932226B4E260862BCA75
+5EFBAED209C7F01FC9041368B81611BC47F74D4C8D02EBDD3FE9D7BC0870DD83
+AED6471A1FADBC12BA27CFB659DE342298D026DE1501F1F3887DED6F94B960F7
+035C53FA7EDF0B490620A56A81C5F349D127814697D8D8AD408B6FA8F9EA35F7
+8D8FE5C0C0F5687D5406DD47DFDE7E7AB8002BD9DF52110799E6F9C10FE8360C
+BE3B1D5B6A19B97C13B760F3C985D1FF00BD515696FE2E793FB33869B33848B6
+468437C01161523AE5CAA9D119F8544EAFBAD3A3E2E09C819C3254F2DB69F714
+43008E8F2838D202A82C5E16B53F47396329C5903476B51B708F9DB0127B3A13
+B6F5E22688A4D85EDEE9B055959450942C07ABCB6CE899BEE16297CA9D891F27
+D4C86339991862DC08F390F77EA5AD6AB3A57653D985981EEBA6972E7DBA9CCA
+2708504092ABFF6377708EC51A5B8C5CF93BEB81B229DA0929E4B11B08F89763
+77B7EFC0539F2F90AC42B01C36D88DF27801873872DC382AA8B75C95797A85F4
+14AED13177882EF62F892D7E60F1F693BDFE9D9D639FE81F96D96D7EFE49209D
+0B43E105DB5B4E814331A28A43C87227A4F3AB1A0D68FD5AB1EB7BDBA120AC36
+0CB5C6655A406AC8089F5632242431A24B5EE3CD727D047FC514EE113A67822A
+543A7646D36F695D510278366D393CEE8C17B4291C855E65CF71F5E25543AA90
+394CA75B227FC0A43FC4CB0E2E629794210B27CDB366E14AAA96D6B25F5B9753
+57425817B06ECD61AAD4D92B409C613F3F81329FA68BAA4A11405378DCB5D373
+1495220E5103A7678963200B0794B384933CE7DE5241D1077CDC24185568BFCE
+6ADC916077F7839AFF01DCA1168C1A9993C8313AB397E6BCC3308AD1AA8D4684
+C19FB04CE17E1CD39C9BC536D4486143FD4D1AE038BD687EDDCFB3D86D79F4E2
+F2FCD34F7EC9A4130D7FE8054FB32286E937B421EC2B830F29255379DCF4A5BB
+A3A4623EA95F3BDC4480C88CA23164E38FE434E25D960A7FA9176929053AB445
+328AC8F6DB0BBBD017DE912DE349551005FF126463682326D0AC3FFE755B15D3
+6B5F45C1E6A3D19808956FF2878A224DA085C8AAD5837B05A62B27086E90EFCA
+7DC03EF334F130B4129CD528FD6C4640895BA42FF0E23A357AB8FF6CD83BEE98
+82C9A1C71B7142BE51ECEA128F11F446E655ECA210868D2FEB0DC3E5CFC25D77
+E308B328390652C8AA311160ABD1905565263A71019ADB2B7E4F59481FB84575
+2453A3C4F9D56EB42CF0A95F87BC95409076A4871FE044CADDD7C88F77919F0E
+4C22441CFE57D303BE5CFFB4D502435B4C9A042C82DFF778FF6CB026A614B301
+B12817AE5D2AFFBA3F21755C8B770C785DEC81598D31AE52D437863C60C45B05
+BFDD3A8CD7123D4537CDBD58C026381B17D995D2973687BDD4CDFFE3B69B656F
+B7232E3F0EE68EC42BAB5602600C695C4CDC2273C978C5A591A4455441226FD9
+DFEA5077939BD84868725B4CDD3EA443E48C3BDB285D0E228C55A10CEB479571
+6C65D0F76AC66A2B6373436398EECDAB1EB9DD9CFA7426597E85B50C8F7C2405
+B6217AD470FA6E053B6A358DC146BD16D9FE3F27D67BC50B3DC49E285E10104F
+A15CA17EC7F98638DCC6FFFDD6D5494BADD0F46B0C416AA35CAE7D926D1098AC
+85A25FC2EF72ACF850239141E19D89EBDFEA8A6870FE1A87CA8E0FA83397BE54
+3954F89531171F9CB24D2D4C75DC3DFFE6F3EB730BE22A4CA0A24EB6128C7936
+E098D370ACD0DC23844867D8FA04065EDCD468BBA2698E11AE3DA0F02DF90465
+96C3E36B7D65BED29921C6D62E214ED4AD1366669901D51A2F6D62AC997860DC
+5EF483F146EAF0168E2F053CC149498B48B44F7F2319BCB922922BBF979272DE
+90C9BFC350EC0F7734806E36110EE4A204089BC76BCBA72631772866B820541B
+68EF47209DA89CDAD5941DC57C2885BAFB9DA11DDAFB3D4DC552BF58042C2047
+5D18B85DE43E0FF9F17E0A263E9141D837A558062B1C0674E30FADE70D22840B
+8B1F0393253C12C82EC6365DB49370AF43466E5692F1F0563893DD548C6BB832
+24862EB52DC61F2368EC22B9146A558F7AD50B631007EF0EC10312FF9826CEC7
+C60958C8567C799B141D68F37AC9D7E900179DB76BEB2E885A093F5D162416CE
+2F18BEAAD806E04EBEE5971438D5C70304CEC2C41259054A890AF2357463374C
+CFEEDC8E8CE20273146377808CB344E3FF5FD34EAA40A6A95CE19D75C59BD885
+DC2D0794A4EAC96D042A197C49115DEEBF7F03CCA207594CCEFC9ED86D3AB3D3
+F5F5D5C7292937611391BB89FE91B3805A10EABA46D337238A8D5EEF41733E
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+%%BeginFont: CMR17
+%!PS-AdobeFont-1.1: CMR17 1.0
+%%CreationDate: 1991 Aug 20 16:38:24
+% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
+11 dict begin
+/FontInfo 7 dict dup begin
+/version (1.0) readonly def
+/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
+/FullName (CMR17) readonly def
+/FamilyName (Computer Modern) readonly def
+/Weight (Medium) readonly def
+/ItalicAngle 0 def
+/isFixedPitch false def
+end readonly def
+/FontName /CMR17 def
+/PaintType 0 def
+/FontType 1 def
+/FontMatrix [0.001 0 0 0.001 0 0] readonly def
+/Encoding 256 array
+0 1 255 {1 index exch /.notdef put} for
+dup 45 /hyphen put
+dup 65 /A put
+dup 84 /T put
+dup 97 /a put
+dup 105 /i put
+dup 108 /l put
+dup 111 /o put
+dup 114 /r put
+dup 116 /t put
+dup 117 /u put
+readonly def
+/FontBBox{-33 -250 945 749}readonly def
+currentdict end
+currentfile eexec
+D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
+016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
+9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
+D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
+469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
+2BDBF16FBC7512FAA308A093FE5F075EA0A10A15B0ED05D5039DA41B32B16E95
+A3CE9725A429B35BAD796912FC328E3A28F96FCADA20A598E247755E7E7FF801
+BDB00E9B9B086BDBE6EDCF841A3EAFC6F5284FED3C634085BA4EE0FC6A026E96
+96D55575481B007BF93CA452EE3F71D83FAAB3D9DEDD2A8F96C5840EAE5BE5DC
+9322E81DFF5E250DEB386E12A49FC9FBF9B4C25C3283F3CEA74B8278A1B09DA7
+E9AE4FBAAF23EDF5A3E07D39385D521547C3AAAB8EB70549756EBA8EF445AF4A
+497CA924ACCC3DD5456F8E2C7E36946A5BF14E2E959895F7C94F49137256BE46
+4A238684D52792234869EAE1A6D8ADF4E138B79472D2A90A6CA99E2394CC20CD
+3841733046175B20CEBE372327BF13428EED6A3E2FDF84C2DBA4B0AD584EE9DF
+B51828D3B8F385846158C29C9AC3496CB9692DD10219697B2ED4D425C3957FD8
+C4600D76E045C561216EF05D38177243C314877A69A1C22E3BEC611A2EE5A216
+9B7C264CF6D1839DBBD78A40610F2C0D7C2FE09FFA9822FF55035AD52546970F
+83EED2D30EABB1F303091EBC11A5379B12BB3F405E371519A53EA9D66174ED25
+A2E55463EC71A97BE4C04B39E68112956117C8252DB6FB14AB64534B4BCD568B
+246DB833982B38CDE7268BBF74B6B0C18091E1B1F87D32D66F4DD023D1F10D2A
+7736A960F72AC01F733A11023832CD68FB6288A5977743F781214D8FA9C0C3F7
+80001321D4397771F728FD9EE57CFE7D9192B887EC883EB1505068261DC40089
+7B7D2820F06515CD74513521F6397FEAB3AD3572D9A8269430E407E357422461
+1785FC2782047F4C0339D79B16862D939F3A37F78E4E2174E4FBF132539CB760
+207999FF86F6A3EBE48EB0A1CA635450FDEEF79EB16D853F3BF4B41CD4A5757C
+184ECF75F70F3D1A0FA7662D4B501C894AFE7DFB2C4858E6CD01DAD73FAD497F
+5B430DC98A880CF418296034DEBF8530B1C5AC48FA32E5F69462A76105328840
+7EAB6470E108232251D90FBDD402679755E2F2036A9B1C3BBC03764F47D3C4A1
+311E9C4A1955C961ABDD7ED71B80E60475BE35909877669C574636B1C6B63E42
+2DE2CD27E5457CC55A44C3856F525025BD2252E43C932F8CCA7463933953ABAB
+EE6DAA2C6DA0F286FBC70F106C9D98F7A29B16677EAC64B1DF6E1DEE3524EB75
+EE7A88EB7946A933E4D3625883421B565144E8DCFE6FA104ACB7189A8EE04144
+D1701FF3C6C8B024AE1D73E8605A237C5B0A59A61ECA900E7771C9C5B6333A6C
+571CE9C532D4A620FD0B621B2FF2D3CD06867223DA9DDEE6D543CB2F34FE9F65
+04A22CD0407D7668BA91E4766FAC7C869A31D43690CF96510296D25CC21E8604
+842BF5ED9676174D263AA6EF81A22CCAD9ECB035E66AA8BF1EEA8AE0BB7CD8ED
+3C392CA37DDD8C61BEB06E811B4B476103C27709905A4047062586324CFA01D1
+707A362ADE3E00AAF4317DD41C2B4C45DB836B1D3AE3F3F360363709D849CECC
+0B964A0AF3C5C977BADFF1010D0A92BDEE15A49ECD377FEDB17DD1F956014C2C
+8294E17573E7C629719FC8A33C96983667C51F1F4006F337A2457DEC77E6D92E
+96842F5654C28959FAC8A03C3195749CB17B2FFD1658A8DF06A6FF45246E618B
+ABEEC7C22D4C0BFC6FC72A5B9F5F9205975C9EC5759498D4F7E780513E909EE2
+78CED2C8B7F765D561D9719782E87F8244520B01E7EF22215D6AA351E4019232
+888CF9DC67127B03D4A7ED93C42E76D41EFF1DE73820BE02DB9574B6E048033B
+24EBEC840FE85770416D9F7B8235004F7703F46B3533905C7B48EE7C8D392097
+2F0BB514A96FB5B6C15131E679E9FE580F33AC4E369F3A832F2D80D819FA2613
+EBAF7B5B2D0F2627182DBC3DB0B814A32B8E514E4AAE98AF050DAC8BB38AC140
+1F35D67C7492D93B4B61ADBCF7898D034B073A4EFF07934A90474001C06FC805
+6F6890F38FE6695392768993239FD5373F93C8A1C6FC0ACA8298DFEF07E9A54D
+1C4E3D32C0244989E8248F8A74776DF04D49B70D510C4B35B2058096FA26BF04
+93EAF5529ED3A9F5849FFD8B71E09D848CF7E84A109F5BB22A203E24850FE474
+8B58B34A00FD244D89200A6B86CED35D38342B7E8D38B22FE5A260DFE68E5719
+70222965CBA9B8A596D32584EFB8D639F4A9A87361D357F5A68D47300862E253
+78E48659C0FEAFB8D65DCE81FFECCA2120E376A342CC29F1D03D2B7B97D626B5
+6C6630521789C678AC557ED19964871D443A1F71C12C7E4926E60EF164A5AF2F
+0137B83183CD3DFAB5A1900A022C4370AF681C1C271C109D04CE05A75B8EEC19
+8B19994B1FEFF2289948CC1EDB55E6A54E93EBFC46453D44DC8DD2328261B9A0
+F1664A515D0CD084812F4488040F89FC20A836010C5650653EEAED3035D796AD
+F8839779AEDFEC7E45789616061A2CEBEE1F5AC4A178BE29A6925C605FADA146
+6B387798EE454A308E868B925A7CAB8D705483424EA8526070E0FB57910C96B8
+0D152ECA5AB0755393A9B8FE002A0619FA276498BBF0B52DFE99B9943C7D798E
+26A36FF07DC70FABD77DCB3801F260A195AD2775446093AF642A567514B2BDBF
+90A8190F81B8D90B4DE0DDDB0DB3740216ECCDAA2D5AA942AF63B4E854E672A9
+74F2ED3D780246C01A5A376AB49AA02D9CC096F10B91A64ED2091CF8B5512AAB
+E5E5FE961D5B569AD1CD5F8E55466B86D45D73053C385FD61F98077F8A8E3FA1
+971E356C97C4A7533CAFD7198BED338FEBA0BDB0509875758905D38C8FD52E63
+8D3643F9D358C517C9C15243B0201B1060C8B78A0FD4B0632EC1B9F14E8A3536
+AAC6883B1DB90AD89AD99D275A9E91A83CE45AD028115188C7931AC1EE9A4DF1
+7DCEEACDC142E11017FE314C373BECD9497424C75D0B5D75FA3EC96AD8AF01EB
+D0D47EA044
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+0000000000000000000000000000000000000000000000000000000000000000
+cleartomark
+%%EndFont 
+TeXDict begin 39139632 55387786 1000 8000 8000 (md-tutorial.dvi)
+@start /Fa 193[796 1[796 60[{}2 996.264 /CMMI9 rf /Fb
+135[622 851 622 655 458 465 486 1[655 589 655 982 327
+622 1[327 655 589 360 541 655 524 655 573 97[{}22 996.264
+/CMBX9 rf /Fc 133[418 497 472 680 470 549 340 418 431
+470 523 523 575 836 261 470 1[314 523 470 314 470 523
+470 470 523 7[760 1[1021 2[732 575 746 1[694 784 760
+917 1[786 537 394 2[668 694 772 732 720 760 15[523 523
+523 314 1[314 10[314 33[{}49 996.264 /CMTI9 rf /Fd 231[692
+24[{}1 774.872 /CMSY7 rf /Fe 145[512 6[512 512 98[512
+2[796{}5 996.264 /CMSY9 rf /Ff 133[455 540 540 740 540
+569 398 404 401 540 569 512 569 853 284 540 313 284 569
+512 313 455 569 455 569 512 3[284 1[284 626 4[768 740
+569 754 796 697 796 768 938 640 2[370 768 803 668 697
+782 740 725 768 3[796 1[284 284 6[512 512 512 512 512
+284 1[284 796 1[398 398 1[796 3[512 284 33[{}64 996.264
+/CMR9 rf /Fg 193[861 1[861 60[{}2 1106.96 /CMMI10 rf
+/Fh 198[377 377 377 377 377 377 377 377 377 377 48[{}10
+553.48 /CMR5 rf /Fi 240[553 15[{}1 1106.96 /CMSY10 rf
+/Fj 133[581 581 1[581 581 581 581 581 581 581 581 581
+581 581 581 581 1[581 581 581 581 581 581 581 581 581
+3[581 1[581 5[581 1[581 581 581 581 581 581 581 3[581
+581 1[581 581 581 581 581 581 6[581 6[581 2[581 581 581
+581 3[581 581 40[{}50 1106.96 /CMTT10 rf /Fk 133[664
+789 1[1079 789 830 581 589 610 1[830 747 830 1[415 789
+1[415 830 747 1[682 830 664 830 726 12[1039 1[1115 1[1021
+1122 1168 1418 3[557 2[939 981 1[1079 1[1128 6[415 3[747
+747 747 747 747 747 2[415 33[830 12[{}41 1328.35 /CMBX12
+rf /Fl 133[453 537 1[736 509 594 368 453 467 1[566 566
+622 905 283 509 1[339 566 509 339 509 566 509 509 566
+13[622 2[751 1[823 993 3[427 3[751 836 792 1[823 6[339
+12[396 339 31[622 12[{}36 1106.96 /CMTI10 rf /Fm 133[566
+672 2[672 707 495 502 524 1[707 636 707 1061 354 2[354
+707 636 1[583 707 566 707 619 9[1316 4[955 13[976 1[906
+962 1[601 8[636 2[636 636 636 2[354 33[707 12[{}32 1106.96
+/CMBX10 rf /Fn 144[704 1[827 10[642 679 30[853 20[418
+45[{}6 1106.96 /CMCSC10 rf /Fo 131[1107 553 492 584 584
+799 584 615 430 437 434 584 615 553 615 922 307 584 338
+307 615 553 338 492 615 492 615 553 3[307 553 307 1[830
+830 1138 1[830 799 615 815 1[753 861 830 1015 692 861
+569 400 830 869 723 753 846 799 784 830 1[523 3[307 307
+553 553 553 553 553 553 553 553 553 553 553 307 369 307
+2[430 430 307 4[553 307 20[615 646 11[{}78 1106.96 /CMR10
+rf /Fp 134[946 946 2[996 697 707 732 1[996 897 996 1494
+498 946 1[498 996 897 548 818 996 797 996 872 9[1852
+2[1247 996 1338 8[668 2[1127 3[1275 1354 12[897 897 897
+897 3[598 45[{}34 1594.02 /CMBX12 rf /Fq 138[697 432
+531 548 3[731 1063 332 598 1[399 664 598 1[598 664 598
+1[664 32[996 17[399 4[531 531 40[{}19 1328.35 /CMTI12
+rf /Fr 140[513 506 1[723 1[723 1[361 2[361 723 650 1[578
+1[578 1[650 19[1192 8[993 2[975 12[650 1[650 1[650 48[{}17
+1328.35 /CMR12 rf /Fs 138[977 677 1[677 2[877 2[478 2[478
+7[877 12[1277 18[1326 19[577 45[{}10 1912.83 /CMR17 rf
+/Ft 144[1216 1[1428 10[1109 1173 30[1474 66[{}5 1912.83
+/CMCSC10 rf end
+%%EndProlog
+%%BeginSetup
+%%Feature: *Resolution 8000dpi
+TeXDict begin
+%%PaperSize: A4
+ end
+%%EndSetup
+%%Page: 1 1
+TeXDict begin 1 0 bop 14757 10627 a Ft(Bamboo)578 b Fs(-)g(A)g(T)-150
+b(utorial)18343 13837 y Fr(Marcel)434 b(Disc)-36 b(hinger)14758
+15387 y Fq(\(mar)-66 b(c)g(el.dischinger@tm.uka.de\))20487
+17992 y Fr(April)434 b(2004)-1550 22124 y Fp(Abstract)-1550
+24610 y Fo(The)554 b(goal)h(of)f(this)g(tutorial)h(is)f(to)g(sho)-31
+b(w)554 b(y)-31 b(ou)554 b(ho)-31 b(w)554 b(to)-1550
+25938 y(build)396 b(a)f(simple)h Fn(Bamboo)d Fo(application)398
+b(that)e(can)f(send)-1550 27267 y(simple)348 b(text)f(messages)g(from)g
+(one)g(no)31 b(de)346 b(to)h(another.)486 b(In)-1550
+28595 y(addition)286 b(it)f(will)h(giv)-31 b(e)285 b(y)-31
+b(ou)285 b(a)f(rough)h(insigh)-31 b(t)285 b(to)g(the)f(bam-)-1550
+29923 y(b)31 b(o)g(o)377 b(comm)-31 b(unication)379 b(and)e(ev)-31
+b(en)g(t)377 b(system.)514 b(W)-92 b(e)375 b(assume)-1550
+31252 y(that)515 b(the)f(reader)f(has)h(some)g(kno)-31
+b(wledge)516 b(of)e(P2P)h(sys-)-1550 32580 y(tems)522
+b(\(e.g.)g([)p Fm(?)q Fo(]\))g(b)31 b(efore)520 b(starting.)950
+b(It)520 b(cannot)j(b)31 b(e)520 b(our)-1550 33908 y(task)511
+b(to)g(explain)g(ho)-31 b(w)511 b(a)g(P2P)g(system)f(lik)-31
+b(e)511 b Fn(Bamboo)-1550 35237 y Fo(w)-31 b(orks.)961
+b(Refer)525 b(to)h(the)g(a)-31 b(v)-61 b(ailable)528
+b(do)31 b(cumen)-31 b(tation)528 b(for)-1550 36565 y
+Fn(Bamboo)439 b Fo([)p Fm(?)q Fo(].)706 b(and)441 b(P)-31
+b(astry)441 b([)p Fm(?)q Fo(])f(to)i(learn)e(more)h(ab)31
+b(out)-1550 37893 y(ho)-31 b(w)442 b(the)g Fn(Bamboo)e
+Fo(router)h(w)-31 b(orks)442 b(and)f(ho)-31 b(w)442 b(the)g(P2P)-1550
+39222 y(system)328 b(is)f(organized.)480 b(Y)-92 b(ou)328
+b(also)g(need)g(to)g(kno)-31 b(w)329 b(ho)-31 b(w)328
+b(to)-1550 40550 y(write)370 b(a)g(programme)g(in)g(Ja)-31
+b(v)-61 b(a.)-1550 44384 y Fp(1)1793 b(In)-50 b(tro)50
+b(duction)-1550 46870 y Fo(When)459 b(I)g(started)h(w)-31
+b(orking)461 b(with)g Fn(Bamboo)d Fo(there)h(w)-31 b(as)-1550
+48198 y(no)444 b(tutorial.)717 b(There)443 b(are)g(some)h(examples)g
+(of)g(mo)31 b(dules)-1550 49526 y(in)507 b(the)f(source)g(tree)g(but)g
+(they)h(are)f(to)31 b(o)507 b(complex)h(and)-1550 50855
+y(sometimes)373 b(to)31 b(o)372 b(inconsisten)-31 b(t)372
+b(to)g(learn)f(from)h(\(b)31 b(eside)371 b(a)-1550 52183
+y(lac)-31 b(k)274 b(of)g(commen)-31 b(ts)274 b(and)g(do)31
+b(cumen)-31 b(tation)276 b(for)d(the)g(simple)-1550 53511
+y(structures)369 b(used)f(at)i(eac)-31 b(h)370 b(stage\).)-443
+54873 y(Bam)-31 b(b)31 b(o)g(o)605 b(is)d(written)j(in)e(an)g(ev)-31
+b(en)g(t-driv)g(en,)663 b(single-)-1550 56201 y(threaded)300
+b(programming)i(st)-31 b(yle.)471 b(In)299 b(\014rst)g(place)i(it)f
+(inher-)-1550 57529 y(its)428 b(its)g(structure)f(from)h(SED)-31
+b(A,)429 b(whic)-31 b(h)428 b(stands)g(for)g(the)-1550
+58858 y Fl(Stage)-57 b(d,)569 b(Event-Driven)535 b(A)-28
+b(r)-57 b(chite)g(ctur)g(e)p Fo(.)941 b(As)518 b(the)h(name)-1550
+60186 y(suggests,)460 b(eac)-31 b(h)442 b(part)g(of)f(a)h
+Fn(Bamboo)e Fo(application)k(is)e(a)-1550 61514 y Fl(stage)83
+b Fo(;)381 b(comm)-31 b(unication)381 b(is)c(done)g(b)-31
+b(y)377 b(passing)h(ev)-31 b(en)g(ts)377 b(to)-1550 62843
+y(eac)-31 b(h)270 b(stage,)291 b(while)270 b(the)g(whole)g(application)
+i(remains)e(sin-)-1550 64171 y(gle)370 b(threaded)g(and)f(serialized.)
+-443 65532 y(This)342 b(tutorial)h(is)e(mean)-31 b(t)343
+b(to)f(b)31 b(e)340 b(a)i(short)f(in)-31 b(tro)31 b(duction)-1550
+66860 y(to)497 b Fn(Bamboo)e Fo(without)j(giving)h(a)d(deep)g(insigh)
+-31 b(t)498 b(of)f(the)-1550 68189 y(underlying)454 b(system.)745
+b(It)454 b(migh)-31 b(t)455 b(prepare)d(y)-31 b(ou)454
+b(to)g(start)-1550 69517 y(writing)347 b(y)-31 b(our)346
+b(o)-31 b(wn)346 b(stages)f(using)361 b Fn(Bamboo)344
+b Fo(and)i(to)f(use)-1550 70845 y(the)257 b(basic)f(functions)h(pro)-31
+b(vided)257 b(b)-31 b(y)257 b(the)f(system)h(to)g(create)-1550
+72174 y(y)-31 b(our)370 b(o)-31 b(wn)370 b(stage.)25128
+22124 y(This)277 b(can)g(only)h(b)31 b(e)276 b(a)h(start.)462
+b(If)276 b(y)-31 b(ou)278 b(are)e(going)i(to)g(write)24021
+23453 y(more)422 b(complex)g(stages,)436 b(y)-31 b(ou)422
+b(will)h(end)e(up)g(reading)h(the)24021 24781 y(source)459
+b(co)31 b(de)460 b(pro)-31 b(vided,)483 b(but)460 b(b)-31
+b(y)460 b(that)h(time)f(it)h(will)g(b)31 b(e)24021 26110
+y(easier)405 b(b)31 b(ecause)404 b(y)-31 b(ou)405 b(kno)-31
+b(w)406 b(the)f(basics.)600 b(This)405 b(T)-92 b(utorial)24021
+27438 y(do)31 b(es)369 b(not)h(deal)g(with)g(the)g Fn(Bamboo)d
+Fo(DHT)j(API.)25128 28784 y Fn(Bamboo)340 b Fo(uses)g(a)h(lot)h(of)f
+(co)31 b(de)341 b(from)h(the)f(OceanStore)24021 30112
+y(pro)61 b(ject.)477 b(Y)-92 b(ou)320 b(can)g(get)h(the)f(source)f(co)
+31 b(de)319 b(and)h(Ja)-31 b(v)-61 b(a-Do)31 b(c)24021
+31440 y(from)428 b(the)g(tap)31 b(estry)428 b(pro)61
+b(ject)428 b([)p Fm(?)q Fo(],)443 b(if)428 b(y)-31 b(ou)428
+b(w)-31 b(ould)429 b(lik)-31 b(e)429 b(to)24021 32769
+y(tak)-31 b(e)442 b(a)g(lo)31 b(ok)442 b(at)g(it.)709
+b(Y)-92 b(ou)441 b(do)h(not)g(need)e(it)i(for)f(running)24021
+34097 y Fn(Bamboo)p Fo(.)25128 35443 y(In)528 b(this)h(tutorial)h(I)e
+(also)h(describ)31 b(e)528 b(ho)-31 b(w)529 b(to)h(use)d(the)24021
+36771 y(SED)-31 b(A)365 b(ev)-31 b(en)g(t)367 b(mo)31
+b(del)366 b(whic)-31 b(h)366 b(is)f(implemen)-31 b(ted)367
+b(in)f Fn(Bam-)24021 38099 y(boo)p Fo(.)582 b(A)399 b(more)g
+Fl(mo)-57 b(dern)485 b Fo(w)-31 b(a)g(y)401 b(to)f(do)f(that)h(w)-31
+b(ould)401 b(b)31 b(e)399 b(to)24021 39428 y(use)g(the)i(Async)e
+(implemen)-31 b(tation)405 b(\(see)399 b(\\Programmers)24021
+40756 y(Guide")370 b(on)f([)p Fm(?)q Fo(]\).)24021 44508
+y Fp(2)1793 b(Structure)600 b(of)e(a)f(stage)24021 46965
+y Fo(This)411 b(section)g(will)h(giv)-31 b(e)411 b(y)-31
+b(ou)411 b(a)f(rough)h(o)-31 b(v)g(erview)412 b(of)e(the)24021
+48294 y(elemen)-31 b(ts)575 b(of)g(a)f(stage)h(and)g(the)f(usage)h(of)g
+(the)f(con\014g)24021 49622 y(\014le.)477 b(Y)-92 b(ou)320
+b(will)i(\014nd)e(more)g(detailed)i(explanation)h(in)d(sec-)24021
+50950 y(tion)338 b Fm(??)e Fo(where)g(w)-31 b(e)337 b(will)h(w)-31
+b(alk)338 b(through)f(the)f(co)31 b(de)337 b(of)f(the)24021
+52279 y(example)483 b(app)31 b(ended)482 b(and)f(explain)j(the)d(ho)-31
+b(w)483 b(and)f(wh)-31 b(y)24021 53607 y(more)370 b(deeply)-92
+b(,)369 b(through)h(that)h(example.)24021 56797 y Fk(2.1)1495
+b(First)500 b(o)-42 b(v)g(erview)24021 58873 y Fo(A)2054
+b(new)i(stage)h(m)-31 b(ust)2056 b(implemen)-31 b(t)2058
+b(the)24021 60201 y Fj(seda.sandStorm.api.EventHandlerIF)2674
+b Fo(in)-31 b(ter-)24021 61530 y(face)720 b(in)h(order)e(to)h(act)h(as)
+f(a)g Fn(Bamboo)f Fo(stage)h(and)24021 62858 y(b)31 b(e)620
+b(part)g(of)h(its)g(ev)-31 b(en)g(t)621 b(handling.)1247
+b(There)620 b(is)g(also)h(a)24021 64186 y(class)390 b(called)h
+Fj(bamboo.util.StandardStage)j Fo(y)-31 b(ou)390 b(can)24021
+65515 y(inherit)501 b(from.)885 b(W)-92 b(e)500 b(will)h(do)g(this)f
+(for)g(our)g(new)g(stage,)24021 66843 y(called)312 b
+Fl(SimpleStage)394 b Fo(\(see)310 b(App)31 b(endix)311
+b Fm(??)f Fo(for)h(the)f(source)24021 68171 y(co)31 b(de\).)25128
+69517 y(The)286 b(stage)h(can)g(b)31 b(e)285 b(seen)h(as)g(ha)-31
+b(ving)288 b(three)e(parts;)314 b(eac)-31 b(h)24021 70845
+y(is)476 b(refered)e(to)i(a)g(di\013eren)-31 b(t)476
+b(p)31 b(oin)-31 b(t)477 b(in)f(time,)504 b(during)475
+b(the)24021 72174 y(lifetime)372 b(of)d(a)h Fn(Bamboo)e
+Fo(stage.)23191 75495 y(1)p eop end
+%%Page: 2 2
+TeXDict begin 2 1 bop 2657 7085 a Fi(\017)554 b Fj(SimpleStage\(\))371
+b Fo(\(the)f(constructor\))2657 9253 y Fi(\017)554 b
+Fj(init\(ConfigDataIF)583 b(config\))2657 11421 y Fi(\017)554
+b Fj(handleEvent\(QueueElementIF)585 b(elem\))2657 13742
+y Fo(The)354 b Fl(Constructor)473 b Fo(should)354 b(b)31
+b(e)354 b(used)g(to)i(initialize)h(the)1550 15070 y(data)428
+b(of)g(the)f(stage)h(\(as)f(y)-31 b(ou)428 b(w)-31 b(ould)429
+b(do)e(it)h(in)f(an)-31 b(y)428 b(Ja)-31 b(v)-61 b(a)1550
+16399 y(programme\).)480 b(In)328 b Fn(Bamboo)f Fo(y)-31
+b(ou)329 b(need)f(to)h(subscrib)31 b(e)327 b(to)1550
+17727 y(ev)-31 b(en)g(ts)297 b(y)-31 b(ou)298 b(w)-31
+b(an)g(t)298 b(to)g(hear)f(from,)312 b(so)297 b(this)g(is)g(the)g
+(place)h(to)1550 19055 y(\014ll)357 b(the)h(arra)-31
+b(y)357 b(structures)f(pro)-31 b(vided)357 b(b)-31 b(y)358
+b Fl(Standar)-57 b(dStage)1550 20384 y Fo(with)370 b(the)g(ev)-31
+b(en)g(ts)369 b(y)-31 b(ou)370 b(need)f(and)h(w)-31 b(an)g(t.)2657
+21712 y(The)687 b(registering)i(of)f(the)f(ev)-31 b(en)g(ts)688
+b(is)g(done)f(in)h(the)1550 23040 y Fj(init\(\))568 b
+Fo(function.)1091 b(This)568 b(function)h(is)f(called)h(during)1550
+24369 y(startup,)277 b(passing)254 b(the)g(con\014guration)i
+(parameters)e(to)g(us.)1550 25697 y(The)348 b(registration)i(is)f(b)31
+b(e)348 b(done)g(b)-31 b(y)349 b Fl(Standar)-57 b(dStage)p
+Fo(,)352 b(so)d(it)1550 27025 y(is)375 b(a)h(go)31 b(o)g(d)377
+b(idea)f(to)g(call)h Fj(super.init\(\))g Fo(here.)512
+b(W)-92 b(e)374 b(also)1550 28354 y(w)-31 b(an)g(t)258
+b(to)e(fetc)-31 b(h)257 b(all)h(con\014guration)g(parameters)f(here,)
+278 b(and)1550 29682 y(it)399 b(is)g(a)g(go)31 b(o)g(d)399
+b(place)h(to)f(register)g(pa)-31 b(yloads)400 b(for)f(our)g(out-)1550
+31010 y(going)371 b(messages.)2657 32339 y Fj(handleEvent\(\))618
+b Fo(is)e(called)h(from)g Fn(Bamboo)d Fo(ev)-31 b(ery)1550
+33667 y(time)406 b(a)g(ev)-31 b(en)g(t)406 b(w)-31 b(e)406
+b(registered)g(to)g(arriv)-31 b(es)405 b(and)h(needs)f(to)1550
+34995 y(b)31 b(e)368 b(handled.)494 b(This)369 b(is)g(the)h(core)f(of)h
+(our)f(stage.)2657 36324 y(There)824 b(is)h(another)h(function)g
+(called)g Fj(destroy\(\))1550 37652 y Fo(in)683 b Fj
+(seda.sandStorm.api.EventHanderIF)p Fo(.)688 b(It)683
+b(w)-31 b(as)1550 38980 y(mean)g(t)534 b(to)g(b)31 b(e)533
+b(a)g(destructor)h(but)f(actually)j(it)e(is)f(dep-)1550
+40309 y(recated)369 b(in)h Fn(Bamboo)d Fo(and)j(is)f(nev)-31
+b(er)369 b(called.)1550 43388 y Fk(2.2)1495 b(The)498
+b(con\014guration)j(\014le)1550 45431 y Fo(One)382 b(thing)h(that)h
+Fn(Bamboo)d Fo(inherits)h(from)h(Oceanstore)1550 46759
+y(is)509 b(the)h(SandStorm)g(to)31 b(ol)511 b(to)f(parse)f(the)g
+(con\014guration)1550 48088 y(\014le.)749 b(The)455 b(con\014g)h
+(\014le)f(is)f(XML-lik)-31 b(e)456 b(and)f(v)-31 b(ery)455
+b(easy)g(to)1550 49416 y(understand)369 b(as)g(y)-31
+b(ou)370 b(will)h(see.)2630 53268 y(Listing)f(1:)493
+b(Our)369 b Fn(Bamboo)e Fo(con\014g)j(\014le:)493 b(simple.cfg)2280
+54905 y Fh(1)-131 b Fg(<)32 b Fo(s)98 b(a)g(n)g(d)g(s)g(t)g(o)g(r)g(m)
+-32 b Fg(>)3190 56234 y(<)90 b Fo(g)156 b(l)g(o)g(b)g(a)g(l)30
+b Fg(>)2280 57562 y Fh(3)1861 b Fg(<)121 b Fo(i)186 b(n)h(i)f(t)h(a)g
+(r)e(g)i(s)55 b Fg(>)6109 58890 y Fo(n)132 b(o)g(d)g(e)p
+8978 58890 333 45 v 661 w(i)g(d)965 b(l)169 b(o)g(c)g(a)g(l)g(h)g(o)g
+(s)g(t)g(:)g(3)g(2)g(0)g(0)2280 60219 y Fh(5)1861 b Fg(<)-10
+b Fo(/)242 b(i)187 b(n)f(i)g(t)h(a)g(r)f(g)g(s)55 b Fg(>)3190
+61547 y(<)-11 b Fo(/)213 b(g)156 b(l)g(o)g(b)g(a)g(l)29
+b Fg(>)2280 62875 y Fh(7)533 b Fg(<)89 b Fo(s)155 b(t)g(a)g(g)g(e)g(s)
+22 b Fg(>)4518 64204 y(<)p Fo(N)66 b(e)g(t)g(w)g(o)g(r)g(k)-65
+b Fg(>)2280 65532 y Fh(9)3503 b Fo(c)182 b(l)g(a)g(s)g(s)873
+b(b)25 b(a)g(m)g(b)g(o)g(o)203 b(.)272 b(n)93 b(e)g(t)g(w)g(o)g(r)g(k)
+270 b(.)244 b(N)66 b(e)g(t)g(w)g(o)g(r)g(k)5846 66860
+y Fg(<)121 b Fo(i)187 b(n)f(i)h(t)f(a)h(r)f(g)g(s)55
+b Fg(>)1903 68189 y Fh(11)3189 b Fg(<)-10 b Fo(/)242
+b(i)187 b(n)f(i)h(t)f(a)h(r)f(g)h(s)54 b Fg(>)4518 69517
+y(<)-10 b Fo(/)121 b(N)66 b(e)g(t)g(w)g(o)g(r)g(k)-65
+b Fg(>)1903 70845 y Fh(13)4518 72174 y Fg(<)27 b Fo(R)92
+b(o)g(u)g(t)g(e)g(r)-38 b Fg(>)27474 7085 y Fh(15)3503
+b Fo(c)182 b(l)g(a)g(s)g(s)873 b(b)25 b(a)g(m)g(b)g(o)g(o)203
+b(.)325 b(r)147 b(o)g(u)g(t)g(e)g(r)324 b(.)271 b(R)92
+b(o)g(u)g(t)g(e)g(r)31417 8413 y Fg(<)121 b Fo(i)186
+b(n)h(i)f(t)h(a)g(r)f(g)g(s)55 b Fg(>)27474 9741 y Fh(17)4760
+b Fo(g)112 b(a)g(t)g(e)g(w)g(a)g(y)p 37802 9741 V 623
+w(c)g(o)g(u)g(n)g(t)831 b(1)32983 11070 y(g)106 b(a)g(t)g(e)g(w)g(a)g
+(y)p 37755 11070 V 612 w(0)1603 b(l)169 b(o)g(c)g(a)g(l)g(h)g(o)g(s)g
+(t)g(:)g(3)g(2)g(0)g(0)27474 12398 y Fh(19)3189 b Fg(<)-10
+b Fo(/)242 b(i)187 b(n)f(i)h(t)f(a)h(r)f(g)g(s)55 b Fg(>)30089
+13726 y(<)-10 b Fo(/)148 b(R)92 b(o)g(u)g(t)g(e)g(r)-38
+b Fg(>)27474 15055 y Fh(21)30089 16383 y Fg(<)51 b Fo(S)117
+b(i)g(m)g(p)g(l)g(e)g(S)g(t)g(a)g(g)g(e)-13 b Fg(>)27474
+17711 y Fh(23)3503 b Fo(c)182 b(l)g(a)g(s)g(s)873 b(b)25
+b(a)g(m)g(b)g(o)g(o)203 b(.)296 b(S)117 b(i)g(m)g(p)g(l)g(e)g(S)g(t)g
+(a)g(g)g(e)31417 19040 y Fg(<)k Fo(i)186 b(n)h(i)f(t)h(a)g(r)f(g)g(s)55
+b Fg(>)27474 20368 y Fh(25)4802 b Fo(d)153 b(e)g(b)g(u)g(g)p
+36751 20368 V 703 w(l)g(e)g(v)g(e)g(l)873 b(1)32892 21696
+y(m)15 b(o)g(d)g(e)807 b(s)129 b(e)g(n)g(d)g(e)g(r)27474
+23025 y Fh(27)3189 b Fg(<)-10 b Fo(/)242 b(i)187 b(n)f(i)h(t)f(a)h(r)f
+(g)g(s)55 b Fg(>)30089 24353 y(<)-10 b Fo(/)172 b(S)117
+b(i)g(m)g(p)g(l)g(e)g(S)g(t)g(a)g(g)g(e)-13 b Fg(>)27474
+25681 y Fh(29)532 b Fg(<)-10 b Fo(/)211 b(s)155 b(t)g(a)g(g)g(e)g(s)22
+b Fg(>)28096 27010 y(<)-10 b Fo(/)154 b(s)98 b(a)g(n)g(d)g(s)g(t)g(o)g
+(r)g(m)-32 b Fg(>)28227 30642 y Fo(As)372 b(the)g(format)h(of)f(the)g
+(con\014g)g(\014le)g(is)g(easy)f(to)i(under-)27121 31970
+y(stand)413 b(I)h(will)h(just)f(explain)h(the)f(comp)31
+b(onen)-31 b(ts)414 b(of)h(it)f(and)27121 33298 y(their)369
+b(meanings.)28227 34716 y(In)380 b(line)i(2{6)f(y)-31
+b(ou)382 b(see)d(the)i(de\014nition)h(of)f(global)i(argu-)27121
+36044 y(men)-31 b(ts.)985 b(Ev)-31 b(ery)534 b(stage)g(can)g(access)e
+(these)i(argumen)-31 b(ts.)27121 37373 y(Y)-92 b(ou)564
+b(see)f(here)h(ho)-31 b(w)565 b(to)g(de\014ne)e(the)i(no)31
+b(de)p 46087 37373 V 398 w(id)565 b(for)f(this)27121
+38701 y(stage,)370 b(whic)-31 b(h)370 b(consist)g(of)g
+Fl(hostname:p)-57 b(ortnumb)g(er)p Fo(.)28227 40119 y(A)-31
+b(t)328 b(Line)e(7)g(the)h(stage)g(con\014guration)h(starts;)342
+b(w)-31 b(e)326 b(need)27121 41447 y(the)492 b(Net)-31
+b(w)g(ork)495 b(and)d(the)h(Router)g(stages)g(to)g(send)f(mes-)27121
+42776 y(sages)391 b(o)-31 b(v)g(er)393 b(the)f Fn(Bamboo)e
+Fo(P2P)j(system.)561 b(Y)-92 b(ou)392 b(ha)-31 b(v)g(e)392
+b(to)27121 44104 y(de\014ne)257 b(at)h(least)g(one)g(gatew)-31
+b(a)g(y)260 b(to)f(join)f(the)g(P2P)g(net)-31 b(w)g(ork.)27121
+45432 y(In)423 b(this)h(example)i(w)-31 b(e)424 b(join)h(ourself,)439
+b(assuming)424 b(that)i(w)-31 b(e)27121 46761 y(are)437
+b(the)i(\014rst)e(no)31 b(de)438 b(in)h(the)f(net)-31
+b(w)g(ork.)701 b(If)438 b(y)-31 b(ou)439 b(are)f(run-)27121
+48089 y(ning)367 b(more)g(than)h(one)f(no)31 b(de)366
+b(y)-31 b(ou)368 b(should)f(add)g(the)g(no)31 b(de)27121
+49418 y(of)367 b(the)h(net)-31 b(w)g(ork)368 b(y)-31
+b(ou)368 b(w)-31 b(an)g(t)369 b(to)f(join,)h(here.)491
+b(T)-92 b(ak)-31 b(e)368 b(a)g(lo)31 b(ok)27121 50746
+y(at)378 b(the)g Fj(init\(\))h Fo(function)g(of)464 b
+Fj(bamboo.router.Router)27121 52074 y Fo(in)361 b(order)g(to)h(get)g
+(an)g(o)-31 b(v)g(erview)363 b(of)e(the)h(a)-31 b(v)-61
+b(ailable)364 b(Router)27121 53403 y(options)370 b(and)f(ho)-31
+b(w)371 b(to)f(use)e(them.)28227 54820 y(As)536 b(y)-31
+b(ou)536 b(can)f(easily)i(see,)577 b(the)535 b(de\014nition)i(of)f(a)g
+(new)27121 56149 y(stage)356 b(starts)f(with)h(a)g(T)-92
+b(ag)356 b(con)-31 b(taining)358 b(the)d(name)h(of)g(the)27121
+57477 y(stage)412 b(\(the)g(classname\))h(follo)-31 b(w)g(ed)414
+b(b)-31 b(y)411 b(the)h(option)h(class)27121 58805 y(where)408
+b(the)h(stage)h(loader)f(is)g(told)h(whic)-31 b(h)410
+b(class)f(to)g(load.)27121 60134 y(F)-92 b(or)386 b(our)h(stage)h
+Fl(SimpleStage)471 b Fo(w)-31 b(e)388 b(ha)-31 b(v)g(e)388
+b(t)-31 b(w)g(o)389 b(argumen)-31 b(ts)27121 61462 y(called)406
+b Fj(mode)p Fo(,)415 b(whic)-31 b(h)406 b(will)h(later)f(switc)-31
+b(h)407 b(b)31 b(et)-31 b(w)g(een)406 b(send-)27121 62791
+y(ing)255 b(messages)f(or)h(not,)278 b(and)255 b Fj(debug)p
+41866 62791 349 45 v 419 w(level)g Fo(whic)-31 b(h)255
+b(is)g(used)27121 64119 y(b)-31 b(y)266 b Fl(Standar)-57
+b(dStage)350 b Fo(to)268 b(switc)-31 b(h)267 b(on)g(debugging)i
+(messages.)27121 68254 y Fp(3)1792 b(W)-149 b(alk-through)27121
+70845 y Fo(In)522 b(this)i(section)g(w)-31 b(e)524 b(will)h(w)-31
+b(alk)525 b(through)f(the)f(co)31 b(de)524 b(of)27121
+72174 y(our)285 b Fl(SimpleStage)369 b Fo(\(see)285 b(App)31
+b(endix)286 b Fm(??)p Fo(\))g(and)f(explain)i(the)26290
+75495 y(2)p eop end
+%%Page: 3 3
+TeXDict begin 3 2 bop -1550 7085 a Fo(imp)31 b(ortan)-31
+b(t)356 b(things)f(in)f(the)f(example.)489 b(This)354
+b(v)-31 b(ery)354 b(simple)-1550 8413 y(stage)457 b(will)h(send)d
+(\(text-\))j(messages)f(to)f(the)h(no)31 b(de)456 b(with)-1550
+9741 y(the)257 b(closest)g(no)31 b(de-ID)255 b(to)j(zero.)454
+b(So)257 b(fasten)g(y)-31 b(our)257 b(seat-b)31 b(elt)-1550
+11070 y(and)370 b(let's)g(go.)-1550 15493 y Fk(3.1)1495
+b(Class)500 b(declaration)g(and)f(v)-83 b(ariables)-1550
+18001 y Fo(Let's)646 b(skip)f(the)g(\014rst)g(16)h(lines,)714
+b(y)-31 b(ou)646 b(should)g(b)31 b(e)644 b(fa-)-1550
+19329 y(miliar)544 b(with)f(that.)1013 b(As)541 b(I)h(men)-31
+b(tioned)544 b(b)31 b(efore)541 b(w)-31 b(e)543 b(ex-)-1550
+20658 y(tend)393 b(from)g Fj(bamboo.util.StandardStage)i
+Fo(\(it)f(migh)-31 b(t)-1550 21986 y(b)31 b(e)546 b(a)h(go)31
+b(o)g(d)547 b(idea)g(to)g(risk)f(a)g(glimpse)i(in)-31
+b(to)548 b(its)e(source)-1550 23314 y(co)31 b(de)489
+b(sometime)h(later\).)852 b Fl(Standar)-57 b(dStage)572
+b Fo(implemen)-31 b(ts)-1550 24643 y Fj
+(seda.sandStorm.api.EventHandlerIF)771 b Fo(and)766 b(pro-)-1550
+25971 y(vides)318 b(us)g(a)g(logging)j(in)-31 b(terface)319
+b(and)g(some)f(functions)h(y)-31 b(ou)-1550 27299 y(ma)g(yb)31
+b(e)546 b(\014nd)f(useful)g(when)g(writing)h(y)-31 b(our)546
+b(o)-31 b(wn)546 b(stage.)-1550 28628 y(When)435 b(w)-31
+b(e)435 b(use)g(suc)-31 b(h)435 b(a)g(function)h(from)g
+Fl(Standar)-57 b(dStage)-1550 29956 y Fo(I)369 b(will)i(p)31
+b(oin)-31 b(t)370 b(it)g(out)g(to)g(y)-31 b(ou.)-443
+31534 y(In)455 b(lines)h(20)h(to)f(21)g(w)-31 b(e)456
+b(help)g(ourself)g(to)g(an)g(applica-)-1550 32863 y(tion)309
+b(ID.)e(It)h(is)g(used)f(lik)-31 b(e)309 b(a)f(TCP/UDP)h(p)31
+b(ort)308 b(n)-31 b(um)g(b)31 b(er)308 b(in)-1550 34191
+y Fn(Bamboo)p Fo(.)623 b(When)412 b(using)i(the)f Fn(Bamboo)f
+Fo(routing)i(mes-)-1550 35519 y(sages)494 b(y)-31 b(ou)495
+b(ha)-31 b(v)g(e)495 b(to)g(sp)31 b(ecify)494 b(the)h(application)i(ID)
+c(y)-31 b(ou)-1550 36848 y(w)g(an)g(t)518 b(to)f(send)e(to)i(\(will)i
+(almost)f(ev)-31 b(ery)516 b(time)h(b)31 b(e)516 b(y)-31
+b(our)-1550 38176 y(o)g(wn)404 b(ID\).)f(T)-92 b(o)403
+b(get)g(a)g(unique)g(n)-31 b(um)g(b)31 b(er)403 b(for)g(our)f(applica-)
+-1550 39504 y(tion)456 b(\(that)g(is)e(what)i(a)f(stage)g(is,)476
+b(a)455 b Fn(Bamboo)e Fo(applica-)-1550 40833 y(tion\),)372
+b(w)-31 b(e)369 b(use)g(a)g(hash)g(of)h(our)f(class)g(name.)-1550
+45256 y Fk(3.2)1495 b(Our)499 b(o)-42 b(wn)500 b(P)-42
+b(a)g(yload)-1550 47764 y Fo(W)-92 b(e)443 b(are)h(no)-31
+b(w)445 b(talking)h(ab)31 b(out)444 b(lines)h(28)f(to)h(46.)717
+b(As)443 b(y)-31 b(ou)-1550 49092 y(can)388 b(see,)j(w)-31
+b(e)388 b(de\014ne)f(a)g(class)h(named)g Fl(Paylo)-57
+b(ad)501 b Fo(that)388 b(im-)-1550 50421 y(plemen)-31
+b(ts)371 b Fj(ostore.util.QuickSerializable)p Fo(.)499
+b(This)-1550 51749 y(is)453 b(ho)-31 b(w)454 b(to)g(create)f(a)g(pa)-31
+b(yload)455 b(for)e(y)-31 b(our)453 b(messages)g(y)-31
+b(ou)-1550 53077 y(w)g(an)g(t)360 b(to)e(send.)488 b(The)358
+b(pa)-31 b(yload)360 b(has)e(to)h(b)31 b(e)357 b(serialized)h(b)31
+b(e-)-1550 54406 y(fore)370 b(sending)f(and)g(deserialization)j(afterw)
+-31 b(ards.)-443 55984 y(In)369 b(line)h(39,)-553 57312
+y Fm(public)e(v)-35 b(oid)369 b(serialize)p Fo(\(OutputBu\013er)g(b\))
+-1550 58641 y(w)-31 b(e)380 b(ha)-31 b(v)g(e)380 b(to)g(add)f(eac)-31
+b(h)379 b(v)-61 b(ariable)380 b(w)-31 b(e)380 b(w)-31
+b(an)g(t)381 b(to)e(b)31 b(e)379 b(trans-)-1550 59969
+y(mitted)300 b(to)f(the)g(output)g(bu\013er.)469 b(The)298
+b(coun)-31 b(terpart)299 b(is)g(the)-1550 61297 y(constructor,)-553
+62626 y Fm(public)368 b Fl(Paylo)-57 b(ad)p Fo(\(InputBu\013er)369
+b(bu\013er)o(\))-1550 63954 y(whic)-31 b(h)515 b(deserializes)f(the)g
+(bu\013er)f(bac)-31 b(k)514 b(to)h(the)f(original)-1550
+65282 y(v)-61 b(ariables.)486 b(In)344 b(our)h(example)i(there)e(is)g
+(just)h(the)f(message)-1550 66611 y(itself)438 b(\(a)g(string\))g(that)
+g(w)-31 b(e)437 b(need)f(to)i(add)f(to)h(the)f(bu\013er)-1550
+67939 y(and)370 b(sa)-31 b(v)g(e)369 b(bac)-31 b(k)370
+b(from)g(it.)-443 69517 y(T)-92 b(ak)-31 b(e)290 b(a)f(lo)31
+b(ok)290 b(in)-31 b(to)290 b Fj(ostore.util.InputBuffer)i
+Fo(and)-1550 70845 y Fj(ostore.util.OutputBuffer)693
+b Fo(to)c(see)g(whic)-31 b(h)690 b(t)-31 b(yp)31 b(es)-1550
+72174 y(and)370 b(ob)61 b(jects)370 b(are)f(supp)31 b(orted.)24021
+7085 y Fk(3.3)1495 b(A)499 b(new)f(Ev)-42 b(en)g(t)499
+b(t)-42 b(yp)42 b(e)24021 10071 y Fo(In)1081 b(line)g(49,)1261
+b(w)-31 b(e)1081 b(create)h(a)f(new)g(message)h(or)24021
+11400 y(ev)-31 b(en)g(t)960 b(t)-31 b(yp)31 b(e)960 b(\(I)f(think)h(b)
+31 b(oth)959 b(notions)i(are)e(OK\).)24021 12728 y(T)-92
+b(o)1017 b(create)f(one,)1178 b(w)-31 b(e)1017 b(need)e(to)i(implemen)
+-31 b(t)1018 b(the)24021 14056 y Fj(seda.sandStorm.api.QueueElementIF)
+1167 b Fo(in)-31 b(terface)24021 15385 y(whic)g(h)466
+b(is)g(in)f(fact)i(empt)-31 b(y)-92 b(,)491 b(so)465
+b(w)-31 b(e)466 b(do)f(not)i(need)e(to)h(im-)24021 16713
+y(plemen)-31 b(t)389 b(an)-31 b(y)388 b(functions.)548
+b(Normally)389 b(y)-31 b(ou)388 b(w)-31 b(an)g(t)389
+b(to)f(add)24021 18042 y(some)424 b(con)-31 b(ten)g(t)426
+b(to)e(the)g(ev)-31 b(en)g(t)425 b(lik)-31 b(e)425 b(a)g(pa)-31
+b(yload)426 b(\(see)d(sec-)24021 19370 y(tion)553 b Fm(??)q
+Fo(\))f(and)g(some)h(other)f(v)-61 b(ariables.)1043 b(In)551
+b(this)i(case)24021 20698 y(w)-31 b(e)393 b(use)g(this)g(ev)-31
+b(en)g(t)394 b(to)f(alarm)h(us)f(after)g(a)g(certain)h(time;)24021
+22027 y(and)452 b(do)h(not)g(need)f(an)-31 b(y)453 b(further)f
+(functionalit)-31 b(y)-92 b(.)745 b(There)24021 23355
+y(are)371 b(plen)-31 b(t)g(y)373 b(of)f(examples)g(in)g(the)f
+Fn(Bamboo)f Fo(source)h(tree)24021 24683 y(sho)-31 b(wing)371
+b(ho)-31 b(w)370 b(to)g(create)f(y)-31 b(our)370 b(o)-31
+b(wn)370 b(ev)-31 b(en)g(t)370 b(t)-31 b(yp)31 b(e.)24021
+30472 y Fk(3.4)1495 b(The)498 b(constructor)24021 33459
+y Fo(The)395 b(imp)31 b(ortan)-31 b(t)397 b(thing)e(in)g(our)g
+(constructor)f(is)h(the)g(set-)24021 34787 y(ting)523
+b(up)f(of)h(the)f Fj(event)p 34649 34787 349 45 v 419
+w(types[])h Fo(arra)-31 b(y)-92 b(.)951 b(In)521 b(this)i(ar-)24021
+36116 y(ra)-31 b(y)662 b(w)-31 b(e)661 b(sa)-31 b(v)g(e)662
+b(the)g(classes)f(of)h(the)f(ev)-31 b(en)g(ts)662 b(w)-31
+b(e)662 b(w)-31 b(an)g(t)24021 37444 y(to)673 b(listen)g(to)g(\(these)f
+(ev)-31 b(en)g(ts)673 b(will)g(b)31 b(e)672 b(forw)-31
+b(arded)673 b(to)24021 38772 y(our)466 b Fj(handleEvent\(\))j
+Fo(function\).)786 b Fl(Standar)-57 b(dStage)550 b Fo(de-)24021
+40101 y(\014nes)792 b(t)-31 b(w)g(o)794 b(more)e(arra)-31
+b(ys)792 b(for)h(this)f(purp)31 b(ose)791 b(called)24021
+41429 y Fj(inb)p 25834 41429 V 419 w(msg)p 27996 41429
+V 419 w(types[])517 b Fo(and)f Fj(outb)p 37622 41429
+V 419 w(msg)p 39784 41429 V 419 w(types[])p Fo(.)934
+b(As)516 b(w)-31 b(e)24021 42757 y(do)400 b(not)h(need)f(to)g(use)g
+(them)g(at)h(this)f(p)31 b(oin)-31 b(t)401 b(w)-31 b(e)401
+b(will)h(just)24021 44086 y(cold-shoulder)318 b(them)h(for)e(the)h
+(momen)-31 b(t.)478 b(But)318 b(I)f(will)i(talk)24021
+45414 y(ab)31 b(out)370 b(them)g(in)g(App)31 b(endix)369
+b Fm(??)p Fo(.)25128 47249 y(So)557 b(y)-31 b(ou)557
+b(can)f(see)g(the)h(three)f(ev)-31 b(en)g(ts)557 b(w)-31
+b(e)557 b(registered)24021 48578 y(to)455 b(here.)747
+b(The)454 b(last)h(one)f(w)-31 b(e)455 b(already)g(kno)-31
+b(w:)664 b(It)454 b(is)g(our)24021 49906 y(o)-31 b(wn)365
+b(ev)-31 b(en)g(t)364 b Fl(A)-28 b(larm)448 b Fo(w)-31
+b(e)364 b(create)g(a)f(few)h(lines)g(ab)31 b(o)-31 b(v)g(e.)492
+b(The)24021 51234 y(other)480 b(t)-31 b(w)g(o)481 b(ev)-31
+b(en)g(ts)479 b(are)g(pro)-31 b(vided)480 b(b)-31 b(y)495
+b Fn(Bamboo)478 b Fo(itself,)24021 52563 y Fj
+(seda.sandStorm.api.StagesInitializedSignal)24021 53891
+y Fo(is)561 b(passed)f(to)h(us)g(when)g(all)h(the)f(stages)g(of)g(our)g
+(no)31 b(de)24021 55220 y(\014nished)367 b(their)g Fj(init\(\))p
+Fo(,)i(so)e(it)g(is)g(a)h(signal)g(that)g(w)-31 b(e)368
+b(no)-31 b(w)24021 56548 y(can)369 b(use)g(the)g Fn(Bamboo)f
+Fo(system.)24021 57876 y Fj(bamboo.api.BambooRouteDeliver)383
+b Fo(is)d(the)f(ev)-31 b(en)g(t)380 b(w)-31 b(e)24021
+59205 y(get)492 b(when)g(someone)g(routed)g(a)f(message)h(to)g(our)g
+(no)31 b(de)24021 60533 y(through)370 b Fn(Bamboo)p Fo(.)25128
+62368 y(So)397 b(remem)-31 b(b)31 b(er:)548 b(Y)-92 b(ou)397
+b(need)g(to)g(add)g(y)-31 b(our)397 b(ev)-31 b(en)g(ts)398
+b(y)-31 b(ou)24021 63697 y(w)g(an)g(t)482 b(to)f(receiv)-31
+b(e)480 b(in)-31 b(to)482 b(these)e(arra)-31 b(ys.)826
+b(W)-92 b(e)479 b(will)j(see)d(in)24021 65025 y(section)472
+b Fm(??)g Fo(what)g(to)g(to)g(with)h(these)e(ev)-31 b(en)g(ts)472
+b(and)g(ho)-31 b(w)24021 66353 y(the)369 b(whole)i(thing)f(w)-31
+b(orks.)25128 68189 y(Another)382 b(imp)31 b(ortan)-31
+b(t)384 b(thing)e(is)g(sho)-31 b(wn)382 b(in)g(line)g(61.)530
+b(In)24021 69517 y(order)346 b(to)i(use)e(them)i(w)-31
+b(e)348 b(need)e(to)i(register)f(our)g(pa)-31 b(yloads)24021
+70845 y(to)370 b Fn(Bamboo)e Fo(b)-31 b(y)369 b(passing)h(the)f(class)h
+(as)f(an)g(argumen)-31 b(t:)25017 72174 y Fm(register)p
+29294 72174 382 45 v 460 w(t)c(yp)35 b(e)q Fo(\()p Fl(Paylo)-57
+b(ad)p Fo(.)q Fm(class)o Fo(\);)23191 75495 y(3)p eop
+end
+%%Page: 4 4
+TeXDict begin 4 3 bop 1550 7085 a Fk(3.5)1495 b(Initialization)1550
+9154 y Fo(When)465 b(sandStorm)i(starts)f(all)i(the)e(stages)g(it)h
+(calls)g(the)1550 10483 y Fj(init\(\))387 b Fo(function)g(of)g(eac)-31
+b(h)386 b(stage)h(and)g(passes)e(the)h(data)1550 11811
+y(from)369 b(the)h(con\014guration)h(\014le)f(to)g(it.)1550
+13139 y(The)f(\014rst)g(thing)h(w)-31 b(e)370 b(are)f(doing)h(is)f
+(calling)2546 14468 y Fm(sup)35 b(er)r Fo(.)p Fm(init)p
+Fo(\(con\014g)96 b(\);)1550 15796 y(whic)-31 b(h)381
+b(passes)e(the)i(con\014guration)h(data)f(to)g(the)g
+Fj(init\(\))1550 17124 y Fo(function)488 b(of)e Fl(Standar)-57
+b(dStage)p Fo(.)845 b(If)486 b(y)-31 b(ou)487 b(tak)-31
+b(e)487 b(a)g(glimpse)1550 18453 y(in)-31 b(to)522 b
+Fl(Standar)-57 b(dStage)603 b Fo(y)-31 b(ou)522 b(will)g(see)e(that)i
+(it)f(do)31 b(es)521 b(t)-31 b(w)g(o)1550 19781 y(things:)2657
+22273 y Fi(\017)554 b Fo(Setting)371 b(the)e(debug-lev)-31
+b(el)371 b(for)e(the)g(logger)2657 24544 y Fi(\017)554
+b Fo(Subscribing)369 b(the)h(ev)-31 b(en)g(ts)2657 27037
+y(The)499 b(latter)h(one)f(is)f(esp)31 b(ecially)500
+b(imp)31 b(ortan)-31 b(t)501 b(for)e(us)f({)1550 28365
+y Fl(Standar)-57 b(dStage)547 b Fo(subscrib)31 b(es)463
+b(our)h(ev)-31 b(en)g(ts)464 b(to)h Fn(Bamboo)p Fo(.)1550
+29693 y(I)418 b(do)i(not)g(w)-31 b(an)g(t)421 b(to)e(go)h(more)g(in)-31
+b(to)420 b(detail:)595 b(If)419 b(y)-31 b(ou)420 b(w)-31
+b(an)g(t)1550 31022 y(or)324 b(need)g(to)i(kno)-31 b(w)325
+b(more)g(ab)31 b(out)326 b(that)g(refer)d(to)i(the)g
+Fl(Stan-)1550 32350 y(dar)-57 b(dStage)452 b Fo(co)31
+b(de)369 b(and)g(App)31 b(endix)370 b Fm(??)p Fo(.)2657
+33693 y(No)-31 b(w)309 b(it)g(is)g(time)g(to)g(get)g(the)g(con\014g)g
+(options)g(w)-31 b(e)309 b(added)1550 35021 y(to)453
+b(the)g(con\014g)g(\014le)g(in)f(section)i Fm(??)p Fo(.)742
+b(There)453 b(are)f(sev)-31 b(eral)1550 36349 y(functions)370
+b(to)g(get)g(the)f(con\014g)h(data,)h(in)f(line)f(79)h(w)-31
+b(e)370 b(use)2546 37678 y Fm(con\014g)p 5874 37678 382
+45 v 459 w(get)p 8047 37678 V 460 w(string)q Fo(\(con\014g)q(,)f(")q
+(mo)31 b(de)q("\))1550 39006 y(to)465 b(retriev)-31 b(e)464
+b(a)h(string)g(from)g(the)f(option)i Fl(mo)-57 b(de)p
+Fo(.)779 b(There)1550 40334 y(are)369 b(more)g(functions)h(lik)-31
+b(e)371 b(that,)g(e.g.)2546 41663 y Fm(con\014g)p 5874
+41663 V 459 w(get)p 8047 41663 V 460 w(in)-35 b(t)o Fo(\()q(con\014g)q
+(,)485 b(")p Fg(<)p Fo(name)q Fg(>)p Fo(")q(\))369 b(or)2546
+42991 y Fm(con\014g)p 5874 42991 V 459 w(get)p 8047 42991
+V 460 w(b)35 b(o)g(olean)r Fo(\(con\014g)q(,)370 b(")p
+Fg(<)p Fo(name)q Fg(>)p Fo(")q(\),)1550 44319 y Fl(Standar)-57
+b(dStage)432 b Fo(will)351 b(tell)g(y)-31 b(ou)350 b(more)g(ab)31
+b(out)350 b(these)f(func-)1550 45648 y(tions.)2657 46990
+y(In)368 b(the)g(follo)-31 b(wing)372 b(lines)d(w)-31
+b(e)369 b(set)f(the)h(b)31 b(o)g(olean)370 b Fj(sender)1550
+48319 y Fo(to)397 b Fl(true)480 b Fo(if)398 b(the)f(con\014g)g(mak)-31
+b(es)398 b(us)f(to)g(a)h(sender,)403 b(or)397 b Fl(false)1550
+49647 y Fo(otherwise.)1550 52821 y Fk(3.6)1495 b(Ev)-42
+b(en)g(t)499 b(handling)1550 54891 y Fj(handleEvent\(QueueElementIF)585
+b(elem\))304 b Fo(is)g(called)g(ev-)1550 56219 y(ery)402
+b(time)i(an)e(ev)-31 b(en)g(t)404 b(sho)-31 b(ws)402
+b(up)h(at)g(our)f(no)31 b(de.)593 b(Y)-92 b(ou)403 b(will)1550
+57548 y(only)541 b(get)g(ev)-31 b(en)g(ts)541 b(y)-31
+b(ou)541 b(ha)-31 b(v)g(e)541 b(subscrib)31 b(ed)539
+b(to)i(\(see)f(sec-)1550 58876 y(tion)596 b Fm(??)q Fo(\))f(and)h({)f
+(if)h(it)g(is)g(a)f Fn(Bamboo)f Fo(message)i(lik)-31
+b(e)1550 60204 y Fj(bamboo.api.BambooRouteDeliver)837
+b Fo({)d(those)g(that)1550 61533 y(matc)-31 b(h)429 b(y)-31
+b(our)428 b(application)k(ID,)427 b(so)h(the)g(purp)31
+b(ose)427 b(of)i(this)1550 62861 y(function)322 b(is)f(to)g(handle)h
+(the)f(ev)-31 b(en)g(t)321 b(dep)31 b(ending)321 b(on)g(whic)-31
+b(h)1550 64189 y(ev)g(en)g(tt)g(yp)31 b(e)371 b(w)-31
+b(e)369 b(receiv)-31 b(ed.)2657 65532 y(A)g(t)331 b(this)h(p)31
+b(oin)-31 b(t)332 b(a)f(v)-31 b(ery)331 b(imp)31 b(ortan)-31
+b(t)333 b(note:)474 b Fn(Bamboo)329 b Fo(is)1550 66860
+y(a)443 b(singe-threaded)h(ev)-31 b(en)g(t-driv)g(en)444
+b(application)i(\(see)d(the)1550 68189 y(\\Programmers)351
+b(guide")g(on)f([)p Fm(?)q Fo(]\).)487 b(Because)350
+b(of)g(this,)355 b(y)-31 b(ou)1550 69517 y(ha)g(v)g(e)410
+b(to)g(a)-31 b(v)g(oid)411 b(blo)31 b(c)-31 b(king)411
+b(co)31 b(de)409 b(in)h(y)-31 b(our)409 b(ev)-31 b(en)g(t)410
+b(handler)1550 70845 y(|)455 b(ev)-31 b(en)456 b(more,)478
+b(y)-31 b(ou)456 b(should)g(h)-31 b(urry)455 b(up)h(in)f(y)-31
+b(our)456 b(ev)-31 b(en)g(t)1550 72174 y(handler)279
+b(b)31 b(ecause)278 b(the)g(whole)i(\(not)g(only)f(y)-31
+b(our)279 b(stage,)298 b(the)27121 7085 y(whole)333 b(no)31
+b(de\))332 b(will)i(b)31 b(e)331 b(blo)31 b(c)-31 b(k)g(ed)333
+b(un)-31 b(til)333 b(y)-31 b(ou)333 b(\014nished)f(y)-31
+b(our)27121 8413 y(handling.)28227 10101 y(So)370 b(let's)g(go)g
+(through)g(this)f(step)h(b)-31 b(y)369 b(step:)27121
+14887 y Fm(3.6.1)1273 b(While)425 b(not)g(initialized)27121
+17600 y Fo(So)420 b(let's)h(lo)31 b(ok)422 b(at)f(lines)f(90)h(to)g
+(111.)648 b(As)420 b(y)-31 b(ou)421 b(will)h(guess)27121
+18929 y(from)400 b(the)f Fj(if\(initialized\))j Fo(in)e(line)g(90)g
+(the)g(here)f(o)31 b(c-)27121 20257 y(curring)543 b(ev)-31
+b(en)g(ts)544 b(will)h(only)f(app)31 b(ear)544 b(during)f(initializa-)
+27121 21585 y(tion.)27121 22914 y(One)355 b(momen)-31
+b(t,)361 b(w)-31 b(e)356 b(ha)-31 b(v)g(e)357 b(done)f(all)h
+(initialization)k(in)356 b(the)27121 24242 y Fj(init\(\))479
+b Fo(function)h(already)-92 b(.)821 b(W)-92 b(ell,)507
+b(that)480 b(is)e(righ)-31 b(t,)508 b(but)27121 25571
+y(there)466 b(are)g(still)h(some)g(things)g(to)g(do)f(b)31
+b(efore)466 b(our)g(stage)27121 26899 y(can)369 b(to)h(its)f(regular)h
+(w)-31 b(ork.)28227 28587 y(SandStorm)496 b(will)h(pass)d(the)h
+Fl(StagesInitialize)-57 b(dSignal)27121 29915 y Fo(to)328
+b(us)f(as)h(so)31 b(on)327 b(as)h(ev)-31 b(ery)328 b(stage)g(has)g
+(\014nished)f(its)h Fj(init\(\))27121 31244 y Fo(function.)592
+b(So)403 b(at)g(this)f(p)31 b(oin)-31 b(t)404 b(w)-31
+b(e)402 b(can)h(really)g(use)e Fn(Bam-)27121 32572 y(boo)395
+b Fo(for)h(sending)h(messages.)574 b(And)397 b(w)-31
+b(e)397 b(ha)-31 b(v)g(e)397 b(to,)405 b(in)396 b(or-)27121
+33900 y(der)442 b(to)i(register)g(our)f(application)j(ID)d(\(our)g(\\p)
+31 b(ort"\))445 b(to)27121 35229 y Fn(Bamboo)429 b Fo(telling)j(it)g
+(that)f(w)-31 b(e)431 b(w)-31 b(an)g(t)433 b(to)e(receiv)-31
+b(e)431 b(ev)-31 b(en)g(ts)27121 36557 y(for)329 b(that)i(sp)31
+b(eci\014c)330 b(ID.)f(This)i(is)e(b)31 b(een)330 b(done)g(b)-31
+b(y)330 b(sending)g(a)27121 37886 y Fj
+(bamboo.api.BambooRouterAppRegReq)p Fo(,)548 b(passing)509
+b(as)27121 39214 y(the)451 b(\014rst)g(argumen)-31 b(t)453
+b(our)e(application)k(ID,)c(and)h(as)f(the)27121 40542
+y(last)404 b(one,)414 b(a)404 b(reference)f(to)i(our)f(sink)g(\(that)h
+(is)f(our)g(ev)-31 b(en)g(t)27121 41871 y(queue\).)28227
+43559 y(By)559 b(calling)575 b Fj(dispatch\(message\))561
+b Fo(the)d(message)g(is)27121 44887 y(passed)640 b(to)h(the)g
+(so-called)h Fl(classi\014er)p Fo(,)709 b(whic)-31 b(h)641
+b(decides)27121 46215 y(whic)-31 b(h)613 b(stage)g(should)f(get)h(this)
+f(message)h(\(remem)-31 b(b)31 b(er)27121 47544 y(that)549
+b(the)g Fl(Standar)-57 b(dStage)632 b Fo(subscrib)31
+b(ed)547 b(to)i(our)g(ev)-31 b(en)g(ts)27121 48872 y(during)324
+b Fj(init\(\))309 b Fo(from)h(the)f(classi\014er\).)473
+b(W)-92 b(e)308 b(will)j(use)d(this)27121 50201 y(function)451
+b(ev)-31 b(ery)451 b(time)g(w)-31 b(e)451 b(w)-31 b(an)g(t)452
+b(to)f(send)f(\(dispatc)-31 b(h\))452 b(a)27121 51529
+y(message.)28227 53217 y(If)358 b(the)g(application)j(registration)f
+(succeeds)d(\(whic)-31 b(h)359 b(it)27121 54545 y(should\))580
+b(a)g Fj(bamboo.api.BambooRouterAppReqResp)27121 55874
+y Fo(message)249 b(will)h(b)31 b(e)248 b(passed)g(to)i(our)e(sink.)453
+b(No)-31 b(w)249 b(w)-31 b(e)249 b(are)g(fully)27121
+57202 y(registered)444 b(to)h(the)f(system,)464 b(and)445
+b(set)f Fj(initialized)h Fo(to)27121 58530 y Fl(true)p
+Fo(.)464 b(A)-31 b(t)286 b(line)f(109)i(y)-31 b(ou)286
+b(will)g(see,)302 b(that)286 b(w)-31 b(e)286 b(put)f(all)i(o)31
+b(ccur-)27121 59859 y(ring)410 b(ev)-31 b(en)g(ts)411
+b(during)f(initialization)415 b(in)-31 b(to)412 b(a)f(Link)-31
+b(edList.)27121 61187 y(No)g(w)265 b(after)g(w)-31 b(e)265
+b(are)f(really)i(up,)285 b(w)-31 b(e)265 b(pro)31 b(cess)263
+b(all)j(the)f(ev)-31 b(en)g(ts)27121 62516 y(from)369
+b(this)h(list.)28227 64204 y(In)f(line)h(106)h(y)-31
+b(ou)369 b(will)i(notice)g(a)e(new)h(command:)28117 65532
+y Fm(dispatc)-35 b(h)p 32815 65532 V 458 w(later)p Fo(\(message)q(,)370
+b(time)q(\);)27121 66860 y(It)278 b(is)h(almost)i(the)e(same)g(dispatc)
+-31 b(h\(\))281 b(command)g(as)d(b)31 b(efore)27121 68189
+y(but)349 b(y)-31 b(ou)351 b(can)e(no)-31 b(w)351 b(sp)31
+b(ecify)350 b(a)g(duration)g(in)g(milliseconds)27121
+69517 y(whic)-31 b(h)339 b(tells)g(the)f(classi\014er)g(ho)-31
+b(w)339 b(long)g(to)g(w)-31 b(ait)340 b(till)g(deliv-)27121
+70845 y(ering)410 b(the)f(message.)615 b(W)-92 b(e)409
+b(use)g(this)h(command)i(to)e(set)g(a)27121 72174 y(alarm)370
+b(timer)g(to)g(a)-31 b(w)g(ak)g(e)371 b(us)e(after)h(10)g(seconds.)
+26290 75495 y(4)p eop end
+%%Page: 5 5
+TeXDict begin 5 4 bop -1550 7085 a Fm(3.6.2)1274 b(Bam)-35
+b(b)35 b(o)g(oRouteDeliv)-35 b(er)-1550 9158 y Fo(When)299
+b(a)h(message)g(w)-31 b(as)301 b(sen)-31 b(t)300 b(to)g(us)f(routed)h
+(b)-31 b(y)315 b Fn(Bamboo)-1550 10486 y Fo(\(means)614
+b(using)g(the)f Fj(bamboo.api.BambooRouteInit)-1550 11814
+y Fo(message)404 b(whic)-31 b(h)404 b(w)-31 b(e)403 b(will)i(get)f(to)f
+(kno)-31 b(w)405 b(in)e(section)h Fm(??)p Fo(\),)-1550
+13143 y(w)-31 b(e)370 b(will)h(receiv)-31 b(e)369 b(a)h
+Fj(BambooRouteDeliver)h Fo(message.)-1550 14471 y(In)480
+b(line)h(116)h(w)-31 b(e)481 b(cast)g(the)g(ev)-31 b(en)g(t)481
+b(to)g(get)g(access)f(to)h(its)-1550 15800 y(data.)493
+b(As)367 b(y)-31 b(ou)367 b(see)f(w)-31 b(e)367 b(assume)g(that)h
+(there)e(is)g(our)h Fl(Pay-)-1550 17128 y(lo)-57 b(ad)438
+b Fo(attac)-31 b(hed)326 b(as)d(a)h(pa)-31 b(yload)326
+b(and)e(prin)-31 b(t)325 b(out)f(the)g(string)-1550 18456
+y(sa)-31 b(v)g(ed)322 b(in)f(it.)477 b(There)320 b(are)h(some)g(more)g
+(\014elds)g(in)g(this)g(mes-)-1550 19785 y(sage:)667
+b(Please)456 b(tak)-31 b(e)457 b(a)g(lo)31 b(ok)457 b(in)-31
+b(to)457 b(the)f(source)g(for)g(more)-1550 21113 y(information.)-1550
+24076 y Fm(3.6.3)1274 b(Alarm)-1550 26149 y Fo(When)523
+b(w)-31 b(e)524 b(are)g(w)-31 b(ok)g(en)525 b(b)-31 b(y)524
+b(our)f(o)-31 b(wn)525 b Fl(A)-28 b(larm)607 b Fo(message)-1550
+27477 y(w)-31 b(e)445 b(send)f(a)g(new)h(text)g(message)g(through)g
+Fn(Bamboo)e Fo(to)-1550 28805 y(the)519 b(no)31 b(de)519
+b(with)h(the)f(lo)-31 b(w)g(est)520 b(a)-31 b(v)-61 b(ailable)522
+b(no)31 b(de)518 b(ID,)h(and)-1550 30134 y(start)514
+b(another)g(alarm)g(timer.)925 b(So)514 b(the)f(lines)g(132)i(and)-1550
+31462 y(135)501 b(should)f(b)31 b(e)500 b(familiar,)535
+b(but)500 b(not)h(line)f(126)i(and)e(the)-1550 32791
+y(follo)-31 b(wing.)-443 34135 y(In)436 b(these)h(line)g(y)-31
+b(ou)438 b(see)e(ho)-31 b(w)437 b(to)h(let)f Fn(Bamboo)f
+Fo(route)-1550 35463 y(a)342 b(message)h(for)e(y)-31
+b(ou.)485 b(T)-92 b(o)342 b(tell)h Fn(Bamboo)d Fo(that,)349
+b(y)-31 b(ou)343 b(ha)-31 b(v)g(e)-1550 36792 y(to)521
+b(use)e(a)h Fj(bamboo.api.BambooRouteInit)k Fo(message.)-1550
+38120 y(The)370 b(argumen)-31 b(ts)370 b(are:)-443 40620
+y Fi(\017)554 b Fo(destination)372 b(no)31 b(de)369 b(ID)-443
+42898 y Fi(\017)554 b Fo(application)372 b(ID)-443 45176
+y Fi(\017)554 b Fo(use)369 b(up)31 b(calls?)-443 47454
+y Fi(\017)554 b Fo(use)369 b(iterativ)-31 b(e)371 b(routing)g(\(or)e
+(recursiv)-31 b(e\)?)-443 49733 y Fi(\017)554 b Fo(the)370
+b(pa)-31 b(yload)371 b(to)f(b)31 b(e)369 b(transmitted)-443
+52232 y(As)443 b(y)-31 b(ou)444 b(should)g(already)g(kno)-31
+b(w)460 b Fn(Bamboo)441 b Fo(uses)i(160)-1550 53561 y(bit)499
+b(no)31 b(de)499 b(IDs)e(as)h(addresses)f(\(lik)-31 b(e)500
+b(P)-31 b(astry\).)881 b(T)-92 b(o)499 b(sa)-31 b(v)g(e)-1550
+54889 y(suc)g(h)648 b(a)g(long)h(n)-31 b(um)g(b)31 b(er)647
+b(in)i(Ja)-31 b(v)-61 b(a)648 b(w)-31 b(e)648 b(ha)-31
+b(v)g(e)649 b(to)f(use)g(a)-1550 56217 y Fj(BigInteger)433
+b Fo(ob)61 b(ject.)682 b(In)431 b(this)h(example)h(w)-31
+b(e)433 b(route)f(the)-1550 57546 y(message)670 b(to)f(the)g(no)31
+b(deID)668 b(0)h(\(zero\).As)h(y)-31 b(ou)670 b(should)-1550
+58874 y(kno)-31 b(w,)649 b(when)592 b(this)g(no)31 b(de)592
+b(do)31 b(es)591 b(not)h(exists)g Fn(Bamboo)-1550 60203
+y Fo(routes)552 b(the)g(message)g(to)h(the)f(no)31 b(de)551
+b(with)i(the)f(closest)-1550 61531 y(no)31 b(de)369 b(ID.)-1550
+62859 y(The)442 b(thing)g(with)g(the)f(application)k(ID)440
+b(is)h(kno)-31 b(wn)442 b(since)-1550 64188 y(section)370
+b Fm(??)q Fo(,)f(so)g(no)h(more)f(w)-31 b(ords)369 b(ab)31
+b(out)371 b(that.)-443 65532 y(If)361 b(y)-31 b(ou)361
+b(pass)f Fl(true)443 b Fo(as)361 b(the)g(next)g(argumen)-31
+b(t,)364 b Fn(Bamboo)-1550 66860 y Fo(will)331 b(mak)-31
+b(e)330 b(up)31 b(calls)329 b(to)h(ev)-31 b(ery)329 b(in)-31
+b(terim)330 b(no)31 b(de)329 b(on)g(the)g(w)-31 b(a)g(y)-1550
+68189 y(of)363 b(the)g(message)g(to)g(its)g(destination.)493
+b(These)362 b(no)31 b(des)362 b(will)-1550 69517 y(receiv)-31
+b(e)609 b(a)f Fj(bamboo.api.BambooRouteUpcall)k Fo(ev)-31
+b(en)g(t)-1550 70845 y(\(if)789 b(they)f(subscrib)31
+b(ed)787 b(to)h(this)g(ev)-31 b(en)g(t)789 b(and)f(if)g(they)-1550
+72174 y(ha)-31 b(v)g(e)496 b(the)e(same)h(application)j(ID)493
+b(of)i(course\))g(and)g(can)24021 7085 y(c)-31 b(hange)659
+b(the)g(message)f(or)g(react)h(on)f(it.)1361 b(And)658
+b(they)24021 8413 y(need)704 b(to)h(con)-31 b(tin)g(ue)706
+b(the)f(routing)g(b)-31 b(y)705 b(dispatc)-31 b(hing)706
+b(a)24021 9741 y Fj(bamboo.api.BambooRouteContinue)p
+Fo(.)490 b(I)346 b(will)j(not)f(de-)24021 11070 y(scrib)31
+b(e)496 b(more)g(of)h(this)g(mec)-31 b(hanism:)749 b(It)497
+b(is)f(easy)h(to)g(un-)24021 12398 y(derstand)337 b(and)h(familiar)i
+(in)d(ev)-31 b(ery)337 b(P2P)i(system)e(I)g(kno)-31 b(w.)24021
+13726 y(T)-92 b(ak)-31 b(e)419 b(a)f(glimpse)i(in)-31
+b(to)419 b(the)f(t)-31 b(w)g(o)420 b(men)-31 b(tioned)420
+b(classes)e(for)24021 15055 y(more)370 b(information.)25128
+16478 y(The)544 b(switc)-31 b(h)544 b(for)g(c)-31 b(ho)31
+b(osing)544 b(b)31 b(et)-31 b(w)g(een)545 b(iterativ)-31
+b(e)545 b(and)24021 17807 y(recursiv)-31 b(e)552 b(routing)i(is)f
+(deprecated,)599 b(so)553 b(just)g(sa)-31 b(y)553 b Fl(false)24021
+19135 y Fo(here.)25128 20558 y(Last)392 b(but)f(not)i(least,)398
+b(w)-31 b(e)392 b(add)g(the)f(pa)-31 b(yload)394 b(w)-31
+b(e)392 b(w)-31 b(an)g(t)24021 21887 y(to)439 b(transmit.)699
+b(That's)440 b(it,)456 b(so)437 b(easy)h(to)h(send)e(a)h(message)24021
+23215 y(o)-31 b(v)g(er)370 b Fn(Bamboo)p Fo(.)24021 27381
+y Fp(4)1793 b(Finally)24021 29982 y Fo(Finally)521 b(y)-31
+b(ou)519 b(w)-31 b(an)g(t)521 b(to)f(run)e(y)-31 b(our)519
+b(stage.)943 b(So)519 b(compile)24021 31310 y Fl(SimpleStage)461
+b Fo(and)376 b(sa)-31 b(v)g(e)377 b(the)g(simple.cfg)i(\014le)d(to)i
+(the)e(ap-)24021 32639 y(propriate)484 b(place.)834 b(Change)485
+b(\(if)f(not)f(already)h(done\))g(to)24021 33967 y(the)369
+b Fn(Bamboo)f Fo(directory)i(and)f(t)-31 b(yp)31 b(e:)25272
+36292 y Ff(.)144 b(/)250 b(b)105 b(i)g(n)157 b(/)112
+b(r)61 b(u)g(n)30 b Fe(\000)c Ff(j)116 b(a)g(v)g(a)753
+b(b)23 b(a)g(m)g(b)g(o)g(o)187 b(.)353 b(l)188 b(s)g(s)352
+b(.)268 b(D)103 b(u)g(s)g(t)g(D)g(e)g(v)g(i)g(l)156 b
+Fe(n)42450 37509 y Ff(s)119 b(i)g(m)g(p)g(l)g(e)287 b(.)307
+b(c)141 b(f)g(g)25128 40040 y Fo(This)379 b(will)h(start)e
+Fl(DustDevil)492 b Fo(whic)-31 b(h)379 b(uses)f Fl(SandStorm)24021
+41368 y Fo(to)667 b(parse)f(the)h(con\014guration)h(\014le)f
+(\\simple.cfg")i(and)24021 42697 y(starting)428 b(the)f(stages)g
+(included)h(in)f(the)f(it.)666 b(Y)-92 b(ou)427 b(should)24021
+44025 y(see)278 b(the)h(in)f(the)h(output)h(ho)-31 b(w)279
+b(the)g(messages)g(are)f(sen)-31 b(t)278 b(and)24021
+45353 y(receiv)-31 b(ed.)24021 46682 y(Y)-92 b(ou)729
+b(ma)-31 b(y)730 b(start)e(more)h(no)31 b(des)728 b(b)-31
+b(y)729 b(adapting)i(\\sim-)24021 48010 y(ple.cfg".)25128
+49434 y(So)554 b(that's)g(it:)862 b(If)553 b(y)-31 b(ou)554
+b(understand)f(the)h(things)g(w)-31 b(e)24021 50762 y(used)497
+b(in)i(this)f(tutorial)i(y)-31 b(ou)499 b(are)f(ready)g(to)h(write)f(y)
+-31 b(our)24021 52090 y(o)g(wn)452 b(one)g(or)f(start)g(reading)h
+(through)g(the)g(co)31 b(de)451 b(of)g(the)24021 53419
+y(other)399 b(stages)g(shipp)31 b(ed)398 b(with)h Fn(Bamboo)p
+Fo(.)579 b(Y)-92 b(ou)399 b(will)h(\014nd)24021 54747
+y(these)502 b(structure)g(in)g(almost)j(ev)-31 b(ery)502
+b(stage)h(\(b)31 b(eside)502 b(the)24021 56075 y(stages)370
+b(that)g(uses)e(the)i(ASync)f(ev)-31 b(en)g(t)370 b(mo)31
+b(del\).)25128 57499 y(In)505 b(App)31 b(endix)506 b
+Fm(??)f Fo(y)-31 b(ou)506 b(will)h(\014nd)e(instructions)i(ho)-31
+b(w)24021 58827 y(to)392 b(send)e(messages)g(direct)h(to)h(a)f(no)31
+b(de)391 b(without)h(routing)24021 60156 y(them)317 b(through)g
+Fn(Bamboo)p Fo(.)474 b(App)31 b(endix)317 b Fm(??)f Fo(con)-31
+b(tains)318 b(the)24021 61484 y(full)370 b(source)f(co)31
+b(de)369 b(for)g(the)h Fl(SimpleStage)p Fo(.)24021 65649
+y Fp(References)24575 68251 y Fo([1])554 b Fj(http://www.bamboo-)55
+b(dht.org)24575 70845 y Fo([2])554 b Fj(http://research.microsoft.com/)
+43726 70559 y Fd(\030)44423 70845 y Fj(antr/)26296 72174
+y(Pastry/)23191 75495 y Fo(5)p eop end
+%%Page: 6 6
+TeXDict begin 6 5 bop 2103 7085 a Fo([3])555 b Fj
+(http://www.cs.berkeley.edu/)19512 6799 y Fd(\030)20208
+7085 y Fj(ravenben/)3825 8413 y(tapestry/)2103 10804
+y Fo([4])g Fj(http://oceanstore.org/publications/)3825
+12132 y(papers/abstracts/iptps03-)55 b(api.html)1550
+16028 y Fp(App)50 b(endix)1550 19199 y(A)1793 b(Sending)656
+b(messages)g(direct)g(to)4697 21191 y(a)598 b(no)50 b(de)1550
+23698 y Fo(Sometimes)366 b(y)-31 b(ou)366 b(migh)-31
+b(t)367 b(not)e(w)-31 b(an)g(t)367 b(to)e(use)f Fn(Bamboo)g
+Fo(to)1550 25027 y(route)349 b(a)h(message)g(to)g(a)g(no)31
+b(de,)354 b(but)349 b(instead)i(send)d(it)j(\\di-)1550
+26355 y(rect")473 b(to)h(a)f(sp)31 b(eci\014ed)473 b(address)f(\(e.g.)
+806 b(an)473 b(IP)g(address\),)1550 27683 y(and)460 b(not)h(to)g(its)g
+(closest)f(no)31 b(de)461 b(\(I)f(set)g(the)g(w)-31 b(ord)461
+b(direct)1550 29012 y(in)-31 b(to)337 b(quotation)j(marks)c(b)31
+b(ecause)336 b(the)g(message)h(will)h(still)1550 30340
+y(b)31 b(e)549 b(routed)g(if)h(the)g(destination)i(is)d(not)h(ph)-31
+b(ysical)551 b(con-)1550 31668 y(nected)435 b(to)g(our)f(no)31
+b(de\).)690 b(F)-92 b(or)433 b(this)i(reason)g(y)-31
+b(ou)435 b(w)-31 b(an)g(t)437 b(to)1550 32997 y(use)368
+b Fj(ostore.network.NetworkMessage)p Fo(.)2657 34369
+y(Let's)321 b(ha)-31 b(v)g(e)323 b(a)f(quic)-31 b(k)322
+b(lo)31 b(ok)323 b(at)f Fj(ostore.util.NodeId)p Fo(.)1550
+35698 y Fl(NetworkMessage)330 b Fo(uses)249 b(this)h(class)f(for)h
+(addresses.)451 b Fl(Stan-)1550 37026 y(dar)-57 b(dStage)770
+b Fo(creates)687 b(one)h(for)f(y)-31 b(our)688 b(no)31
+b(de,)768 b(the)687 b(v)-61 b(ari-)1550 38354 y(able)804
+b(name)f(is)g Fj(my)p 10485 38354 349 45 v 419 w(node)p
+13228 38354 V 419 w(id)p Fo(.)1794 b(T)-92 b(ak)-31 b(e)804
+b(a)g(lo)31 b(ok)804 b(in)-31 b(to)1550 39683 y Fj(ostore.util.NodeId)p
+Fo(:)465 b(T)-92 b(o)310 b(create)g(a)f(new)h(No)31 b(deId)309
+b(ob-)1550 41011 y(ject)281 b(y)-31 b(ou)282 b(need)f(just)g(the)g(IP)g
+(address)f(and)h(the)g(p)31 b(ort)281 b(n)-31 b(um-)1550
+42339 y(b)31 b(er.)647 b(Y)-92 b(ou)421 b(will)i(need)d(to)i(ha)-31
+b(v)g(e)422 b(suc)-31 b(h)420 b(an)i(ob)61 b(ject)422
+b(for)f(the)1550 43668 y(destination)285 b(no)31 b(de)284
+b(y)-31 b(ou)284 b(w)-31 b(an)g(t)285 b(to)g(send)d(y)-31
+b(our)284 b(message)g(to.)1550 47001 y Fk(A.1)1495 b(The)498
+b(Net)-42 b(w)g(ork)501 b(stage)1550 49127 y Fo(So)369
+b(let's)h(go)g(through)g(it)g(step)f(b)-31 b(y)370 b(step:)2657
+50500 y(First,)284 b(create)263 b(a)f(new)h Fl(NetworkMessage)344
+b Fo(ob)61 b(ject,)286 b(e.g.:)2727 52824 y Fc(N)70 b(o)g(d)g(e)g(I)g
+(d)813 b Ff(d)126 b(e)g(s)g(t)651 b(=)3220 54042 y Fb(n)-51
+b(e)g(w)634 b Fc(N)70 b(o)g(d)g(e)g(I)g(d)192 b Ff(\()119
+b(3)g(2)g(0)g(0)241 b(,)851 b(I)116 b(n)g(e)g(t)g(A)g(d)g(d)g(r)g(e)g
+(s)g(s)284 b(.)7603 55259 y(g)31 b(e)g(t)g(B)g(y)g(N)g(a)g(m)g(e)140
+b(\()159 b(")211 b(l)160 b(o)g(c)g(a)g(l)g(h)g(o)g(s)g(t)211
+b(")242 b(\))191 b(\))f(;)2739 56477 y Fc(N)83 b(e)g(t)g(w)g(o)g(r)g(k)
+g(M)g(e)g(s)g(s)g(a)g(g)g(e)630 b Ff(n)-64 b(m)458 b(=)3220
+57695 y Fb(n)-51 b(e)g(w)646 b Fc(N)83 b(e)g(t)g(w)g(o)g(r)g(k)g(M)g(e)
+g(s)g(s)g(a)g(g)g(e)188 b Ff(\()213 b(d)105 b(e)g(s)g(t)376
+b(,)914 b Fb(f)134 b(a)g(l)g(s)g(e)318 b Ff(\))182 b(;)1550
+60174 y Fo(If)573 b(y)-31 b(ou)574 b(add)f(y)-31 b(our)574
+b(sink)f(\()p Fl(Standar)-57 b(dStage)657 b Fo(sa)-31
+b(v)g(es)574 b(it)g(to)1550 61503 y Fj(my)p 2782 61503
+V 418 w(sink)p Fo(\))506 b(to)g Fj(comp)p 10273 61503
+V 419 w(q)p Fo(,)539 b(the)505 b(Net)-31 b(w)g(ork)507
+b(stage)e(will)i(send)1550 62831 y(y)-31 b(ou)925 b(a)f
+Fj(ostore.network.NetworkMessageResult)1550 64159 y Fo(whic)-31
+b(h)511 b(will)h(tell)f(y)-31 b(ou)511 b(if)g(transmission)g(w)-31
+b(as)511 b(successful)1550 65488 y(or)536 b(not.)994
+b(If)536 b(y)-31 b(ou)537 b(put)f(something)i(in)e Fj(user)p
+21014 65488 V 419 w(data)h Fo(this)1550 66816 y(will)456
+b(also)f(b)31 b(e)454 b(passed)f(to)i(y)-31 b(ou)455
+b(together)h(with)f(the)g(Net-)1550 68144 y(w)-31 b(orkMessageResult)
+370 b(ev)-31 b(en)g(t.)2657 69517 y(Dispatc)g(h)809 b(the)h(ev)-31
+b(en)g(t,)920 b(and)809 b(that's)i(it)e({)h(y)-31 b(ou'v)g(e)1550
+70845 y(sen)g(t)895 b(the)g(message)h(directly)-92 b(.)2070
+b(If)895 b(y)-31 b(ou)896 b(w)-31 b(an)g(t)897 b(to)1550
+72174 y(send)846 b(an)-31 b(y)848 b(pa)-31 b(yload)849
+b(y)-31 b(ou)848 b(will)g(ha)-31 b(v)g(e)848 b(to)g(create)f(a)27121
+7085 y(new)578 b(ev)-31 b(en)g(t)579 b(t)-31 b(yp)31
+b(e)579 b(extending)h(from)e(Net)-31 b(w)g(orkMessage)27121
+8413 y(and)628 b(adding)h(a)g(v)-61 b(ariable)629 b(for)g(the)f(pa)-31
+b(yload)630 b(\(of)g(t)-31 b(yp)31 b(e)27121 9741 y Fj
+(ostore.util.QuickSerializable)p Fo(\).)27121 13085 y
+Fk(A.2)1495 b(Again:)665 b(Ev)-42 b(en)g(t)499 b(t)-42
+b(yp)42 b(es)27121 15214 y Fo(So)450 b(ho)-31 b(w)452
+b(do)31 b(es)450 b(this)h(w)-31 b(ork?)738 b(F)-92 b(or)449
+b(explanation)454 b(w)-31 b(e)451 b(ha)-31 b(v)g(e)27121
+16543 y(to)687 b(step)f(bac)-31 b(k)687 b(to)g(section)g
+Fm(??)f Fo(just)g(for)h(a)f(momen)-31 b(t)27121 17871
+y(where)596 b(I)f(men)-31 b(tioned)599 b(that)e(there)f(are)h(t)-31
+b(w)g(o)598 b(more)e(ar-)27121 19199 y(ra)-31 b(ys)697
+b(for)h(ev)-31 b(en)g(ts)698 b(called)g Fj(outb)p 41362
+19199 V 419 w(event)p 44686 19199 V 420 w(types[])g Fo(and)27121
+20528 y Fj(inb)p 28934 20528 V 418 w(event)p 32257 20528
+V 420 w(types[])p Fo(.)28227 21902 y(When)595 b Fl(Standar)-57
+b(dStage)678 b Fo(subscrib)31 b(es)593 b(to)j(these)e(mes-)27121
+23231 y(sages)518 b(it)h(also)g(adds)f(a)h(\014lter)g(to)g(eac)-31
+b(h)518 b(ev)-31 b(en)g(t)520 b(listed)f(in)27121 24559
+y(these)260 b(arra)-31 b(ys.)456 b(It)260 b(c)-31 b(hec)g(ks)261
+b(that)g(there)g(is)f(a)g(b)31 b(o)g(olean)262 b(called)27121
+25887 y Fj(inbound)587 b Fo(in)g(eac)-31 b(h)587 b(ev)-31
+b(en)g(t)588 b(and)f(it)h(tells)f(the)g(classi\014er)27121
+27216 y(that)334 b(this)g(stage)g(only)g(w)-31 b(an)g(ts)335
+b(to)f(receiv)-31 b(e)334 b(these)f(ev)-31 b(en)g(ts)334
+b(if)27121 28544 y Fj(inbound)459 b Fo(is)g Fl(true)542
+b Fo(\(for)460 b Fj(inb)p 39358 28544 V 419 w(event)p
+42682 28544 V 419 w(types[])p Fo(\))g(or)f Fl(false)27121
+29873 y Fo(in)369 b(the)g(other)h(case)f(\(for)h Fj(outb)p
+40074 29873 V 419 w(event)p 43398 29873 V 419 w(types[])p
+Fo(\).)27121 31201 y(This)852 b(is)g(one)h(p)31 b(ossible)853
+b(\014lter)f(\(lik)-31 b(e)854 b(the)f(one)f(y)-31 b(ou)27121
+32529 y(ha)g(v)g(e)751 b(with)h Fn(Bamboo)e Fo(messages)g(that)i(are)f
+(\014ltered)27121 33858 y(b)-31 b(y)1045 b(y)-31 b(our)1046
+b(application)j(ID\),)d(tak)-31 b(e)1047 b(a)f(lo)31
+b(ok)1047 b(in)-31 b(to)27121 35186 y Fj(bamboo.util.StandardStage)388
+b Fo(for)c(an)h(example)h(ho)-31 b(w)27121 36514 y(to)369
+b(use)g(\014lters.)28227 37889 y(The)421 b(thing)g(with)g(the)g(Net)-31
+b(w)g(ork)422 b(stage)f(is)f(that)h(it)g(lis-)27121 39217
+y(tens)325 b(to)i Fl(NetworkMessages)415 b Fo(with)327
+b Fj(inbound)g Fo(set)f(to)g Fl(false)27121 40546 y Fo(and)437
+b(sends)g(them)i(to)f(the)g(destination)i(represen)-31
+b(ted)437 b(b)-31 b(y)27121 41874 y(the)369 b(No)31 b(deId)369
+b(ob)61 b(ject.)27121 45218 y Fk(A.3)1495 b(Receiving)498
+b(a)g(Net)-42 b(w)g(orkMessage)27121 47347 y Fo(So)279
+b(w)-31 b(e)279 b(sen)-31 b(t)279 b(a)g Fl(NetworkMessage)360
+b Fo(but)279 b(w)-31 b(e)280 b(ha)-31 b(v)g(e)279 b(not)h(done)27121
+48675 y(an)-31 b(ything)552 b(to)g(receiv)-31 b(e)551
+b(them)g(\(remem)-31 b(b)31 b(er)551 b(w)-31 b(e)551
+b(ha)-31 b(v)g(e)551 b(to)27121 50004 y(subscrib)31 b(e)367
+b(to)j(eac)-31 b(h)370 b(message)g(w)-31 b(e)369 b(w)-31
+b(an)g(t)371 b(to)f(listen)g(to\).)28227 51378 y(The)283
+b(Net)-31 b(w)g(ork)285 b(stage)e(sends)f(the)h(message)g(to)h(the)f
+(Net-)27121 52707 y(w)-31 b(ork)289 b(stage)g(of)f(the)h(destination)h
+(no)31 b(de.)466 b(This)289 b(stage)g(then)27121 54035
+y(sets)401 b Fj(inbound)i Fo(to)g Fl(true)485 b Fo(and)402
+b(sets)g(the)g(new)h(destination)27121 55363 y(to)374
+b(its)g(o)-31 b(wn)375 b(no)31 b(de)373 b(ID)g(and)h(dispatc)-31
+b(hes)374 b(it.)507 b(Lo)31 b(cal)375 b(stages)27121
+56692 y(that)c(subscrib)31 b(e)370 b(to)h(this)g(t)-31
+b(yp)31 b(e)371 b(of)g(message)g(will)h(no)-31 b(w)372
+b(re-)27121 58020 y(ceiv)-31 b(e)369 b(it:)28369 60345
+y Ff(i)142 b(n)g(b)p 30279 60345 308 45 v 653 w(e)g(v)g(e)g(n)g(t)p
+33917 60345 V 653 w(t)g(y)g(p)g(e)g(s)363 b([)220 b(])744
+b(=)30634 61562 y Fb(n)-51 b(e)g(w)685 b Ff(C)121 b(l)g(a)g(s)g(s)313
+b([)191 b(])g Fe(f)273 b Fc(N)83 b(e)g(t)g(w)g(o)g(r)g(k)g(M)g(e)g(s)g
+(s)g(a)g(g)g(e)244 b Ff(.)285 b Fb(c)120 b(l)g(a)g(s)g(s)170
+b Fe(g)28227 64044 y Fo(The)370 b(original)i(sender)d(can)g(b)31
+b(e)369 b(found)h(in)g(the)g(v)-61 b(ariable)27121 65372
+y(named)369 b Fj(sender)h Fo(\(not)h(in)e Fj(source)p
+Fo(!\).)27121 68716 y Fk(A.4)1495 b(Net)-42 b(w)g(orkMessageResult)
+27121 70845 y Fo(I)756 b(men)-31 b(tioned)760 b(this)e(b)31
+b(efore:)1270 b(If)758 b(y)-31 b(ou)758 b(pro)-31 b(vide)759
+b(y)-31 b(our)27121 72174 y(sink)801 b(to)h(the)f Fl(NetworkMessage)883
+b Fo(it)802 b(will)h(send)d(y)-31 b(ou)26290 75495 y(6)p
+eop end
+%%Page: 7 7
+TeXDict begin 7 6 bop -1550 7085 a Fo(bac)-31 b(k)372
+b(an)f Fj(ostore.network.NetworkMessageResult)-1550 8413
+y Fo(ev)-31 b(en)g(t)308 b(whic)-31 b(h)308 b(will)h(inform)f(y)-31
+b(ou)307 b(ab)31 b(out)308 b(successful)e(or)h(un-)-1550
+9741 y(sucessful)509 b(transmission.)916 b(Therefore)510
+b(c)-31 b(hec)g(k)510 b(the)g(v)-61 b(ari-)-1550 11070
+y(able)505 b Fj(success)p Fo(,)538 b(the)504 b Fj(user)p
+10269 11070 349 45 v 419 w(data)g Fo(is)g(also)g(passed)f(bac)-31
+b(k)-1550 12398 y(to)708 b(y)-31 b(ou)707 b(in)g(this)g(message)h(so)e
+(that)i(y)-31 b(ou)708 b(can)f(iden-)-1550 13726 y(tify)490
+b(the)f(message)h(that)g(failed.)853 b(Of)488 b(course)h(y)-31
+b(ou)489 b(need)-1550 15055 y(to)742 b(subscrib)31 b(e)739
+b(to)i(this)g(ev)-31 b(en)g(t)741 b(t)-31 b(yp)31 b(e,)835
+b(so)740 b(add)h(it)g(to)-1550 16383 y Fj(event)p 1425
+16383 V 419 w(types[])p Fo(.)23191 75495 y(7)p eop end
+%%Page: 8 8
+TeXDict begin 8 7 bop 1550 7085 a Fp(B)1793 b(The)598
+b(sourceco)50 b(de)599 b(of)e(SimpleStage)1727 11291
+y Fh(1)581 b Fb(p)28 b(a)g(c)g(k)g(a)g(g)g(e)664 b Ff(b)23
+b(a)g(m)g(b)g(o)g(o)187 b(;)1727 13726 y Fh(3)579 b Fb(i)27
+b(m)g(p)g(o)g(r)g(t)758 b Ff(j)116 b(a)g(v)g(a)282 b(.)190
+b(m)25 b(a)g(t)g(h)191 b(.)298 b(B)133 b(i)g(g)g(I)g(n)g(t)g(e)g(g)g(e)
+g(r)298 b(;)2683 14944 y Fb(i)27 b(m)g(p)g(o)g(r)g(t)758
+b Ff(j)116 b(a)g(v)g(a)282 b(.)349 b(u)185 b(t)f(i)h(l)350
+b(.)288 b(L)124 b(i)g(n)g(k)g(e)g(d)g(L)g(i)g(s)g(t)287
+b(;)2683 17379 y Fb(i)27 b(m)g(p)g(o)g(r)g(t)786 b Ff(o)143
+b(s)g(t)g(o)g(r)g(e)310 b(.)350 b(u)184 b(t)h(i)g(l)349
+b(.)291 b(I)126 b(n)g(p)g(u)g(t)g(B)g(u)g(f)g(f)g(e)g(r)287
+b(;)2683 18597 y Fb(i)27 b(m)g(p)g(o)g(r)g(t)786 b Ff(o)143
+b(s)g(t)g(o)g(r)g(e)310 b(.)350 b(u)184 b(t)h(i)g(l)349
+b(.)265 b(O)100 b(u)g(t)g(p)g(u)g(t)g(B)g(u)g(f)g(f)g(e)g(r)263
+b(;)1727 19815 y Fh(8)579 b Fb(i)27 b(m)g(p)g(o)g(r)g(t)786
+b Ff(o)143 b(s)g(t)g(o)g(r)g(e)310 b(.)350 b(u)184 b(t)h(i)g(l)349
+b(.)317 b(Q)152 b(u)g(i)g(c)g(k)g(S)g(e)g(r)g(i)g(a)g(l)g(i)g(z)g(a)g
+(b)g(l)g(e)318 b(;)2683 22250 y Fb(i)27 b(m)g(p)g(o)g(r)g(t)665
+b Ff(b)23 b(a)g(m)g(b)g(o)g(o)186 b(.)285 b(a)119 b(p)g(i)311
+b(.)191 b Fe(\003)g Ff(;)2683 23468 y Fb(i)27 b(m)g(p)g(o)g(r)g(t)665
+b Ff(b)23 b(a)g(m)g(b)g(o)g(o)186 b(.)350 b(u)184 b(t)h(i)g(l)349
+b(.)269 b(S)103 b(t)g(a)g(n)g(d)g(a)g(r)g(d)g(S)g(t)g(a)g(g)g(e)267
+b(;)1350 25903 y Fh(13)579 b Fb(i)27 b(m)g(p)g(o)g(r)g(t)746
+b Ff(s)103 b(e)g(d)g(a)270 b(.)239 b(s)74 b(a)g(n)g(d)g(S)g(t)g(o)g(r)g
+(m)241 b(.)285 b(a)119 b(p)g(i)286 b(.)258 b(C)92 b(o)g(n)g(f)g(i)g(g)g
+(D)g(a)g(t)g(a)g(I)g(F)261 b(;)2683 27121 y Fb(i)27 b(m)g(p)g(o)g(r)g
+(t)746 b Ff(s)103 b(e)g(d)g(a)270 b(.)239 b(s)74 b(a)g(n)g(d)g(S)g(t)g
+(o)g(r)g(m)241 b(.)285 b(a)119 b(p)g(i)286 b(.)265 b(E)100
+b(v)g(e)g(n)g(t)g(H)g(a)g(n)g(d)g(l)g(e)g(r)g(E)g(x)g(c)g(e)g(p)g(t)g
+(i)g(o)g(n)271 b(;)2683 28338 y Fb(i)27 b(m)g(p)g(o)g(r)g(t)746
+b Ff(s)103 b(e)g(d)g(a)270 b(.)239 b(s)74 b(a)g(n)g(d)g(S)g(t)g(o)g(r)g
+(m)241 b(.)285 b(a)119 b(p)g(i)286 b(.)232 b(Q)67 b(u)g(e)g(u)g(e)g(E)g
+(l)g(e)g(m)g(e)g(n)g(t)g(I)g(F)235 b(;)2683 29556 y Fb(i)27
+b(m)g(p)g(o)g(r)g(t)746 b Ff(s)103 b(e)g(d)g(a)270 b(.)239
+b(s)74 b(a)g(n)g(d)g(S)g(t)g(o)g(r)g(m)241 b(.)285 b(a)119
+b(p)g(i)286 b(.)335 b(S)170 b(t)h(a)f(g)g(e)h(s)f(I)f(n)h(i)h(t)f(i)h
+(a)f(l)h(i)f(z)g(e)h(d)f(S)g(i)h(g)f(n)g(a)g(l)336 b(;)1350
+31991 y Fh(18)630 b Fb(p)77 b(u)g(b)g(l)g(i)g(c)815 b(c)120
+b(l)g(a)g(s)g(s)840 b Ff(S)108 b(i)g(m)g(p)g(l)g(e)g(S)g(t)g(a)g(g)g(e)
+770 b Fb(e)45 b(x)g(t)g(e)g(n)g(d)g(s)766 b Ff(S)103
+b(t)g(a)g(n)g(d)g(a)g(r)g(d)g(S)g(t)g(a)g(g)g(e)154 b
+Fe(f)5176 34426 y Fb(p)62 b(r)g(o)g(t)g(e)g(c)g(t)g(e)g(d)804
+b(s)126 b(t)g(a)g(t)g(i)g(c)878 b(f)138 b(i)g(n)g(a)g(l)814
+b(l)59 b(o)g(n)g(g)792 b Ff(a)116 b(p)g(p)p 24493 34426
+308 45 v 602 w(i)g(d)640 b(=)7594 35644 y(b)23 b(a)g(m)g(b)g(o)g(o)187
+b(.)301 b(r)136 b(o)g(u)g(t)g(e)g(r)299 b(.)251 b(R)85
+b(o)g(u)g(t)g(e)g(r)252 b(.)282 b(a)116 b(p)g(p)p 22650
+35644 V 601 w(i)g(d)226 b(\()216 b(S)108 b(i)g(m)g(p)g(l)g(e)g(S)g(t)g
+(a)g(g)g(e)275 b(.)285 b Fb(c)120 b(l)g(a)g(s)g(s)300
+b Ff(\))182 b(;)1350 38079 y Fh(23)3090 b Fb(p)80 b(r)g(i)g(v)g(a)g(t)g
+(e)739 b(b)46 b(o)g(o)g(l)g(e)g(a)g(n)783 b Ff(s)119
+b(e)g(n)g(d)g(e)g(r)643 b(=)657 b Fb(f)134 b(a)g(l)g(s)g(e)301
+b Ff(;)5176 40515 y Fb(p)62 b(r)g(o)g(t)g(e)g(c)g(t)g(e)g(d)725
+b(b)46 b(o)g(o)g(l)g(e)g(a)g(n)862 b Ff(i)198 b(n)g(i)h(t)f(i)h(a)f(l)g
+(i)h(z)f(e)h(d)721 b(=)658 b Fb(f)134 b(a)g(l)g(s)g(e)301
+b Ff(;)5176 41732 y Fb(p)62 b(r)g(o)g(t)g(e)g(c)g(t)g(e)g(d)802
+b Ff(L)124 b(i)g(n)g(k)g(e)g(d)g(L)g(i)g(s)g(t)856 b(w)120
+b(a)g(i)g(t)p 20614 41732 V 611 w(q)644 b(=)473 b Fb(n)-51
+b(e)g(w)687 b Ff(L)124 b(i)g(n)g(k)g(e)g(d)g(L)g(i)g(s)g(t)312
+b(\()191 b(\))f(;)1350 44168 y Fh(28)3072 b Fb(p)62 b(r)g(o)g(t)g(e)g
+(c)g(t)g(e)g(d)804 b(s)126 b(t)g(a)g(t)g(i)g(c)860 b(c)120
+b(l)g(a)g(s)g(s)827 b Fc(P)95 b(a)g(y)g(l)g(o)g(a)g(d)725
+b Fb(i)19 b(m)g(p)g(l)g(e)g(m)g(e)g(n)g(t)g(s)787 b Ff(Q)152
+b(u)g(i)g(c)g(k)g(S)g(e)g(r)g(i)g(a)g(l)g(i)g(z)g(a)g(b)g(l)g(e)204
+b Fe(f)7649 45385 y Fb(p)77 b(u)g(b)g(l)g(i)g(c)831 b
+Ff(S)136 b(t)g(r)g(i)g(n)g(g)840 b(m)88 b(e)g(s)g(s)g(a)g(g)g(e)254
+b(;)7649 47821 y Fb(p)77 b(u)g(b)g(l)g(i)g(c)790 b Fc(P)95
+b(a)g(y)g(l)g(o)g(a)g(d)200 b Ff(\()244 b(S)136 b(t)g(r)g(i)g(n)g(g)632
+b(m)-13 b(\))106 b Fe(f)10117 49038 y Ff(m)88 b(e)g(s)g(s)g(a)g(g)g(e)
+613 b(=)404 b(m)46 b(;)1350 50256 y Fh(33)5519 b Fe(g)7649
+52691 y Fb(p)77 b(u)g(b)g(l)g(i)g(c)790 b Fc(P)95 b(a)g(y)g(l)g(o)g(a)g
+(d)200 b Ff(\()234 b(I)126 b(n)g(p)g(u)g(t)g(B)g(u)g(f)g(f)g(e)g(r)758
+b(b)129 b(\))106 b Fe(f)10117 53909 y Ff(m)88 b(e)g(s)g(s)g(a)g(g)g(e)
+613 b(=)546 b(b)188 b(.)297 b(n)132 b(e)g(x)g(t)g(S)g(t)g(r)g(i)g(n)g
+(g)320 b(\()190 b(\))h(;)7623 55127 y Fe(g)1350 56344
+y Fh(38)7649 57562 y Fb(p)77 b(u)g(b)g(l)g(i)g(c)748
+b(v)53 b(o)g(i)g(d)866 b Ff(s)200 b(e)f(r)g(i)h(a)f(l)h(i)g(z)f(e)308
+b(\()208 b(O)100 b(u)g(t)g(p)g(u)g(t)g(B)g(u)g(f)g(f)g(e)g(r)735
+b(b)129 b(\))106 b Fe(f)10052 58780 y Ff(b)187 b(.)214
+b(a)48 b(d)g(d)157 b(\()196 b(m)88 b(e)g(s)g(s)g(a)g(g)g(e)272
+b(\))182 b(;)7623 59997 y Fe(g)1350 62433 y Fh(43)5545
+b Fb(p)77 b(u)g(b)g(l)g(i)g(c)831 b Ff(S)136 b(t)g(r)g(i)g(n)g(g)893
+b(t)141 b(o)g(S)g(t)g(r)g(i)g(n)g(g)277 b(\()134 b(\))g
+Fe(f)10087 63650 y Fb(r)58 b(e)g(t)g(u)g(r)g(n)723 b
+Ff(")135 b(P)84 b(a)g(y)g(l)g(o)g(a)g(d)794 b(w)93 b(i)g(t)g(h)797
+b(m)88 b(e)g(s)g(s)g(a)g(g)g(e)254 b(:)831 b(")575 b(+)612
+b(m)88 b(e)g(s)g(s)g(a)g(g)g(e)254 b(;)7623 64868 y Fe(g)5165
+66086 y(g)1350 68521 y Fh(48)3075 b Fc(/)65 b Fe(\003)115
+b(\003)788 b Fc(J)123 b(u)g(s)g(t)880 b(f)144 b(o)g(r)867
+b(a)109 b(l)g(a)g(r)g(m)g(i)g(n)g(g)845 b(w)120 b(i)g(t)g(h)778
+b(n)44 b(o)812 b(f)155 b(u)g(r)g(t)g(h)g(e)g(r)943 b(f)171
+b(u)f(n)h(c)h(t)f(i)f(o)h(n)g(a)g(l)g(i)f(t)h(y)850 b
+Fe(\003)65 b Fc(/)5176 69738 y Fb(p)d(r)g(o)g(t)g(e)g(c)g(t)g(e)g(d)804
+b(s)126 b(t)g(a)g(t)g(i)g(c)860 b(c)120 b(l)g(a)g(s)g(s)775
+b Ff(A)42 b(l)g(a)g(r)g(m)677 b Fb(i)19 b(m)g(p)g(l)g(e)g(m)g(e)g(n)g
+(t)g(s)702 b Ff(Q)67 b(u)g(e)g(u)g(e)g(E)g(l)g(e)g(m)g(e)g(n)g(t)g(I)g
+(F)138 b Fe(f)68 b(g)5179 72174 y Fc(/)d Fe(\003)115
+b(\003)26290 75495 y Fo(8)p eop end
+%%Page: 9 9
+TeXDict begin 9 8 bop 2680 7085 a Fe(\003)785 b Fc(C)119
+b(o)g(n)g(s)g(t)g(r)g(u)g(c)g(t)g(o)g(r)610 b Fa(<)21
+b Fc(b)82 b(r)73 b Fa(>)-1750 8302 y Fh(53)3676 b Fe(\003)811
+b Fc(C)146 b(a)g(l)g(l)g(i)g(n)g(g)885 b(t)128 b(h)g(e)882
+b(c)141 b(o)g(n)g(s)g(t)g(r)g(u)g(c)g(t)g(o)g(r)882 b(o)131
+b(f)830 b(o)85 b(u)g(r)812 b(s)113 b(u)g(p)g(e)g(r)870
+b(c)140 b(l)g(a)g(s)g(s)432 b(,)939 b(r)175 b(e)g(g)g(i)f(s)g(t)g(e)h
+(r)2680 9520 y Fe(\003)865 b Fc(a)199 b(l)h(l)949 b(e)135
+b(v)g(e)g(n)g(t)g(s)774 b(w)26 b(e)709 b(w)68 b(a)g(n)g(t)804
+b(t)122 b(o)923 b(l)187 b(i)f(s)h(t)g(e)g(n)923 b(t)122
+b(o)152 b(.)59 b Fa(<)112 b Fc(b)82 b(r)73 b Fa(>)2680
+10738 y Fe(\003)669 b Fc(Y)s(o)s(u)743 b(s)127 b(h)g(o)g(u)g(l)g(d)888
+b(a)146 b(l)g(s)g(o)937 b(r)175 b(e)f(g)h(i)f(s)h(t)f(e)h(r)880
+b(y)92 b(o)g(u)g(r)721 b(o)16 b(w)g(n)756 b(p)125 b(a)g(y)g(l)g(o)g(a)g
+(d)g(s)851 b(h)113 b(e)g(r)g(e)262 b(.)2694 11955 y Fe(\003)65
+b Fc(/)2092 13173 y Fb(p)77 b(u)g(b)g(l)g(i)g(c)803 b
+Ff(S)108 b(i)g(m)g(p)g(l)g(e)g(S)g(t)g(a)g(g)g(e)254
+b(\()144 b(\))785 b Fb(t)26 b(h)g(r)g(o)g(w)g(s)746 b
+Ff(E)105 b(x)g(c)g(e)g(p)g(t)g(i)g(o)g(n)771 b Fe(f)-1750
+14390 y Fh(58)5513 b Fb(s)45 b(u)g(p)g(e)g(r)236 b Ff(\()190
+b(\))h(;)867 b Fc(/)61 b(/)805 b(S)131 b(e)g(t)g(s)798
+b(u)52 b(p)794 b(t)128 b(h)g(e)892 b(l)151 b(o)g(g)g(g)g(e)g(r)4533
+16826 y(/)61 b(/)815 b(R)139 b(e)g(g)g(i)g(s)g(t)g(e)g(r)883
+b(p)125 b(a)g(y)g(l)g(o)g(a)g(d)g(s)4616 18043 y Ff(o)143
+b(s)g(t)g(o)g(r)g(e)310 b(.)350 b(u)184 b(t)h(i)f(l)350
+b(.)232 b(T)66 b(y)g(p)g(e)g(T)g(a)g(b)g(l)g(e)236 b(.)333
+b(r)167 b(e)h(g)f(i)h(s)f(t)h(e)g(r)p 22867 18043 308
+45 v 703 w(t)g(y)g(p)f(e)276 b(\()203 b Fc(P)95 b(a)g(y)g(l)g(o)g(a)g
+(d)257 b Ff(.)285 b Fb(c)120 b(l)g(a)g(s)g(s)300 b Ff(\))182
+b(;)-1750 20479 y Fh(63)5529 b Fc(/)61 b(/)688 b(B)13
+b(a)g(m)g(b)g(o)g(o)762 b(e)135 b(v)g(e)g(n)g(t)g(s)775
+b(w)26 b(e)673 b(w)33 b(a)g(n)g(n)g(a)832 b(l)188 b(i)e(s)h(t)g(e)g(n)
+923 b(t)122 b(o)4606 21696 y Ff(e)134 b(v)g(e)g(n)g(t)p
+7754 21696 V 636 w(t)g(y)g(p)g(e)g(s)656 b(=)473 b Fb(n)-51
+b(e)g(w)685 b Ff(C)121 b(l)g(a)g(s)g(s)342 b([)221 b(])886
+b Fe(f)9557 22914 y Ff(S)170 b(t)h(a)f(g)g(e)g(s)h(I)e(n)h(i)h(t)f(i)h
+(a)f(l)h(i)f(z)g(e)h(d)f(S)g(i)h(g)f(n)g(a)g(l)335 b(.)268
+b Fb(c)102 b(l)g(a)g(s)g(s)373 b Ff(,)9465 24132 y(B)78
+b(a)g(m)g(b)g(o)g(o)g(R)g(o)g(u)g(t)g(e)g(D)g(e)g(l)g(i)g(v)g(e)g(r)248
+b(.)267 b Fb(c)102 b(l)g(a)g(s)g(s)373 b Ff(,)9429 25349
+y(A)42 b(l)g(a)g(r)g(m)209 b(.)285 b Fb(c)120 b(l)g(a)g(s)g(s)-1750
+26567 y Fh(68)10527 b Fe(g)144 b Ff(;)2066 27785 y Fe(g)2079
+30220 y Fc(/)65 b Fe(\003)116 b(\003)2680 31438 y(\003)868
+b Fc(I)202 b(n)g(i)f(t)h(i)f(a)h(l)g(i)g(z)g(e)902 b(o)85
+b(u)g(r)841 b(s)142 b(t)g(a)g(g)g(e)291 b(.)677 b(W)-88
+b(e)668 b(g)141 b(e)g(t)883 b(t)128 b(h)g(e)855 b(p)114
+b(a)g(r)g(s)g(e)g(d)837 b(C)108 b(o)g(n)g(f)g(i)g(g)834
+b(d)110 b(a)g(t)g(a)-1750 32655 y Fh(73)3676 b Fe(\003)736
+b Fc(f)71 b(r)g(o)g(m)779 b(s)94 b(a)g(n)g(d)g(s)g(t)g(o)g(r)g(m)766
+b(a)56 b(n)g(d)666 b(m)m(a)m(y)767 b(e)157 b(x)g(t)g(r)g(a)g(c)g(t)855
+b(o)85 b(u)g(r)716 b(o)16 b(w)g(n)777 b(c)146 b(o)g(n)g(f)g(i)g(g)894
+b(o)136 b(p)g(t)g(i)g(o)g(n)g(s)2680 33873 y Fe(\003)812
+b Fc(b)146 b(e)g(s)g(i)g(d)g(e)887 b(t)128 b(h)g(e)909
+b(g)169 b(l)f(o)g(b)h(a)e(l)878 b(o)94 b(n)g(e)g(s)245
+b(.)643 b Fa(<)22 b Fc(b)82 b(r)73 b Fa(>)2694 35091
+y Fe(\003)65 b Fc(/)2092 36308 y Fb(p)77 b(u)g(b)g(l)g(i)g(c)748
+b(v)53 b(o)g(i)g(d)851 b Ff(i)185 b(n)f(i)h(t)293 b(\()200
+b(C)92 b(o)g(n)g(f)g(i)g(g)g(D)g(a)g(t)g(a)g(I)g(F)859
+b(c)149 b(o)g(n)g(f)g(i)g(g)256 b(\))748 b Fb(t)26 b(h)g(r)g(o)g(w)g(s)
+746 b Ff(E)105 b(x)g(c)g(e)g(p)g(t)g(i)g(o)g(n)157 b
+Fe(f)4517 37526 y Fb(s)45 b(u)g(p)g(e)g(r)210 b Ff(.)350
+b(i)184 b(n)h(i)f(t)293 b(\()257 b(c)149 b(o)g(n)g(f)g(i)g(g)329
+b(\))183 b(;)-1750 38744 y Fh(78)4608 39961 y Ff(S)136
+b(t)g(r)g(i)g(n)g(g)765 b(m)14 b(o)g(d)g(e)536 b(=)698
+b(c)174 b(o)g(n)f(f)h(i)g(g)p 16996 39961 V 716 w(g)g(e)g(t)p
+19426 39961 V 717 w(s)g(t)g(r)f(i)h(n)g(g)282 b(\()238
+b(c)130 b(o)g(n)g(f)g(i)g(g)426 b(,)831 b(")65 b(m)14
+b(o)g(d)g(e)64 b(")233 b(\))182 b(;)4652 41179 y Fb(i)f(f)289
+b Ff(\()122 b(m)14 b(o)g(d)g(e)676 b(!)49 b(=)764 b Fb(n)99
+b(u)g(l)g(l)591 b Ff(&)-121 b(&)507 b(m)14 b(o)g(d)g(e)177
+b(.)297 b(e)132 b(q)g(u)g(a)g(l)g(s)239 b(\()160 b(")170
+b(s)119 b(e)g(n)g(d)g(e)g(r)170 b(")195 b(\))144 b(\))7049
+42397 y(s)119 b(e)g(n)g(d)g(e)g(r)642 b(=)587 b Fb(t)63
+b(r)g(u)g(e)230 b Ff(;)841 b Fc(/)61 b(/)789 b(s)114
+b(e)g(n)g(d)g(e)g(r)751 b(m)21 b(o)g(d)g(e)4589 43614
+y Fb(e)117 b(l)g(s)g(e)-1750 44832 y Fh(83)8045 b Ff(s)119
+b(e)g(n)g(d)g(e)g(r)642 b(=)658 b Fb(f)134 b(a)g(l)g(s)g(e)301
+b Ff(;)841 b Fc(/)61 b(/)840 b(d)165 b(e)g(f)g(a)g(u)g(l)g(t)2066
+46050 y Fe(g)2092 48485 y Fb(p)77 b(u)g(b)g(l)g(i)g(c)748
+b(v)53 b(o)g(i)g(d)762 b Ff(h)95 b(a)g(n)g(d)g(l)g(e)g(E)g(v)g(e)g(n)g
+(t)204 b(\()175 b(Q)67 b(u)g(e)g(u)g(e)g(E)g(l)g(e)g(m)g(e)g(n)g(t)g(I)
+g(F)767 b(e)82 b(l)g(e)g(m)190 b(\))774 b Fe(f)4616 49703
+y Ff(l)144 b(o)g(g)g(g)g(e)g(r)311 b(.)232 b(d)66 b(e)g(b)g(u)g(g)176
+b(\()159 b(")84 b(G)32 b(o)g(t)757 b(e)109 b(v)g(e)g(n)g(t)775
+b(")575 b(+)605 b(e)82 b(l)g(e)g(m)265 b(\))182 b(;)-1750
+50920 y Fh(88)4533 52138 y Fc(/)61 b(/)849 b(I)174 b(f)934
+b(s)147 b(t)g(a)g(r)g(t)g(u)g(p)4652 53355 y Fb(i)181
+b(f)363 b Ff(\()182 b(!)381 b(i)198 b(n)g(i)h(t)f(i)h(a)f(l)g(i)h(z)f
+(e)h(d)304 b(\))106 b Fe(f)6991 54573 y Fc(/)61 b(/)769
+b(T)94 b(h)g(i)g(s)777 b(o)69 b(n)g(e)849 b(i)166 b(s)910
+b(s)131 b(e)g(n)g(t)787 b(w)42 b(h)g(e)g(n)827 b(s)172
+b(e)g(t)g(t)f(i)g(n)h(g)839 b(u)52 b(p)7110 55791 y Fb(i)181
+b(f)288 b Ff(\()190 b(e)82 b(l)g(e)g(m)788 b Fb(i)90
+b(n)g(s)g(t)g(a)g(n)g(c)g(e)g(o)g(f)881 b Ff(S)170 b(t)g(a)g(g)g(e)h(s)
+f(I)g(n)g(i)g(t)h(i)f(a)g(l)h(i)g(z)f(e)g(d)g(S)g(i)h(g)f(n)g(a)g(l)277
+b(\))106 b Fe(f)-1750 57008 y Fh(93)10444 b Fc(/)61 b(/)780
+b(R)105 b(e)g(q)g(u)g(e)g(s)g(t)888 b(r)171 b(e)h(g)f(i)g(s)g(t)g(r)g
+(a)g(t)g(i)g(o)f(n)930 b(f)144 b(o)g(r)930 b(t)172 b(h)h(i)f(s)856
+b(a)69 b(p)g(p)9515 58226 y Ff(d)128 b(i)g(s)g(p)g(a)g(t)g(c)g(h)239
+b(\()57 b Fb(n)-51 b(e)g(w)598 b Ff(B)34 b(a)g(m)g(b)g(o)g(o)g(R)g(o)g
+(u)g(t)g(e)g(r)g(A)g(p)g(p)g(R)g(e)g(g)g(R)g(e)g(q)148
+b(\()14404 59444 y(a)102 b(p)g(p)p 16421 59444 V 571
+w(i)g(d)369 b(,)895 b Fb(f)115 b(a)g(l)g(s)g(e)396 b
+Ff(,)894 b Fb(f)115 b(a)g(l)g(s)g(e)396 b Ff(,)895 b
+Fb(f)115 b(a)g(l)g(s)g(e)396 b Ff(,)872 b(m)93 b(y)p
+33851 59444 V 554 w(s)g(i)g(n)g(k)283 b(\))190 b(\))h(;)6981
+60661 y Fe(g)6991 61879 y Fc(/)61 b(/)589 b(O)-85 b(K)-20
+b(,)790 b(w)26 b(e)746 b(a)105 b(r)g(e)735 b(n)16 b(o)g(w)795
+b(r)164 b(e)g(g)g(i)g(s)g(t)g(e)g(r)g(e)g(d)903 b(t)122
+b(o)749 b(B)13 b(a)g(m)g(b)g(o)g(o)-1750 63097 y Fh(98)8042
+b Fb(e)117 b(l)g(s)g(e)911 b(i)181 b(f)288 b Ff(\()190
+b(e)82 b(l)g(e)g(m)788 b Fb(i)90 b(n)g(s)g(t)g(a)g(n)g(c)g(e)g(o)g(f)
+751 b Ff(B)41 b(a)g(m)g(b)g(o)g(o)g(R)g(o)g(u)g(t)g(e)g(r)g(A)g(p)g(p)g
+(R)g(e)g(g)g(R)g(e)g(s)g(p)140 b(\))106 b Fe(f)9448 64314
+y Fc(/)61 b(/)791 b(h)116 b(a)g(n)g(d)g(l)g(e)836 b(p)106
+b(e)g(n)g(d)g(i)g(n)g(g)857 b(e)135 b(v)g(e)g(n)g(t)g(s)9585
+65532 y Ff(i)199 b(n)f(i)g(t)h(i)f(a)g(l)h(i)f(z)h(e)f(d)721
+b(=)588 b Fb(t)63 b(r)g(u)g(e)230 b Ff(;)9449 66750 y
+Fb(w)62 b(h)g(i)g(l)g(e)243 b Ff(\()182 b(!)303 b(w)120
+b(a)g(i)g(t)p 16285 66750 V 611 w(q)286 b(.)235 b(i)69
+b(s)g(E)g(m)g(p)g(t)g(y)234 b(\()162 b(\))g(\))11940
+67967 y(h)95 b(a)g(n)g(d)g(l)g(e)g(E)g(v)g(e)g(n)g(t)240
+b(\()144 b(\()211 b(Q)67 b(u)g(e)g(u)g(e)g(E)g(l)g(e)g(m)g(e)g(n)g(t)g
+(I)g(F)178 b(\))844 b(w)120 b(a)g(i)g(t)p 32259 67967
+V 610 w(q)286 b(.)281 b(r)115 b(e)g(m)g(o)g(v)g(e)g(F)g(i)g(r)g(s)g(t)
+317 b(\()196 b(\))g(\))g(;)-2126 69185 y Fh(103)9448
+70403 y Fc(/)61 b(/)790 b(D)115 b(i)g(s)g(p)g(a)g(t)g(c)g(h)840
+b(i)113 b(n)789 b(1)61 b(0)158 b(s)759 b(a)703 b(A)43
+b(l)g(a)g(r)g(m)689 b(m)30 b(s)g(g)766 b(t)122 b(o)886
+b(s)149 b(t)g(a)g(g)g(e)g(s)811 b(o)44 b(n)830 b(t)172
+b(h)g(i)h(s)860 b(n)73 b(o)g(d)g(e)2195 71620 y Fb(i)181
+b(f)288 b Ff(\()228 b(s)119 b(e)g(n)g(d)g(e)g(r)227 b(\))23191
+75495 y Fo(9)p eop end
+%%Page: 10 10
+TeXDict begin 10 9 bop 7785 7085 a Ff(c)213 b(l)h(a)f(s)h(s)f(i)h(f)f
+(i)h(e)f(r)378 b(.)327 b(d)161 b(i)g(s)g(p)g(a)g(t)g(c)g(h)p
+19604 7085 308 45 v 695 w(l)g(a)g(t)g(e)g(r)272 b(\()57
+b Fb(n)-51 b(e)g(w)606 b Ff(A)42 b(l)g(a)g(r)g(m)196
+b(\()152 b(\))306 b(,)899 b(1)132 b(0)g(0)g(0)g(0)g(\))g(;)10080
+8302 y Fe(g)973 9520 y Fh(108)7986 b Fc(/)61 b(/)731
+b(F)55 b(o)g(r)776 b(p)106 b(e)g(n)g(d)g(i)g(n)g(g)857
+b(e)135 b(v)g(e)g(n)g(t)g(s)892 b(b)144 b(e)g(f)g(o)g(r)g(e)785
+b(w)26 b(e)745 b(a)105 b(r)g(e)883 b(r)164 b(e)g(g)g(i)g(s)g(t)g(e)g(r)
+g(e)g(d)10146 10738 y Fb(e)117 b(l)g(s)g(e)12607 11955
+y Ff(w)j(a)g(i)g(t)p 15084 11955 V 611 w(q)286 b(.)252
+b(a)87 b(d)g(d)g(L)g(a)g(s)g(t)196 b(\()190 b(e)82 b(l)g(e)g(m)265
+b(\))182 b(;)7623 13173 y Fe(g)7633 14390 y Fc(/)61 b(/)725
+b(N)50 b(o)g(r)g(m)g(a)g(l)817 b(o)151 b(p)g(e)g(r)g(t)g(i)g(o)g(n)g(a)
+g(l)786 b(m)21 b(o)g(d)g(e)973 15608 y Fh(113)5584 b
+Fb(e)117 b(l)g(s)g(e)167 b Fe(f)10090 16826 y Fc(/)61
+b(/)762 b(E)87 b(v)g(e)g(n)g(t)849 b(t)146 b(h)g(a)g(t)787
+b(w)26 b(e)769 b(g)128 b(o)g(t)787 b(a)746 b(m)87 b(e)g(s)g(s)g(a)g(g)g
+(e)861 b(d)160 b(e)g(l)g(i)g(v)g(e)g(r)g(e)g(d)10209
+18043 y Fb(i)181 b(f)289 b Ff(\()190 b(e)82 b(l)g(e)g(m)787
+b Fb(i)90 b(n)g(s)g(t)g(a)g(n)g(c)g(e)g(o)g(f)789 b Ff(B)78
+b(a)g(m)g(b)g(o)g(o)g(R)g(o)g(u)g(t)g(e)g(D)g(e)g(l)g(i)g(v)g(e)g(r)189
+b(\))106 b Fe(f)12565 19261 y Ff(B)78 b(a)g(m)g(b)g(o)g(o)g(R)g(o)g(u)g
+(t)g(e)g(D)g(e)g(l)g(i)g(v)g(e)g(r)860 b(d)164 b(e)g(l)g(i)g(v)g(e)g(r)
+688 b(=)632 b(\()187 b(B)78 b(a)g(m)g(b)g(o)g(o)g(R)g(o)g(u)g(t)g(e)g
+(D)g(e)g(l)g(i)g(v)g(e)g(r)190 b(\))805 b(e)82 b(l)g(e)g(m)247
+b(;)12581 20479 y Fc(P)95 b(a)g(y)g(l)g(o)g(a)g(d)762
+b Ff(p)55 b(a)g(y)580 b(=)632 b(\()203 b Fc(P)95 b(a)g(y)g(l)g(o)g(a)g
+(d)200 b Ff(\))886 b(d)164 b(e)g(l)g(i)g(v)g(e)g(r)330
+b(.)265 b(p)100 b(a)g(y)g(l)g(o)g(a)g(d)268 b(;)973 21696
+y Fh(118)10527 b Ff(l)144 b(o)g(g)g(g)g(e)g(r)311 b(.)321
+b(i)156 b(n)g(f)g(o)264 b(\()159 b(")129 b(M)77 b(e)g(s)g(s)g(a)g(g)g
+(e)875 b(i)181 b(s)345 b(:)831 b(")574 b(+)580 b(p)55
+b(a)g(y)221 b(.)307 b(t)141 b(o)g(S)g(t)g(r)g(i)g(n)g(g)339
+b(\()196 b(\))g(\))g(;)10080 22914 y Fe(g)10146 24132
+y Fb(e)117 b(l)g(s)g(e)910 b(i)181 b(f)289 b Ff(\()190
+b(e)82 b(l)g(e)g(m)787 b Fb(i)90 b(n)g(s)g(t)g(a)g(n)g(c)g(e)g(o)g(f)
+753 b Ff(A)42 b(l)g(a)g(r)g(m)150 b(\))106 b Fe(f)12548
+25349 y Fc(/)61 b(/)777 b(C)103 b(r)g(e)g(a)g(t)g(e)763
+b(a)689 b(n)30 b(e)g(w)730 b(m)87 b(e)g(s)g(s)g(a)g(g)g(e)823
+b(t)122 b(o)832 b(b)96 b(e)806 b(s)94 b(e)g(n)g(d)822
+b(o)113 b(v)g(e)g(r)769 b(b)43 b(a)g(m)g(b)g(o)g(o)234
+b(,)884 b(o)120 b(n)g(l)g(y)12548 26567 y(/)61 b(/)824
+b(s)149 b(t)g(a)g(g)g(e)g(s)888 b(w)120 b(i)g(t)g(h)862
+b(t)128 b(h)g(e)782 b(s)42 b(a)g(m)g(e)787 b(a)129 b(p)g(p)p
+29380 26567 314 45 v 634 w(i)g(d)932 b(w)188 b(i)g(l)h(l)943
+b(g)141 b(e)g(t)928 b(t)172 b(h)h(i)f(s)874 b(m)87 b(e)g(s)g(s)g(a)g(g)
+g(e)237 b(!)973 27785 y Fh(123)10519 b Ff(S)136 b(t)g(r)g(i)g(n)g(g)770
+b(m)18 b(s)g(g)543 b(=)14995 29002 y(")144 b(T)92 b(h)g(i)g(s)794
+b(m)88 b(e)g(s)g(s)g(a)g(g)g(e)815 b(s)111 b(h)g(o)g(u)g(l)g(d)796
+b(b)68 b(e)775 b(s)92 b(e)g(n)g(d)816 b(o)110 b(v)g(e)g(r)161
+b(")575 b(+)14995 30220 y(")52 b(Bamboo)723 b(t)106 b(o)826
+b(t)105 b(h)g(e)791 b(n)70 b(o)g(d)g(e)780 b(w)93 b(i)g(t)g(h)813
+b(t)105 b(h)g(e)867 b(s)147 b(m)g(a)g(l)g(l)g(e)g(s)g(t)830
+b(n)70 b(o)g(d)g(e)712 b(I)26 b(D)190 b(.)217 b(")f(;)12563
+31438 y(B)76 b(a)g(m)g(b)g(o)g(o)g(R)g(o)g(u)g(t)g(e)g(I)g(n)g(i)g(t)
+882 b(i)184 b(n)h(i)f(t)708 b(=)473 b Fb(n)-51 b(e)g(w)640
+b Ff(B)76 b(a)g(m)g(b)g(o)g(o)g(R)g(o)g(u)g(t)g(e)g(I)g(n)g(i)g(t)191
+b(\()17534 32655 y(B)133 b(i)g(g)g(I)g(n)g(t)g(e)g(g)g(e)g(r)298
+b(.)96 b(Z)-69 b(E)g(R)g(O)26 b(,)973 33873 y Fh(128)15399
+b Ff(a)102 b(p)g(p)p 19520 33873 308 45 v 572 w(i)g(d)369
+b(,)17516 35091 y Fb(f)115 b(a)g(l)g(s)g(e)396 b Ff(,)895
+b Fb(f)115 b(a)g(l)g(s)g(e)396 b Ff(,)17350 36308 y Fb(n)-51
+b(e)g(w)659 b Fc(P)95 b(a)g(y)g(l)g(o)g(a)g(d)200 b Ff(\()126
+b(m)18 b(s)g(g)211 b(\))190 b(\))h(;)12548 37526 y Fc(/)61
+b(/)737 b(S)63 b(e)g(n)g(d)805 b(t)128 b(h)g(e)828 b(m)87
+b(e)g(s)g(s)g(a)g(g)g(e)823 b(t)122 b(o)863 b(t)128 b(h)g(e)877
+b(s)136 b(i)g(n)g(k)287 b(.)12615 38744 y Ff(d)128 b(i)g(s)g(p)g(a)g(t)
+g(c)g(h)239 b(\()292 b(i)185 b(n)f(i)h(t)366 b(\))183
+b(;)973 39961 y Fh(133)12548 41179 y Fc(/)61 b(/)789
+b(D)115 b(i)g(s)g(p)g(a)g(t)g(c)g(h)840 b(i)113 b(n)789
+b(1)61 b(0)159 b(s)758 b(a)690 b(n)30 b(e)g(w)686 b(A)43
+b(l)g(a)g(r)g(m)689 b(m)30 b(s)g(g)766 b(t)122 b(o)864
+b(t)128 b(h)g(e)890 b(s)149 b(t)g(a)g(g)g(e)g(s)811 b(o)44
+b(n)830 b(t)173 b(h)f(i)g(s)861 b(n)73 b(o)g(d)g(e)12700
+42397 y Ff(c)213 b(l)h(a)f(s)h(s)f(i)h(f)f(i)h(e)f(r)378
+b(.)327 b(d)161 b(i)g(s)g(p)g(a)g(t)g(c)g(h)p 24519 42397
+V 695 w(l)g(a)g(t)g(e)g(r)272 b(\()57 b Fb(n)-51 b(e)g(w)606
+b Ff(A)42 b(l)g(a)g(r)g(m)196 b(\()152 b(\))306 b(,)899
+b(1)132 b(0)g(0)g(0)g(0)g(\))g(;)10080 43614 y Fe(g)10146
+44832 y Fb(e)117 b(l)g(s)g(e)167 b Fe(f)973 46050 y Fh(138)10269
+b Ff(B)-113 b(U)g(G)-5 b(\()159 b(")120 b(E)69 b(v)g(e)g(n)g(t)734
+b(")574 b(+)606 b(e)82 b(l)g(e)g(m)606 b(+)575 b(")694
+b(u)29 b(n)g(k)g(n)g(o)g(w)g(n)195 b(.)216 b(")234 b(\))182
+b(;)10080 47267 y Fe(g)7623 48485 y(g)5165 49703 y(g)973
+52138 y Fh(143)604 b Fe(g)26014 75495 y Fo(10)p eop end
+%%Trailer
+
+userdict /end-hook known{end-hook}if
+%%EOF
Binary files bamboo/doc/md-tutorial/SimpleStage$Alarm.class and bamboo1/doc/md-tutorial/SimpleStage$Alarm.class differ
Binary files bamboo/doc/md-tutorial/SimpleStage.class and bamboo1/doc/md-tutorial/SimpleStage.class differ
Binary files bamboo/doc/md-tutorial/SimpleStage$Payload.class and bamboo1/doc/md-tutorial/SimpleStage$Payload.class differ
Binary files bamboo/lib/Classifier.class and bamboo1/lib/Classifier.class differ
Binary files bamboo/lib/NetworkLatencyReq.class and bamboo1/lib/NetworkLatencyReq.class differ
Binary files bamboo/lib/NetworkMessage.class and bamboo1/lib/NetworkMessage.class differ
Binary files bamboo/lib/NodeId$BadFormat.class and bamboo1/lib/NodeId$BadFormat.class differ
Binary files bamboo/lib/NodeId$Both.class and bamboo1/lib/NodeId$Both.class differ
Binary files bamboo/lib/NodeId.class and bamboo1/lib/NodeId.class differ
Binary files bamboo/lib/ostore-seda-emu.jar and bamboo1/lib/ostore-seda-emu.jar differ
diff -urN bamboo/log.txt bamboo1/log.txt
--- bamboo/log.txt	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/log.txt	2008-03-18 17:32:26.000000000 +0200
@@ -0,0 +1,133 @@
+2008-03-18 17:32:25,576 INFO  bamboo.lss.DustDevil: DustDevil version 0.1
+2008-03-18 17:32:25,884 INFO  bamboo.lss.Network: Network xiaopeng-desktop now listening on port 5860
+2008-03-18 17:32:25,888 INFO  bamboo.lss.DustDevil: network.init is begining
+2008-03-18 17:32:25,892 INFO  bamboo.lss.Network: standardStage is over!
+2008-03-18 17:32:25,892 INFO  bamboo.lss.Network: config.drop_prob=0.0
+2008-03-18 17:32:25,892 INFO  bamboo.lss.Network: config.separate_thread=false
+2008-03-18 17:32:25,899 INFO  bamboo.lss.UdpCC: I am now in the UdpCC constructor~~~~~~~, the address is:xiaopeng-desktop/192.168.0.3:5860
+2008-03-18 17:32:25,911 INFO  bamboo.lss.UdpCC: initial rcv sobuf = 55296
+2008-03-18 17:32:25,911 INFO  bamboo.lss.UdpCC: my_addr = xiaopeng-desktop/192.168.0.3:5860
+2008-03-18 17:32:25,914 INFO  bamboo.lss.Network: config.udpcc_debug_level=-1
+2008-03-18 17:32:25,914 INFO  bamboo.lss.Network: config.udpcc_rx_sockbuf_size=-1
+2008-03-18 17:32:25,915 INFO  bamboo.lss.Network: config.timeout_factor=-1.0
+2008-03-18 17:32:25,915 INFO  bamboo.lss.Network: config.timeout_diff=-1.0
+2008-03-18 17:32:25,915 INFO  bamboo.lss.Network: config.mac_key_file=null
+2008-03-18 17:32:25,915 INFO  bamboo.lss.Network: the setting has been done!
+2008-03-18 17:32:25,915 INFO  bamboo.lss.DustDevil: network.init has been done
+2008-03-18 17:32:25,918 INFO  bamboo.lss.Network: Network 2001:250:1800:1:0:0:0:88 now listening on port 5850
+2008-03-18 17:32:25,918 INFO  bamboo.lss.DustDevil: network.init is begining
+2008-03-18 17:32:25,921 INFO  bamboo.lss.Network: standardStage is over!
+2008-03-18 17:32:25,921 INFO  bamboo.lss.Network: config.drop_prob=0.0
+2008-03-18 17:32:25,921 INFO  bamboo.lss.Network: config.separate_thread=false
+2008-03-18 17:32:25,921 INFO  bamboo.lss.UdpCC: I am now in the UdpCC constructor~~~~~~~, the address is:2001:250:1800:1:0:0:0:88/2001:250:1800:1:0:0:0:88:5850
+2008-03-18 17:32:25,921 INFO  bamboo.lss.UdpCC: initial rcv sobuf = 55296
+2008-03-18 17:32:25,921 INFO  bamboo.lss.UdpCC: my_addr = 2001:250:1800:1:0:0:0:88/2001:250:1800:1:0:0:0:88:5850
+2008-03-18 17:32:25,921 INFO  bamboo.lss.Network: config.udpcc_debug_level=-1
+2008-03-18 17:32:25,921 INFO  bamboo.lss.Network: config.udpcc_rx_sockbuf_size=-1
+2008-03-18 17:32:25,921 INFO  bamboo.lss.Network: config.timeout_factor=-1.0
+2008-03-18 17:32:25,921 INFO  bamboo.lss.Network: config.timeout_diff=-1.0
+2008-03-18 17:32:25,921 INFO  bamboo.lss.Network: config.mac_key_file=null
+2008-03-18 17:32:25,921 INFO  bamboo.lss.Network: the setting has been done!
+2008-03-18 17:32:25,922 INFO  bamboo.lss.DustDevil: network.init has been done
+2008-03-18 17:32:25,922 INFO  bamboo.lss.DustDevil:  create_network_stage has been done
+2008-03-18 17:32:26,044 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-03-18 17:32:26,050 INFO  bamboo.vivaldi.Vivaldi: config.vc_type=2.5d
+2008-03-18 17:32:26,050 INFO  bamboo.vivaldi.Vivaldi: Using 2.5D virtual coordinates
+2008-03-18 17:32:26,050 INFO  bamboo.vivaldi.Vivaldi: config.use_reverse_ping=true
+2008-03-18 17:32:26,050 INFO  bamboo.vivaldi.Vivaldi: config.generate_pings=true
+2008-03-18 17:32:26,050 INFO  bamboo.vivaldi.Vivaldi: config.eavesdrop_pings=false
+2008-03-18 17:32:26,050 INFO  bamboo.vivaldi.Vivaldi: config.ping_period=10000
+2008-03-18 17:32:26,050 INFO  bamboo.vivaldi.Vivaldi: config.status_period=-1
+2008-03-18 17:32:26,050 INFO  bamboo.vivaldi.Vivaldi: config.seed=-1
+2008-03-18 17:32:26,050 INFO  bamboo.vivaldi.Vivaldi: config.update_start=-1
+2008-03-18 17:32:26,050 INFO  bamboo.vivaldi.Vivaldi: config.track_initial=-1
+2008-03-18 17:32:26,050 INFO  bamboo.vivaldi.Vivaldi: config.version=1
+2008-03-18 17:32:26,050 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-03-18 17:32:26,051 INFO  bamboo.lss.Rpc: now, we are in the rpc stage!!
+2008-03-18 17:32:26,051 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-03-18 17:32:26,052 INFO  bamboo.www.WebInterface: config.build_file=null
+2008-03-18 17:32:26,052 INFO  bamboo.www.WebInterface: config.include_logs=false
+2008-03-18 17:32:26,052 INFO  bamboo.www.WebInterface: config.storage_manager_stage=StorageManager
+2008-03-18 17:32:26,055 WARN  bamboo.util.GetTimeOfDayCC: GetTimeOfDayCC not available
+2008-03-18 17:32:26,056 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-03-18 17:32:26,064 INFO  bamboo.db.StorageManager: config.homedir=/home/xiaopeng/store/store-5850
+2008-03-18 17:32:26,065 INFO  bamboo.db.StorageManager: config.print_open_cursors=false
+2008-03-18 17:32:26,065 INFO  bamboo.db.StorageManager: config.libdb_cache_size=-1
+2008-03-18 17:32:26,120 INFO  bamboo.db.StorageManager: Testing database
+2008-03-18 17:32:26,121 INFO  bamboo.db.StorageManager: Test successful
+2008-03-18 17:32:26,122 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-03-18 17:32:26,138 INFO  bamboo.dmgr.DataManager: config.desired_replicas=2147483646
+2008-03-18 17:32:26,138 INFO  bamboo.dmgr.DataManager: config.iterative_routing=false
+2008-03-18 17:32:26,138 INFO  bamboo.dmgr.DataManager: config.merkle_tree_expansion=-1
+2008-03-18 17:32:26,139 INFO  bamboo.dmgr.DataManager: config.ae_period=-1
+2008-03-18 17:32:26,139 INFO  bamboo.dmgr.DataManager: config.required_acks=2
+2008-03-18 17:32:26,139 INFO  bamboo.dmgr.DataManager: config.put_retry_time=-1
+2008-03-18 17:32:26,139 INFO  bamboo.dmgr.DataManager: config.put_give_up_time=-1
+2008-03-18 17:32:26,139 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-03-18 17:32:26,144 INFO  bamboo.dht.Dht: config.get_timeout=5000
+2008-03-18 17:32:26,144 INFO  bamboo.dht.Dht: config.iterative_routing=false
+2008-03-18 17:32:26,144 INFO  bamboo.dht.Dht: config.storage_manager_stage=StorageManager
+2008-03-18 17:32:26,145 INFO  bamboo.dht.Dht: config.min_replica_count=2
+2008-03-18 17:32:26,145 INFO  bamboo.dht.Dht: config.virtual_disks=-1
+2008-03-18 17:32:26,152 INFO  bamboo.dht.Dht: ttl=1 hour, disk size=56.25 MBs, rate=16 KBs/s
+2008-03-18 17:32:26,153 INFO  bamboo.dht.Dht: ttl=1 day, disk size=1.32 GBs, rate=16 KBs/s
+2008-03-18 17:32:26,153 INFO  bamboo.dht.Dht: ttl=1 week, disk size=9.23 GBs, rate=16 KBs/s
+2008-03-18 17:32:26,153 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-03-18 17:32:26,167 INFO  bamboo.router.Router: now we are in init function of Router class. call by DustDevil init_node()
+2008-03-18 17:32:26,167 INFO  bamboo.router.Router: config.no_rexmit_routes=false
+2008-03-18 17:32:26,167 INFO  bamboo.router.Router: config.ignore_possibly_down=false
+2008-03-18 17:32:26,167 INFO  bamboo.router.Router: config.ignore_proximity=false
+2008-03-18 17:32:26,167 INFO  bamboo.router.Router: config.digit_values=2
+2008-03-18 17:32:26,167 INFO  bamboo.router.Router: config.partition_check_alarm_period=60
+2008-03-18 17:32:26,167 INFO  bamboo.router.Router: config.periodic_ping_period=20
+2008-03-18 17:32:26,167 INFO  bamboo.router.Router: config.ls_alarm_period=4
+2008-03-18 17:32:26,167 INFO  bamboo.router.Router: config.near_rt_alarm_period=10
+2008-03-18 17:32:26,167 INFO  bamboo.router.Router: config.far_rt_alarm_period=20
+2008-03-18 17:32:26,167 INFO  bamboo.router.Router: config.lookup_rt_alarm_period=0
+2008-03-18 17:32:26,167 INFO  bamboo.router.Router: config.explicit_guid=null
+2008-03-18 17:32:26,167 INFO  bamboo.router.Router: config.pkey=null
+2008-03-18 17:32:26,171 INFO  bamboo.router.Router: config.gateway_count=-1
+2008-03-18 17:32:26,171 INFO  bamboo.router.Router: config.gateway=[2001:250:1800:1::89]:5850
+2008-03-18 17:32:26,172 INFO  bamboo.router.Router: Bamboo node 2001:250:1800:1:0:0:0:88:5850 has guid 0x3b679b15
+2008-03-18 17:32:26,172 INFO  bamboo.router.Router: config.leaf_set_size=4
+2008-03-18 17:32:26,174 INFO  bamboo.router.Router: config.rt_scale=-1.0
+2008-03-18 17:32:26,176 INFO  bamboo.router.Router: config.location_cache_size=0
+2008-03-18 17:32:26,176 INFO  bamboo.router.Router: config.immediate_join=true
+2008-03-18 17:32:26,177 INFO  bamboo.router.Router: end of init function of router
+2008-03-18 17:32:26,177 INFO  bamboo.lss.DustDevil: create each stage now here by call init function of :
+
+2008-03-18 17:32:26,178 INFO  bamboo.dht.Gateway: config.allow_unauth_rm=false
+2008-03-18 17:32:26,181 INFO  bamboo.lss.ASyncCoreImpl: ASyncCore.register_selectable
+Sandstorm: Ready
+2008-03-18 17:32:26,189 INFO  bamboo.lss.ASyncCoreImpl: async_main called
+2008-03-18 17:32:26,196 INFO  bamboo.dht.Dht: client 32.1.2.80 usage now 4.69 KBs of 4.69 KBs total.
+2008-03-18 17:32:26,197 INFO  bamboo.dht.Dht: client 192.168.0.3 usage now 6.55 KBs of 11.24 KBs total.
+2008-03-18 17:32:26,202 INFO  bamboo.lss.Rpc: now, we are register requestitHandler in the Rpc~~~~~~~~~~~~~~~~~~~`!
+2008-03-18 17:32:26,204 INFO  bamboo.lss.Rpc: now, we are register requestitHandler in the Rpc~~~~~~~~~~~~~~~~~~~`!
+2008-03-18 17:32:26,204 INFO  bamboo.router.Router: in the ready...come on man!! it is my time!
+2008-03-18 17:32:26,204 INFO  bamboo.lss.Rpc: now, we are register requestitHandler in the Rpc~~~~~~~~~~~~~~~~~~~`!
+2008-03-18 17:32:26,205 INFO  bamboo.router.Router: Joined through gateway 2001:250:1800:1:0:0:0:88:5850
+Tapestry: ready
+2008-03-18 17:32:26,210 FATAL bamboo.lss.DustDevil: uncaught exception
+java.lang.NoSuchFieldError: my_node_ids
+	at bamboo.dmgr.DataManager.handle_app_reg_resp(DataManager.java:290)
+	at bamboo.dmgr.DataManager.handleEvent(DataManager.java:212)
+	at bamboo.util.StandardStage.handleEvents(StandardStage.java:288)
+	at bamboo.lss.DustDevilSink.enqueue(DustDevilSink.java:68)
+	at bamboo.router.Router.application_enqueue(Router.java:1161)
+	at bamboo.router.Router.handle_router_app_reg_req(Router.java:1152)
+	at bamboo.router.Router.handleEvent(Router.java:736)
+	at bamboo.router.Router.set_initialized(Router.java:1264)
+	at bamboo.router.Router$13.run(Router.java:1313)
+	at bamboo.lss.ASyncCoreImpl.asyncMain(ASyncCoreImpl.java:367)
+	at bamboo.lss.ASyncCore.async_main(ASyncCore.java:129)
+	at bamboo.lss.DustDevil.main(DustDevil.java:408)
+2008-03-18 17:32:26,211 INFO  bamboo.db.StorageManager: shutdown hook checkpointing database
+2008-03-18 17:32:26,219 INFO  bamboo.db.StorageManager: shutdown hook checkpoint complete
diff -urN bamboo/.project bamboo1/.project
--- bamboo/.project	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/.project	2008-01-10 16:28:02.000000000 +0200
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>bamboo1</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+	</buildSpec>
+	<natures>
+	</natures>
+</projectDescription>
diff -urN bamboo/src/bamboo/api/BambooAddToLocationCache.java bamboo1/src/bamboo/api/BambooAddToLocationCache.java
--- bamboo/src/bamboo/api/BambooAddToLocationCache.java	2003-12-29 20:10:43.000000000 +0200
+++ bamboo1/src/bamboo/api/BambooAddToLocationCache.java	2008-05-19 16:37:41.000000000 +0300
@@ -23,13 +23,14 @@
 
     public NodeId node_id;
     public BigInteger guid;
-
-    public BambooAddToLocationCache (NodeId n, BigInteger g) {
-        guid = g; node_id = n;
+    public NodeId peer;      //TODO
+    
+    public BambooAddToLocationCache (NodeId p, NodeId n, BigInteger g) {
+        guid = g; node_id = n; peer =p;
     }
 
     public String toString () {
 	return "(BambooAddToLocationCache guid=" 
-            + GuidTools.guid_to_string (guid) + " node_id=" + node_id + ")";
+            + GuidTools.guid_to_string (guid) + " node_id=" + node_id + " peer=" + peer + ")";
     }
 }
diff -urN bamboo/src/bamboo/api/BambooNeighborInfo.java bamboo1/src/bamboo/api/BambooNeighborInfo.java
--- bamboo/src/bamboo/api/BambooNeighborInfo.java	2003-10-05 22:02:02.000000000 +0300
+++ bamboo1/src/bamboo/api/BambooNeighborInfo.java	2008-05-19 16:34:18.000000000 +0300
@@ -23,24 +23,28 @@
 public class BambooNeighborInfo implements Comparable, QuickSerializable {
 
     public NodeId node_id;
+    public NodeId peer;  //TODO
     public BigInteger guid;
     public /* transient */ double rtt_ms;
 
-    public BambooNeighborInfo (NodeId n, BigInteger g, double r) {
-	node_id = n; guid = g;  rtt_ms = r;
-    }
+    public BambooNeighborInfo (NodeId p, NodeId n, BigInteger g, double r) {
+    	peer = p; node_id = n; guid = g;  rtt_ms = r;
+        }
+    
+    public BambooNeighborInfo (NodeId p, NodeId n, BigInteger g) {
+    	peer = p; node_id = n; guid = g;  rtt_ms = Double.MAX_VALUE;
+        }
 
-    public BambooNeighborInfo (NodeId n, BigInteger g) {
-	node_id = n; guid = g;  rtt_ms = Double.MAX_VALUE;
-    }
 
     public BambooNeighborInfo (InputBuffer buffer) throws QSException {
-	node_id = (NodeId) buffer.nextObject ();
+	peer = (NodeId) buffer.nextObject ();
+    node_id = (NodeId) buffer.nextObject ();
 	guid = buffer.nextBigInteger ();
     }
 
     public void serialize (OutputBuffer buffer) {
-        buffer.add (node_id);
+    	buffer.add (peer);
+    	buffer.add (node_id);
         buffer.add (guid);
     }
 
diff -urN bamboo/src/bamboo/db/StorageManager.java bamboo1/src/bamboo/db/StorageManager.java
--- bamboo/src/bamboo/db/StorageManager.java	2006-03-02 23:59:39.000000000 +0200
+++ bamboo1/src/bamboo/db/StorageManager.java	2008-02-18 15:47:26.000000000 +0200
@@ -877,10 +877,12 @@
         Runtime.getRuntime().addShutdownHook(new ShutdownHook());
 
         rand = new Random (now_ms () ^ my_node_id.hashCode ());
+
         classifier.dispatch_later (new SyncAlarm (), 
                 30*1000 + rand.nextInt (60*1000));
         classifier.dispatch_later (new Alarm (), 
                 30*1000 + rand.nextInt (60*1000));
+    
     }
 
     // For the watchdog timer.
diff -urN bamboo/src/bamboo/dht/bamboo_get_result.java bamboo1/src/bamboo/dht/bamboo_get_result.java
--- bamboo/src/bamboo/dht/bamboo_get_result.java	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/dht/bamboo_get_result.java	2008-06-12 11:32:41.000000000 +0300
@@ -0,0 +1,35 @@
+/*
+ * Automatically generated by jrpcgen 1.0.5 on 6/12/08 10:32 AM
+ * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
+ * See http://acplt.org/ks/remotetea.html for details
+ */
+package bamboo.dht;
+import org.acplt.oncrpc.*;
+import java.io.IOException;
+
+public class bamboo_get_result implements XdrAble {
+    public bamboo_get_value [] values;
+    public bamboo_placemark placemark;
+
+    public bamboo_get_result() {
+    }
+
+    public bamboo_get_result(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        xdrDecode(xdr);
+    }
+
+    public void xdrEncode(XdrEncodingStream xdr)
+           throws OncRpcException, IOException {
+        { int $size = values.length; xdr.xdrEncodeInt($size); for ( int $idx = 0; $idx < $size; ++$idx ) { values[$idx].xdrEncode(xdr); } }
+        placemark.xdrEncode(xdr);
+    }
+
+    public void xdrDecode(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        { int $size = xdr.xdrDecodeInt(); values = new bamboo_get_value[$size]; for ( int $idx = 0; $idx < $size; ++$idx ) { values[$idx] = new bamboo_get_value(xdr); } }
+        placemark = new bamboo_placemark(xdr);
+    }
+
+}
+// End of bamboo_get_result.java
diff -urN bamboo/src/bamboo/dht/bamboo_get_value.java bamboo1/src/bamboo/dht/bamboo_get_value.java
--- bamboo/src/bamboo/dht/bamboo_get_value.java	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/dht/bamboo_get_value.java	2008-06-12 11:32:41.000000000 +0300
@@ -0,0 +1,38 @@
+/*
+ * Automatically generated by jrpcgen 1.0.5 on 6/12/08 10:32 AM
+ * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
+ * See http://acplt.org/ks/remotetea.html for details
+ */
+package bamboo.dht;
+import org.acplt.oncrpc.*;
+import java.io.IOException;
+
+public class bamboo_get_value implements XdrAble {
+    public bamboo_value value;
+    public int ttl_sec_rem;
+    public bamboo_hash secret_hash;
+
+    public bamboo_get_value() {
+    }
+
+    public bamboo_get_value(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        xdrDecode(xdr);
+    }
+
+    public void xdrEncode(XdrEncodingStream xdr)
+           throws OncRpcException, IOException {
+        value.xdrEncode(xdr);
+        xdr.xdrEncodeInt(ttl_sec_rem);
+        secret_hash.xdrEncode(xdr);
+    }
+
+    public void xdrDecode(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        value = new bamboo_value(xdr);
+        ttl_sec_rem = xdr.xdrDecodeInt();
+        secret_hash = new bamboo_hash(xdr);
+    }
+
+}
+// End of bamboo_get_value.java
diff -urN bamboo/src/bamboo/dht/bamboo_hash.java bamboo1/src/bamboo/dht/bamboo_hash.java
--- bamboo/src/bamboo/dht/bamboo_hash.java	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/dht/bamboo_hash.java	2008-06-12 11:32:41.000000000 +0300
@@ -0,0 +1,35 @@
+/*
+ * Automatically generated by jrpcgen 1.0.5 on 6/12/08 10:32 AM
+ * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
+ * See http://acplt.org/ks/remotetea.html for details
+ */
+package bamboo.dht;
+import org.acplt.oncrpc.*;
+import java.io.IOException;
+
+public class bamboo_hash implements XdrAble {
+    public String algorithm;
+    public byte [] hash;
+
+    public bamboo_hash() {
+    }
+
+    public bamboo_hash(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        xdrDecode(xdr);
+    }
+
+    public void xdrEncode(XdrEncodingStream xdr)
+           throws OncRpcException, IOException {
+        xdr.xdrEncodeString(algorithm);
+        xdr.xdrEncodeDynamicOpaque(hash);
+    }
+
+    public void xdrDecode(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        algorithm = xdr.xdrDecodeString();
+        hash = xdr.xdrDecodeDynamicOpaque();
+    }
+
+}
+// End of bamboo_hash.java
diff -urN bamboo/src/bamboo/dht/bamboo_put_arguments.java bamboo1/src/bamboo/dht/bamboo_put_arguments.java
--- bamboo/src/bamboo/dht/bamboo_put_arguments.java	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/dht/bamboo_put_arguments.java	2008-06-12 11:32:41.000000000 +0300
@@ -0,0 +1,47 @@
+/*
+ * Automatically generated by jrpcgen 1.0.5 on 6/12/08 10:32 AM
+ * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
+ * See http://acplt.org/ks/remotetea.html for details
+ */
+package bamboo.dht;
+import org.acplt.oncrpc.*;
+import java.io.IOException;
+
+public class bamboo_put_arguments implements XdrAble {
+    public String application;
+    public String client_library;
+    public bamboo_key key;
+    public bamboo_value value;
+    public bamboo_hash secret_hash;
+    public int ttl_sec;
+
+    public bamboo_put_arguments() {
+    }
+
+    public bamboo_put_arguments(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        xdrDecode(xdr);
+    }
+
+    public void xdrEncode(XdrEncodingStream xdr)
+           throws OncRpcException, IOException {
+        xdr.xdrEncodeString(application);
+        xdr.xdrEncodeString(client_library);
+        key.xdrEncode(xdr);
+        value.xdrEncode(xdr);
+        secret_hash.xdrEncode(xdr);
+        xdr.xdrEncodeInt(ttl_sec);
+    }
+
+    public void xdrDecode(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        application = xdr.xdrDecodeString();
+        client_library = xdr.xdrDecodeString();
+        key = new bamboo_key(xdr);
+        value = new bamboo_value(xdr);
+        secret_hash = new bamboo_hash(xdr);
+        ttl_sec = xdr.xdrDecodeInt();
+    }
+
+}
+// End of bamboo_put_arguments.java
diff -urN bamboo/src/bamboo/dht/bamboo_rm_args.java bamboo1/src/bamboo/dht/bamboo_rm_args.java
--- bamboo/src/bamboo/dht/bamboo_rm_args.java	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/dht/bamboo_rm_args.java	2008-06-12 11:32:41.000000000 +0300
@@ -0,0 +1,44 @@
+/*
+ * Automatically generated by jrpcgen 1.0.5 on 6/12/08 10:32 AM
+ * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
+ * See http://acplt.org/ks/remotetea.html for details
+ */
+package bamboo.dht;
+import org.acplt.oncrpc.*;
+import java.io.IOException;
+
+public class bamboo_rm_args implements XdrAble {
+    public String application;
+    public String client_library;
+    public bamboo_key key;
+    public bamboo_value_hash value_hash;
+    public int ttl_sec;
+
+    public bamboo_rm_args() {
+    }
+
+    public bamboo_rm_args(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        xdrDecode(xdr);
+    }
+
+    public void xdrEncode(XdrEncodingStream xdr)
+           throws OncRpcException, IOException {
+        xdr.xdrEncodeString(application);
+        xdr.xdrEncodeString(client_library);
+        key.xdrEncode(xdr);
+        value_hash.xdrEncode(xdr);
+        xdr.xdrEncodeInt(ttl_sec);
+    }
+
+    public void xdrDecode(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        application = xdr.xdrDecodeString();
+        client_library = xdr.xdrDecodeString();
+        key = new bamboo_key(xdr);
+        value_hash = new bamboo_value_hash(xdr);
+        ttl_sec = xdr.xdrDecodeInt();
+    }
+
+}
+// End of bamboo_rm_args.java
diff -urN bamboo/src/bamboo/dht/bamboo_rm_arguments.java bamboo1/src/bamboo/dht/bamboo_rm_arguments.java
--- bamboo/src/bamboo/dht/bamboo_rm_arguments.java	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/dht/bamboo_rm_arguments.java	2008-06-12 11:32:41.000000000 +0300
@@ -0,0 +1,50 @@
+/*
+ * Automatically generated by jrpcgen 1.0.5 on 6/12/08 10:32 AM
+ * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
+ * See http://acplt.org/ks/remotetea.html for details
+ */
+package bamboo.dht;
+import org.acplt.oncrpc.*;
+import java.io.IOException;
+
+public class bamboo_rm_arguments implements XdrAble {
+    public String application;
+    public String client_library;
+    public bamboo_key key;
+    public bamboo_hash value_hash;
+    public String secret_hash_alg;
+    public byte [] secret;
+    public int ttl_sec;
+
+    public bamboo_rm_arguments() {
+    }
+
+    public bamboo_rm_arguments(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        xdrDecode(xdr);
+    }
+
+    public void xdrEncode(XdrEncodingStream xdr)
+           throws OncRpcException, IOException {
+        xdr.xdrEncodeString(application);
+        xdr.xdrEncodeString(client_library);
+        key.xdrEncode(xdr);
+        value_hash.xdrEncode(xdr);
+        xdr.xdrEncodeString(secret_hash_alg);
+        xdr.xdrEncodeDynamicOpaque(secret);
+        xdr.xdrEncodeInt(ttl_sec);
+    }
+
+    public void xdrDecode(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        application = xdr.xdrDecodeString();
+        client_library = xdr.xdrDecodeString();
+        key = new bamboo_key(xdr);
+        value_hash = new bamboo_hash(xdr);
+        secret_hash_alg = xdr.xdrDecodeString();
+        secret = xdr.xdrDecodeDynamicOpaque();
+        ttl_sec = xdr.xdrDecodeInt();
+    }
+
+}
+// End of bamboo_rm_arguments.java
diff -urN bamboo/src/bamboo/dht/bamboo_value_hash.java bamboo1/src/bamboo/dht/bamboo_value_hash.java
--- bamboo/src/bamboo/dht/bamboo_value_hash.java	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/dht/bamboo_value_hash.java	2008-06-12 11:32:41.000000000 +0300
@@ -0,0 +1,37 @@
+/*
+ * Automatically generated by jrpcgen 1.0.5 on 6/12/08 10:32 AM
+ * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
+ * See http://acplt.org/ks/remotetea.html for details
+ */
+package bamboo.dht;
+import org.acplt.oncrpc.*;
+import java.io.IOException;
+
+public class bamboo_value_hash implements XdrAble {
+
+    public byte [] value;
+
+    public bamboo_value_hash() {
+    }
+
+    public bamboo_value_hash(byte [] value) {
+        this.value = value;
+    }
+
+    public bamboo_value_hash(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        xdrDecode(xdr);
+    }
+
+    public void xdrEncode(XdrEncodingStream xdr)
+           throws OncRpcException, IOException {
+        xdr.xdrEncodeOpaque(value, 20);
+    }
+
+    public void xdrDecode(XdrDecodingStream xdr)
+           throws OncRpcException, IOException {
+        value = xdr.xdrDecodeOpaque(20);
+    }
+
+}
+// End of bamboo_value_hash.java
diff -urN bamboo/src/bamboo/dht/Dht.java bamboo1/src/bamboo/dht/Dht.java
--- bamboo/src/bamboo/dht/Dht.java	2005-12-14 21:39:09.000000000 +0200
+++ bamboo1/src/bamboo/dht/Dht.java	2008-05-20 17:53:00.000000000 +0300
@@ -330,6 +330,8 @@
     protected Map ls_disk_sizes[] = {
         new HashMap(), new HashMap(), new HashMap()
     };
+    
+    protected Map<InetAddress, BambooNeighborInfo> peer_addr = new LinkedHashMap<InetAddress, BambooNeighborInfo>();
 
     /**
      * The last time we added any tokens to each bucket.
@@ -378,7 +380,8 @@
                     Double size = (Double) ls_disk_sizes[i].get(peer);
                     ds.add(peer, Math.round(size.doubleValue()));
                 }
-                ds.add(my_node_id, Math.round(disk_sizes[i]));
+                ds.add(my_neighbor_info, Math.round(disk_sizes[i]));  //TODO                
+                //ds.add(my_node_id, Math.round(disk_sizes[i]));
                 for (int k = 0; k < ds.size() - min_replica_count - 1; ++k)
                     ds.removeFirst();
                 double min_size = (double) ds.getFirstPriority();
@@ -399,10 +402,13 @@
                     StringUtil.byte_cnt_to_sbuf(
                             Math.round(fill_rates[i] * 1000.0), sbuf);
                     sbuf.append("/s, limited by ");
-                    NodeId limit = (NodeId) ds.getFirst ();
-                    sbuf.append(limit.address ().getHostAddress ());
+                    BambooNeighborInfo limit = (BambooNeighborInfo) ds.getFirst ();
+                    sbuf.append(limit.peer.address ().getHostAddress ());
                     sbuf.append(":");
-                    sbuf.append(limit.port ());
+                    sbuf.append(limit.peer.port ());
+                    sbuf.append(limit.node_id.address ().getHostAddress ());  //TODO
+                    sbuf.append(":");
+                    sbuf.append(limit.node_id.port ());
                     logger.info(sbuf);
                 }
             }
@@ -453,27 +459,43 @@
         for (int i = 0; i < msg.preds.length; ++i) {
             for (int j = 0; j < ls_disk_sizes.length; ++j) {
                 Double sz = (Double)
-                    ls_disk_sizes[j].get(msg.preds[i].node_id);
+                    ls_disk_sizes[j].get(msg.preds[i]);  //TODO
                 if (sz == null) sz = new Double(0);
-                new_ds[j].put(msg.preds[i].node_id, sz);
+                new_ds[j].put(msg.preds[i], sz);
+                peer_addr.put(msg.preds[i].peer.address(), msg.preds[i]);
             }
         }
         for (int i = 0; i < msg.succs.length; ++i) {
             for (int j = 0; j < ls_disk_sizes.length; ++j) {
                 Double sz = (Double)
-                    ls_disk_sizes[j].get(msg.succs[i].node_id);
+                    ls_disk_sizes[j].get(msg.succs[i]);
                 if (sz == null) sz = new Double(0);
-                new_ds[j].put(msg.succs[i].node_id, sz);
+                new_ds[j].put(msg.succs[i], sz);
+                peer_addr.put(msg.succs[i].peer.address(), msg.succs[i]);
             }
         }
 
+        logger.info("In the handle_leaf_set_changed, ls_disk_sizes: " + ls_disk_sizes );
         ls_disk_sizes = new_ds;
 
         compute_rates();
     }
 
-    protected void sendDiskSizeMsg(InetSocketAddress peer, boolean reply) {
-        network.send(new DiskSizeMsg(ttl_sec_ranges, disk_sizes, reply), peer);
+    protected void sendDiskSizeMsg(BambooNeighborInfo peer, boolean reply) {
+    	//find the corrent network stage for this peer. 
+    	Iterator i = Network.instances.keySet ().iterator ();
+        while (i.hasNext ()) {        	 
+       	 Network n_id = Network.instances.get(i.next());      	 
+       	 if (peer.peer.getAddress().getClass() == n_id.addr.getAddress().getClass())
+       		 network = n_id;
+        }
+        if (network == null ){
+		    logger.fatal ("there is no network for this addr:" + peer);
+		    System.exit (1);
+        }      	
+    	
+        logger.info("DiskSizeMsg to the dest:" + peer);
+        network.send(new DiskSizeMsg(my_node_id, my_guid, ttl_sec_ranges, disk_sizes, reply), peer.peer);
     }
 
     protected Runnable swap_disk_sizes_cb = new Runnable() {
@@ -482,7 +504,9 @@
                 int which = rand.nextInt(ls_disk_sizes[0].size());
                 Iterator i = ls_disk_sizes[0].keySet().iterator();
                 while (which-- > 0) i.next();
-                sendDiskSizeMsg((NodeId) i.next(), true);
+                BambooNeighborInfo p = (BambooNeighborInfo) i.next();
+                logger.info("In the swap_disk_sizes_cb, to send DiskSizeMsg to " + p);
+                sendDiskSizeMsg( p, true);
             }
             acore.registerTimer(rand.nextInt(4000) + 2000, this);
         }
@@ -493,9 +517,10 @@
 
         public void run(DiskSizeMsg msg, InetSocketAddress peer) {
             boolean changed = false;
-            for (int i = 0; i < ttl_sec_ranges.length; ++i) {
+            for (int i = 0; i < ttl_sec_ranges.length; ++i) {          	
                 if (i < msg.ttls.length && (msg.ttls[i] == ttl_sec_ranges[i])) {
-                    Double old_size = (Double) ls_disk_sizes[i].get(peer);
+                	BambooNeighborInfo n = peer_addr.get(peer.getAddress());  //TODO 
+                	Double old_size = (Double) ls_disk_sizes[i].get(n);
                     if (old_size == null) {
                         // They think we're in their leaf set, but we don't
                         // think so.  This could be a very short term
@@ -505,7 +530,12 @@
                         // so they may never accept any puts.
 
                         if (msg.reply)
-                            sendDiskSizeMsg(peer, false);
+                        	if (n == null ){   //TODO
+                        		BambooNeighborInfo m = new BambooNeighborInfo(NodeId.create(peer), msg.node_id, msg.guid);
+                        		sendDiskSizeMsg(m, false);
+                        	}else {
+                        		sendDiskSizeMsg(n, false);
+                        	}                            
                     }
                     else {
                         if (old_size.doubleValue() != msg.sizes[i]) {
@@ -518,8 +548,14 @@
                                         Math.round(msg.sizes[i]), sbuf);
                                 logger.info(sbuf);
                             }
-                            ls_disk_sizes[i].put(
-                                    peer, new Double(msg.sizes[i]));
+                            if (n == null ){   //TODO
+                            	BambooNeighborInfo m = new BambooNeighborInfo(NodeId.create(peer), msg.node_id, msg.guid);
+                            	ls_disk_sizes[i].put(
+                                        n, new Double(msg.sizes[i]));
+                            }else {
+                                ls_disk_sizes[i].put(
+                                        n, new Double(msg.sizes[i]));
+                            }
                             changed = true;
                         }
                     }
@@ -808,6 +844,7 @@
         public ByteBuffer value;
         public boolean put;
         public NodeId return_addr;
+        public NodeId node_id;     //TODO
         public long seq;
         public int ttl_sec;
         public InetAddress client_id;
@@ -815,9 +852,9 @@
         public byte [] value_hash;
         public byte [] secret_hash;
         public PutReqPayload(long t, BigInteger k, ByteBuffer v,
-                             boolean p, NodeId r, long s, int tt, 
+                             boolean p, NodeId r, NodeId n, long s, int tt, 
                              InetAddress c, byte [] vh, byte [] sh) {
-            time_usec = t; key = k; value = v; put = p; return_addr = r;
+            time_usec = t; key = k; value = v; put = p; return_addr = r; node_id = n;
             seq = s; ttl_sec = tt; client_id = c; value_hash = vh;
             secret_hash = sh;
         }
@@ -831,6 +868,7 @@
             value = ByteBuffer.wrap(tmp);
             put = buffer.nextBoolean();
             return_addr = new NodeId(buffer);
+            node_id = new NodeId(buffer);   //TODO
             seq = buffer.nextLong();
             ttl_sec = buffer.nextInt();
             int client_id_len = buffer.nextInt();
@@ -867,6 +905,7 @@
             buffer.add(value.array(), value.arrayOffset(), value.limit());
             buffer.add(put);
             return_addr.serialize(buffer);
+            node_id.serialize(buffer);   //TODO
             buffer.add(seq);
             buffer.add(ttl_sec);
             byte[] client_bytes = client_id.getAddress();
@@ -891,8 +930,8 @@
     public static class PutRespMsg extends NetworkMessage {
         public long seq;
         public int result;
-        public PutRespMsg(NodeId dest, long s, int r) {
-            super(dest, false); seq = s; result = r;
+        public PutRespMsg(NodeId dest, NodeId dest_id, NodeId source_id, long s, int r) {
+            super(dest, dest_id, source_id, false); seq = s; result = r;
         }
         public PutRespMsg(InputBuffer buffer) throws QSException {
             super(buffer);
@@ -915,9 +954,9 @@
         public LinkedList values;
         public StorageManager.Key orig_placemark;
         public StorageManager.Key new_placemark;
-        public GetRespMsg(NodeId dest, long s, BigInteger k, LinkedList v,
+        public GetRespMsg(NodeId dest, NodeId dest_id, NodeId source_id, long s, BigInteger k, LinkedList v,
                           StorageManager.Key o, StorageManager.Key n) {
-            super(dest, false);
+            super(dest, dest_id, source_id, false);
             seq = s; key = k; values = v; orig_placemark = o; new_placemark = n;
             assert new_placemark != null;
         }
@@ -1013,14 +1052,18 @@
     }
 
     public static class DiskSizeMsg implements QuickSerializable {
-        public int[] ttls;
+        public NodeId node_id; //TODO
+        public BigInteger guid; //TODO
+    	public int[] ttls;
         public double[] sizes;
         public boolean reply;
-        public DiskSizeMsg(int[] t, double[] s, boolean r) {
-            ttls = t; sizes = s; reply = r;
+        public DiskSizeMsg(NodeId n, BigInteger g, int[] t, double[] s, boolean r) {
+        	node_id =n; guid = g; ttls = t; sizes = s; reply = r;
         }
         public DiskSizeMsg(InputBuffer buf) throws QSException {
-            int cnt = buf.nextInt();
+        	node_id = (NodeId) buf.nextObject ();
+        	guid = buf.nextBigInteger ();
+        	int cnt = buf.nextInt();
             ttls = new int[cnt];
             sizes = new double[cnt];
             for (int i = 0; i < cnt; ++i) {
@@ -1030,6 +1073,8 @@
             reply = buf.nextBoolean();
         }
         public void serialize(OutputBuffer buf) {
+        	buf.add (node_id);
+        	buf.add (guid);
             assert(ttls.length == sizes.length);
             buf.add(ttls.length);
             for (int i = 0; i < ttls.length; ++i) {
@@ -1040,6 +1085,8 @@
         }
         public Object clone() throws CloneNotSupportedException {
             DiskSizeMsg result = (DiskSizeMsg) super.clone();
+            result.node_id = node_id;
+            result.guid = guid;
             result.ttls = new int[ttls.length];
             result.sizes = new double[sizes.length];
             for (int i = 0; i < ttls.length; ++i) {
@@ -1107,14 +1154,20 @@
             rand = new Random(my_node_id.hashCode() ^ now_ms());
             returnToClient = 
                 new ReturnToClient(logger, network, rpc, acore, router, rand);
+            
+            Iterator i = Network.instances.keySet ().iterator ();  //TODO
+            while (i.hasNext ()) {            	
+           	 Network network = Network.instances.get(i.next());           	 
             try {
-                network.registerReceiver(DiskSizeMsg.class, handleDiskSizeMsg);
+            	network.registerReceiver(DiskSizeMsg.class, handleDiskSizeMsg);
                 network.registerReceiver(RecurGetReq.class,handleRecurGetReq);
-                network.registerReceiver(RecurGetResp.class,handleRecurGetResp);
-                rpc.registerRequestHandler(IterGetReq.class, iterGetReqHandler);
+                network.registerReceiver(RecurGetResp.class,handleRecurGetResp);                                   
             }
             catch (DuplicateTypeException e) { BUG(e); }
-
+            }
+            try { rpc.registerRequestHandler(IterGetReq.class, iterGetReqHandler);}
+            catch (DuplicateTypeException e) { BUG(e); }
+            
             dispatch(new BambooRouterAppRegReq(
                         app_id, true, false, false, my_sink));
         }
@@ -1128,7 +1181,24 @@
             BambooRouterAppRegResp resp = (BambooRouterAppRegResp) item;
             initialized = true;
             my_guid = resp.node_guid;
-            my_neighbor_info = new NeighborInfo(my_node_id, my_guid);
+            // add by Lu xiaopeng for multi-address. 
+            if (Network.instances.size() > 1) {
+            	multiNeighbor = true;
+            	Set<InetSocketAddress> n = Network.instances.keySet();
+            	Iterator i = Network.instances.keySet ().iterator ();
+                 while (i.hasNext ()) {
+                	 Network n_id = Network.instances.get(i.next());                	 
+                	 BambooNeighborInfo my_neighbor_info = new BambooNeighborInfo (n_id.networkid, my_node_id, my_guid);
+                     if (! my_neighbor_infos.contains (my_neighbor_info))
+                    	 my_neighbor_infos.addLast (my_neighbor_info);
+                 }    	
+            } else {
+            	logger.info("the network of router is: " + network);
+            	my_neighbor_info = new BambooNeighborInfo (network.networkid, my_node_id, my_guid);    	
+            	my_neighbor_infos.addLast(my_neighbor_info);    	
+            }
+            
+            //my_neighbor_info = new NeighborInfo(my_node_id, my_guid);
             MODULUS = resp.modulus;
             MAX_GUID = resp.modulus.subtract(BigInteger.ONE);
             next_put_seq = rand.nextLong () & 0x7fffffffffffffffL;
@@ -1208,7 +1278,7 @@
         long now_us = now_ms() * 1000;
         Long seq = new Long (next_put_seq ());
         PutReqPayload payload = new PutReqPayload(
-                now_us, req.key, req.value, req.put, my_node_id, 
+                now_us, req.key, req.value, req.put, network.networkid, my_node_id, 
                 seq.longValue (), req.ttl_sec, req.client_id, 
                 req.value_hash, req.secret_hash);
         active_puts.put(seq, new Object [] {req, payload});
@@ -1321,7 +1391,7 @@
             if (logger.isInfoEnabled ())
                 logger.info ("don't have enough neighbors to accept put");
             PutRespMsg outb = new PutRespMsg(
-                payload.return_addr, payload.seq, bamboo_stat.BAMBOO_CAP);
+                payload.return_addr, payload.node_id, my_node_id, payload.seq, bamboo_stat.BAMBOO_CAP);
             outb.timeout_sec = 300;
             dispatch(outb);
             return;
@@ -1366,7 +1436,7 @@
                                  " no slop space available");
             }
             PutRespMsg outb = new PutRespMsg(
-                payload.return_addr, payload.seq,
+                payload.return_addr, payload.node_id, my_node_id, payload.seq,
                 bamboo_stat.BAMBOO_CAP);
             outb.timeout_sec = 300;
             dispatch(outb);
@@ -1377,7 +1447,7 @@
         BambooRouteDeliver msg = (BambooRouteDeliver) ack.user_data;
         PutReqPayload payload = (PutReqPayload) msg.payload;
         PutRespMsg outb = new PutRespMsg(
-                payload.return_addr, payload.seq, bamboo_stat.BAMBOO_OK);
+                payload.return_addr, payload.node_id, my_node_id, payload.seq, bamboo_stat.BAMBOO_OK);
         returnToClient.returnToClient(outb, null);
     }
 
@@ -1503,8 +1573,8 @@
      * we've received but haven't finished processing so that we don't start
      * all over on retried requests.
      */
-    protected Set<Pair<NodeId,Long>> getsBeingProcessed =
-        new HashSet<Pair<NodeId,Long>>();
+    protected Set<Pair<NeighborInfo,Long>> getsBeingProcessed =
+        new HashSet<Pair<NeighborInfo,Long>>();
 
     protected Function2<BigInteger,BigInteger,Long> fdScaling =
         new Function2<BigInteger,BigInteger,Long>() {
@@ -1530,9 +1600,9 @@
 
     protected void startNewStyleRecurGet(final long seq, final BigInteger key, 
             final Key placemark, final int maxvals, final NodeId client,
-            final NodeId return_addr, Set<NeighborInfo> replicas) {
+            final NeighborInfo return_addr, Set<NeighborInfo> replicas) {
 
-        Pair<NodeId,Long> pair = Pair.create(return_addr, new Long(seq));
+        Pair<NeighborInfo,Long> pair = Pair.create(return_addr, new Long(seq));
         if (getsBeingProcessed.contains(pair)) {
             StringBuffer sbuf = new StringBuffer(200);
             sbuf.append("upcall for get req key=0x");
@@ -1573,7 +1643,7 @@
         logger.info(sbuf.toString());
 
         getValues(key, placemark, maxvals, 
-                  curry(sendRecurGetResp, return_addr, new Long(seq), r, synced, 
+                  curry(sendRecurGetResp, return_addr.peer, new Long(seq), r, synced, 
                         new Integer(maxvals), client, pair));
     }
 
@@ -1587,11 +1657,24 @@
                 final NeighborInfo nextHop = calcNextHop(req.key, req.maxvals);
                 if ((router.leafSet().overlap() || (replicas.size() == needed))
                     || nextHop.equals(my_neighbor_info)) {
+                	NeighborInfo return_addr = new NeighborInfo(req.return_addr, req.client, my_guid);
                     startNewStyleRecurGet(req.seq, req.key, req.placemark, 
-                            req.maxvals, req.client, req.return_addr, replicas);
+                            req.maxvals, req.client, return_addr, replicas);
                 }
                 else {
-                    network.send(req, nextHop.node_id, 5, new Thunk1<Boolean>() {
+                	//find the corrent network for this addr. 
+                	Iterator i = Network.instances.keySet ().iterator ();
+                    while (i.hasNext ()) {        	 
+                   	 Network n_id = Network.instances.get(i.next());      	 
+                   	 if (nextHop.peer.getAddress().getClass() == n_id.addr.getAddress().getClass())
+                   		 network = n_id;       	 
+                    }
+                    if (network == null ){
+            		    logger.fatal ("there is no network for this addr:" + nextHop.peer);
+            		    System.exit (1);
+                    }    
+                	
+                    network.send(req, nextHop.peer, 5, new Thunk1<Boolean>() {
                             public void run(Boolean success) {
                                 if (success.booleanValue()) {
                                     // Remove the node from the possiblyDown set.
@@ -1687,8 +1770,10 @@
 
     protected BigInteger MODULUS;
     protected BigInteger my_guid;
-    protected NeighborInfo my_neighbor_info;
-
+    protected BambooNeighborInfo my_neighbor_info;
+    protected LinkedList<BambooNeighborInfo> my_neighbor_infos = new LinkedList<BambooNeighborInfo>();  //TODO
+    public boolean multiNeighbor = false;
+    
     public BigInteger calc_dist (BigInteger a, BigInteger b) {
         return GuidTools.calc_dist (a, b, MODULUS);
     }
@@ -1719,7 +1804,7 @@
             sbuf.append(seq);
             logger.info(sbuf.toString());
 
-            RecurGetResp outb = new RecurGetResp(dest, seq.longValue(),
+            RecurGetResp outb = new RecurGetResp(dest, dest, my_node_id, seq.longValue(),
                     replicas, synced, values, allRead.booleanValue(),
                     my_node_id, maxvals.intValue(), client);
 
diff -urN bamboo/src/bamboo/dht/GatewayClient.java bamboo1/src/bamboo/dht/GatewayClient.java
--- bamboo/src/bamboo/dht/GatewayClient.java	2005-07-01 03:11:35.000000000 +0300
+++ bamboo1/src/bamboo/dht/GatewayClient.java	2008-05-23 16:10:29.000000000 +0300
@@ -175,9 +175,11 @@
     protected class MySelectableCb implements ASyncCore.SelectableCB {
         public void select_cb (SelectionKey skey, Object user_data) {
             logger.debug ("select_cb");
+            logger.info ("select_cb");  //TODO
             if ((skey.readyOps () & skey.interestOps ()
                  & SelectionKey.OP_CONNECT) != 0) {
                 logger.debug ("op_connect");
+                logger.info ("op_connect");  //TODO
                 try {
                     if (channel.finishConnect ()) {
                         if (waiting.isEmpty ())
@@ -198,6 +200,7 @@
             if ((skey.readyOps () & skey.interestOps ()
                  & SelectionKey.OP_WRITE) != 0) {
                 logger.debug ("op_write");
+                logger.info ("op_write");  //TODO
                 while (true) {
                     if (write_buf.position () < write_buf.limit ()) {
                         if (logger.isDebugEnabled ()) {
@@ -209,7 +212,6 @@
                                         write_buf.limit ()
                                         - write_buf.position ()));
                         }
-
                         try { channel.write (write_buf); }
                         catch (IOException e) { 
                             try_next_gateway ();
@@ -287,6 +289,7 @@
             if ((skey.readyOps () & skey.interestOps ()
                  & SelectionKey.OP_READ) != 0) {
                 logger.debug ("op_read");
+                logger.info("op_read");  //TODO
                 while (true) {
                     int count = 0;
                     try { count = channel.read (read_buf); }
@@ -420,7 +423,7 @@
             gateways.addLast (new NodeId (
                         config_get_string (config, "gateway")));
         }
-        else { 
+        else {
             for (int i = 0; i < cnt; ++i) {
                 gateways.addLast (new NodeId (
                             config_get_string (config, "gateway_" + i)));
@@ -429,7 +432,7 @@
         last_gw = gateways.getLast ();
 
         if (sim_running) {
-            gnid = gateways.getFirst ();
+        	gnid = gateways.getFirst ();
             logger.info ("gid=" + gnid);
             gway_inst = (Gateway) Gateway.instances.get (gnid);
             if (gway_inst == null) {
@@ -438,7 +441,7 @@
             }
             simulator = Simulator.instance ();
         }
-        else {
+        else {        	
             try_next_gateway ();
         }
         SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");
diff -urN bamboo/src/bamboo/dht/Gateway.java bamboo1/src/bamboo/dht/Gateway.java
--- bamboo/src/bamboo/dht/Gateway.java	2006-01-24 01:58:31.000000000 +0200
+++ bamboo1/src/bamboo/dht/Gateway.java	2008-05-22 16:59:12.000000000 +0300
@@ -628,7 +628,7 @@
 
     public void init (ConfigDataIF config) throws Exception {
         super.init (config);
-
+        
         md = MessageDigest.getInstance ("SHA");
         allow_unauth_rm = config_get_boolean(config, "allow_unauth_rm");
         assert !allow_unauth_rm : "allow_unauth_rm no longer supported";
@@ -652,8 +652,9 @@
             acore.register_selectable (ssock_channel, OP_ACCEPT, accept_cb);
         }
 
-        acore.register_timer (0, new Runnable () { public void run() {
-                WebInterface www = WebInterface.instance (my_node_id);
+        acore.register_timer (0, new Runnable () { public void run() {                
+        	    WebInterface www = WebInterface.instance (my_node_id);
+        	    
                 if (www == null) {
                     logger.warn("no WebInterface stage; XML RPC disabled");
                 }
@@ -861,8 +862,10 @@
             BigInteger key = byte_array_to_big_int (key_bytes);
             ttl_sec = (ttl_sec > Dht.MAX_TTL_SEC) ? Dht.MAX_TTL_SEC : ttl_sec;
 
+            // is this availavble for IPv6? 
             String client_string = client.getAddress ().getHostAddress () + 
                     ":" + client.getPort ();
+            logger.info ("the client is:" + client_string);  //TODO
 
             Long start_ms = new Long (now_ms ());
 
diff -urN bamboo/src/bamboo/dht/PutGetTest.java bamboo1/src/bamboo/dht/PutGetTest.java
--- bamboo/src/bamboo/dht/PutGetTest.java	2005-03-02 04:25:13.000000000 +0200
+++ bamboo1/src/bamboo/dht/PutGetTest.java	2008-05-23 13:32:49.000000000 +0300
@@ -439,6 +439,7 @@
     public void init (ConfigDataIF config) throws Exception {
 	super.init (config);
         String put_log_path = config_get_string (config, "put_log_path");
+        logger.info("put_log_path is: " + put_log_path); //TODO
         if (put_log_path != null)
             recover (put_log_path);
         die_on_failure = config_get_boolean (config, "die_on_failure");
diff -urN bamboo/src/bamboo/dht/put_get_test_local.cfg~ bamboo1/src/bamboo/dht/put_get_test_local.cfg~
--- bamboo/src/bamboo/dht/put_get_test_local.cfg~	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/dht/put_get_test_local.cfg~	2008-03-05 16:09:17.000000000 +0200
@@ -0,0 +1,32 @@
+# $Id: put_get_test_local.cfg,v 1.5 2005/05/12 00:08:18 srhea Exp $
+
+<sandstorm>
+    <global>
+	<initargs>
+	    node_id localhost:3620
+	</initargs>
+    </global>
+
+    <stages>
+	<GatewayClient>
+	    class bamboo.dht.GatewayClient
+	    <initargs>
+		debug_level		0
+                gateway 129.237.161.194:3632
+	    </initargs>
+	</GatewayClient>
+
+	<PutGetTest>
+	    class bamboo.dht.PutGetTest
+	    <initargs>
+		debug_level		0
+                die_on_failure          false
+                storage_goal            10000000
+                mean_put_period_ms      3000
+                mean_get_period_ms      3000
+                client_stage_name       GatewayClient
+	    </initargs>
+	</PutGetTest>
+    </stages>
+</sandstorm>
+
diff -urN bamboo/src/bamboo/dht/RecurGetReq.java bamboo1/src/bamboo/dht/RecurGetReq.java
--- bamboo/src/bamboo/dht/RecurGetReq.java	2005-08-19 08:45:46.000000000 +0300
+++ bamboo1/src/bamboo/dht/RecurGetReq.java	2008-05-16 17:56:32.000000000 +0300
@@ -32,6 +32,7 @@
     public long seq;
     public NodeId client;
     public NodeId return_addr;
+    //public NodeId node_id;
 
     public boolean recordByteCount() { return true; }
     public String byteCountKey() { 
@@ -56,6 +57,7 @@
         seq = buffer.nextLong();
         client = new NodeId(buffer);
         return_addr = new NodeId(buffer);
+        //node_id = new NodeId(buffer);
     }
 
     public void serialize(OutputBuffer buffer) {
@@ -70,6 +72,7 @@
         buffer.add(seq);
         client.serialize(buffer);
         return_addr.serialize(buffer);
+        //node_id.serialize(buffer);
     }
 }
 
diff -urN bamboo/src/bamboo/dht/RecurGetResp.java bamboo1/src/bamboo/dht/RecurGetResp.java
--- bamboo/src/bamboo/dht/RecurGetResp.java	2005-08-19 08:45:46.000000000 +0300
+++ bamboo1/src/bamboo/dht/RecurGetResp.java	2008-05-16 17:43:27.000000000 +0300
@@ -47,10 +47,10 @@
         return client + " 0x" + Integer.toHexString(maxvals & 0xffff0000);
     }
 
-    public RecurGetResp(NodeId dest, long q, Set<NodeId> r, Set<NodeId> s,
+    public RecurGetResp(NodeId dest, NodeId dest_id, NodeId source_id, long q, Set<NodeId> r, Set<NodeId> s,
             LinkedList<Pair<Key,ByteBuffer>> v, boolean a,
             NodeId t, int m, NodeId c) {
-        super(dest, false);
+        super(dest, dest_id, source_id, false);
         seq = q; replicas = r; synced = s; values = v;
         allRead = a; thisReplica = t; maxvals = m; client = c; 
     }
diff -urN bamboo/src/bamboo/dmgr/DataManager.java bamboo1/src/bamboo/dmgr/DataManager.java
--- bamboo/src/bamboo/dmgr/DataManager.java	2005-07-09 00:39:50.000000000 +0300
+++ bamboo1/src/bamboo/dmgr/DataManager.java	2008-05-19 17:10:31.000000000 +0300
@@ -34,6 +34,8 @@
 import bamboo.api.BambooRouterAppRegResp;
 import bamboo.db.StorageManager;
 import bamboo.lss.ASyncCore;
+import bamboo.lss.Network;
+import bamboo.router.NeighborInfo;
 import bamboo.util.GuidTools;
 import java.net.InetAddress;
 import ostore.util.ByteUtils;
@@ -76,6 +78,7 @@
 
     protected Random rand;
     protected BigInteger my_guid;
+    protected Network network;
     protected boolean initialized;
     protected LinkedList wait_q = new LinkedList ();
     protected BambooNeighborInfo [] preds;
@@ -203,8 +206,11 @@
     public void handleEvent (QueueElementIF item) {
 	if (logger.isDebugEnabled ())
 	    logger.debug (" got " + item);
+	
+	
 
 	if (item instanceof StagesInitializedSignal) {
+		logger.info("DataManager starts work" + item);
 	    dispatch (new BambooRouterAppRegReq (
 			app_id, true, false, false, my_sink));
 	}
@@ -288,7 +294,26 @@
         my_guid = resp.node_guid;
         MODULUS = resp.modulus;
         MAX_GUID = MODULUS.subtract (BigInteger.ONE);
-        my_neighbor_info = new BambooNeighborInfo (my_node_id, my_guid, 0.0);
+        
+        network = Network.instance(my_node_id);
+        
+        if (Network.instances.size() > 1) {
+        	multiNeighbor = true;
+        	Set<InetSocketAddress> n = Network.instances.keySet();
+        	Iterator i = Network.instances.keySet ().iterator ();
+             while (i.hasNext ()) {
+            	 Network n_id = Network.instances.get(i.next());
+            	 BambooNeighborInfo my_neighbor_info = new BambooNeighborInfo (n_id.networkid, my_node_id, my_guid, 0.0);
+                 if (! my_neighbor_infos.contains (my_neighbor_info))
+                	 my_neighbor_infos.addLast (my_neighbor_info);
+             }    	
+        } else {
+        	logger.info("the network of router is: " + network);
+        	my_neighbor_info = new BambooNeighborInfo (network.networkid, my_node_id, my_guid, 0.0);
+        	my_neighbor_infos.addLast(my_neighbor_info);    	
+        }
+        
+        //my_neighbor_info = new BambooNeighborInfo (my_node_id, my_node_id, my_guid, 0.0);
         rand = new Random (my_guid.longValue ());
         initialized = true;
 
@@ -301,6 +326,7 @@
                 5000 + rand.nextInt (5000));
         next_check_put_or_remove_acks ();
     }
+    
 
     protected boolean in_leaf_set_range (BigInteger q) {
 	return (resp_low == null) ||
@@ -477,7 +503,8 @@
             for (int i = pred_max; i >= 0; --i) {
                 if (logger.isDebugEnabled ())
                     logger.debug ("sending to " + preds [i].node_id);
-                pa.add (preds [i].node_id);
+                NeighborInfo n = new NeighborInfo(preds [i].peer, preds [i].node_id, my_guid);
+                pa.add (n);
             }
         }
         if (succs != null) {
@@ -490,7 +517,8 @@
             for (int i = 0; i < succ_max; ++i) {
                 if (logger.isDebugEnabled ())
                     logger.debug ("sending to " + succs [i].node_id);
-                pa.add (succs [i].node_id);
+                NeighborInfo n = new NeighborInfo(succs [i].peer, succs [i].node_id, my_guid);
+                pa.add (n);
             }
         }
 
@@ -536,11 +564,13 @@
 
         if (pa != null) {
             Iterator i = pa.iterator ();
-            while (i.hasNext ())
-                dispatch (new PutOrRemoveMsg ((NodeId) i.next (), e.time_usec,
+            while (i.hasNext ()){
+            	NeighborInfo n = (NeighborInfo) i.next();
+                dispatch (new PutOrRemoveMsg (n.peer, n.node_id, my_node_id, e.time_usec,
 			  e.ttl_sec, e.guid, e.value, e.put,
 			  e.client_id, seq.longValue (), e.value_hash, 
                           e.secret_hash));
+            }
         }
     }
 
@@ -589,7 +619,8 @@
                     put_or_remove_acks.put (seq, p);
                     Iterator j = p.unacked.iterator ();
                     while (j.hasNext ()) {
-                        dispatch (new PutOrRemoveMsg ((NodeId) j.next (),
+                    	NeighborInfo n = (NeighborInfo) j.next ();
+                        dispatch (new PutOrRemoveMsg (n.peer, n.node_id, my_node_id, 
                                     p.event.time_usec, p.event.ttl_sec, 
                                     p.event.guid, p.event.value, p.event.put, 
                                     p.event.client_id, seq.longValue (), 
@@ -660,7 +691,7 @@
     protected void handle_put_resp (StorageManager.PutResp resp) {
         if (resp.user_data instanceof PutOrRemoveMsg) {
             PutOrRemoveMsg msg = (PutOrRemoveMsg) resp.user_data;
-            dispatch (new PutOrRemoveAck (msg.peer, msg.seq));
+            dispatch (new PutOrRemoveAck (msg.peer, msg.source_id, my_node_id, msg.seq));
         }
         else if (resp.user_data instanceof Long) {
             Long seq = (Long) resp.user_data;
@@ -1277,8 +1308,8 @@
         ae_state.fetch_node_seq = next_fetch_seq++;
         ae_state.last_activity_ms = timer_ms ();
 
-        FetchMerkleTreeNodeReq req = new FetchMerkleTreeNodeReq (
-                ae_state.ni.node_id, my_guid, ae_state.low_guid,
+        FetchMerkleTreeNodeReq req = new FetchMerkleTreeNodeReq (ae_state.ni.peer, 
+                ae_state.ni.node_id, my_node_id, my_guid, ae_state.low_guid,
                 ae_state.high_guid, expansion, ae_state.current_level,
                 ae_state.current_low_time, node.hash (),
                 ae_state.fetch_node_seq);
@@ -1360,7 +1391,7 @@
 
         if ((resp.children == null) || node.children_are_leaves ()) {
             ae_state.fetch_keys_seq = next_fetch_keys_seq++;
-            FetchKeysReq req = new FetchKeysReq (ae_state.ni.node_id,
+            FetchKeysReq req = new FetchKeysReq (ae_state.ni.peer, ae_state.ni.node_id, my_node_id,  
                     ae_state.low_guid, ae_state.high_guid,
                     node.range_low (), node.range_high (),
                     ae_state.fetch_keys_seq);
@@ -1468,7 +1499,7 @@
                 // We don't have this data item, so we need to get it.
 
                 ae_state.fetched_data.add (resp.key);
-                dispatch (new FetchDataReq (ae_state.ni.node_id, resp.key));
+                dispatch (new FetchDataReq (ae_state.ni.peer, ae_state.ni.node_id, my_node_id, resp.key));
             }
             else {
                 // We already have this data item.
@@ -1631,7 +1662,7 @@
 
 	if (preds == null)
 	    return false;
-        BambooNeighborInfo other = new BambooNeighborInfo (peer, peer_guid, 0.0);
+        BambooNeighborInfo other = new BambooNeighborInfo (peer, peer, peer_guid, 0.0);
         GuidRange range = new GuidRange (low, high);
         SortedSet choices = calc_shared_dbs (other);
         if (choices != null) {
@@ -1648,13 +1679,13 @@
             final FetchMerkleTreeNodeReq req) {
 
         if (! valid_db (req.peer, req.peer_guid, req.low_guid, req.high_guid)) {
-            dispatch (new FetchMerkleTreeNodeReject (req.peer,
+            dispatch (new FetchMerkleTreeNodeReject (req.peer,req.source_id, my_node_id,   
                         FetchMerkleTreeNodeReject.BAD_GUID_RANGE, req.seq));
             return;
         }
 
         if (req.expansion != expansion) {
-            dispatch (new FetchMerkleTreeNodeReject (req.peer,
+            dispatch (new FetchMerkleTreeNodeReject (req.peer, req.source_id, my_node_id, 
                         FetchMerkleTreeNodeReject.BAD_EXPANSION, req.seq));
             return;
         }
@@ -1677,7 +1708,7 @@
 
         MerkleTree.Node node = tree.node (req.level, req.low_time);
         if (node == null) {
-            dispatch (new FetchMerkleTreeNodeReject (req.peer,
+            dispatch (new FetchMerkleTreeNodeReject (req.peer, req.source_id, my_node_id, 
                         FetchMerkleTreeNodeReject.NO_SUCH_NODE, req.seq));
             return;
         }
@@ -1695,7 +1726,7 @@
         }
 
         FetchMerkleTreeNodeResp resp = new FetchMerkleTreeNodeResp (
-                req.peer, node.hash (), leaf, children, req.seq);
+                req.peer, req.source_id, my_node_id, node.hash (), leaf, children, req.seq);
         dispatch (resp);
     }
 
@@ -1740,7 +1771,7 @@
 
             // Send the response.
 
-            dispatch (new FetchKeysResp (req.peer, keys, req.seq));
+            dispatch (new FetchKeysResp (req.peer, req.source_id, my_node_id, keys, req.seq));
         }
         else {
 
@@ -1758,7 +1789,7 @@
     protected void handle_fetch_data_req_have_data (
             StorageManager.GetByKeyResp resp) {
         FetchDataReq req = (FetchDataReq) resp.user_data;
-        dispatch (new FetchDataResp (req.peer, req.key, resp.data));
+        dispatch (new FetchDataResp (req.peer, req.source_id, my_node_id, req.key, resp.data));
     }
 
     /////////////////////////////////////////////////////////////////////////
@@ -1769,11 +1800,13 @@
     /////////////////////////////////////////////////////////////////////////
 
     protected BambooNeighborInfo my_neighbor_info;
-
+    protected LinkedList<BambooNeighborInfo> my_neighbor_infos = new LinkedList<BambooNeighborInfo>();  //TODO
+    public boolean multiNeighbor = false;  //TODO
+    
     protected void handle_replica_set_req (ReplicaSetReq req) {
-	NodeId [] result = null;
+    	NeighborInfo [] result = null;
 	if (preds == null) {
-	    NodeId [] x = {my_node_id};
+		NeighborInfo [] x = {new NeighborInfo(network.networkid, my_node_id, my_guid) };
 	    result = x;
 	}
 	else {
@@ -1794,7 +1827,7 @@
 		// If the guid precedes us, eliminate one of our successors
 		// and vice versa.
 
-		result = new NodeId [unique_count];
+		result = new NeighborInfo [unique_count];
 		pred_max = preds.length - 1;
 		if (! in_range_mod (preds [0].guid, my_guid, req.guid))
 		    --pred_max;
@@ -1807,7 +1840,7 @@
 		// nodes.  Take half from the predecessors and half from
 		// the successors.
 
-		result = new NodeId [unique_count + 1];
+		result = new NeighborInfo [unique_count + 1];
 		pred_max = (unique_count - 1) / 2;
 	    }
 
@@ -1815,21 +1848,21 @@
 
 	    for (int i = pred_max; i >= 0; --i) {
 		if (logger.isDebugEnabled ()) logger.debug (
-			"j=" + j + " adding " + preds [i]);
-		result [j++] = preds [i].node_id;
+			"j=" + j + " adding " + preds [i]);		
+		result [j++].set(preds [i].peer, preds [i].node_id, preds [i].guid);			
 	    }
 	    if (logger.isDebugEnabled ()) logger.debug (
-		    "j=" + j + " adding " + my_neighbor_info);
-	    result [j++] = my_node_id;
-
+		    "j=" + j + " adding " + my_neighbor_info);{
+		result [j++].set(my_node_id, my_node_id, my_guid);			
+		    }
 	    for (int i = 0; j < result.length; ++i) {
 		if (logger.isDebugEnabled ()) logger.debug (
 			"j=" + j + " adding " + succs [i]);
-		result [j++] = succs [i].node_id;
+		result [j++].set(succs [i].peer, succs [i].node_id, succs [i].guid);
 	    }
 	}
 
-	dispatch (new ReplicaSetResp (req.return_address, req.nonce, result));
+	dispatch (new ReplicaSetResp (req.return_address, req.node_id, my_node_id, req.nonce, result));
     }
 
     /////////////////////// CLIENT-SIDE DISCARD STATE /////////////////////////
@@ -1917,7 +1950,7 @@
 
             dispatch (new BambooRouteInit (ds.key.guid, app_id,
                         false /* no upcalls */, iterative_routing,
-                        new ReplicaSetReq (my_node_id, ds.key.guid, ds.nonce)));
+                        new ReplicaSetReq (my_node_id, my_node_id, ds.key.guid, ds.nonce)));
         }
     }
 
@@ -1941,7 +1974,8 @@
         }
 
         PutOrRemoveMsg outb = new PutOrRemoveMsg (
-                resp.replica_set [which], ds.key.time_usec, ds.key.ttl_sec,
+                resp.replica_set [which].peer, resp.replica_set [which].node_id, my_node_id, 
+                ds.key.time_usec, ds.key.ttl_sec,
 		ds.key.guid, ds.data, ds.key.put, ds.key.client_id,
                 ds.nonce, ds.key.data_hash, ds.key.secret_hash);
 
diff -urN bamboo/src/bamboo/dmgr/FetchDataReq.java bamboo1/src/bamboo/dmgr/FetchDataReq.java
--- bamboo/src/bamboo/dmgr/FetchDataReq.java	2004-04-23 00:17:19.000000000 +0300
+++ bamboo1/src/bamboo/dmgr/FetchDataReq.java	2008-05-15 16:26:52.000000000 +0300
@@ -23,8 +23,8 @@
 
     public StorageManager.Key key;
 
-    public FetchDataReq (NodeId dest, StorageManager.Key k) {
-	super (dest, false);
+    public FetchDataReq (NodeId dest, NodeId dest_id, NodeId source_id, StorageManager.Key k) {
+	super (dest, dest_id, source_id, false);
         key = k;
     }
 
diff -urN bamboo/src/bamboo/dmgr/FetchDataResp.java bamboo1/src/bamboo/dmgr/FetchDataResp.java
--- bamboo/src/bamboo/dmgr/FetchDataResp.java	2004-04-23 00:17:19.000000000 +0300
+++ bamboo1/src/bamboo/dmgr/FetchDataResp.java	2008-05-15 16:26:24.000000000 +0300
@@ -25,8 +25,8 @@
     public StorageManager.Key key;
     public ByteBuffer data;
 
-    public FetchDataResp (NodeId dest, StorageManager.Key k, ByteBuffer d) {
-	super (dest, false);
+    public FetchDataResp (NodeId dest, NodeId dest_id, NodeId source_id, StorageManager.Key k, ByteBuffer d) {
+	super (dest, dest_id, source_id, false);
         key = k; data = d;
     }
 
diff -urN bamboo/src/bamboo/dmgr/FetchKeysReq.java bamboo1/src/bamboo/dmgr/FetchKeysReq.java
--- bamboo/src/bamboo/dmgr/FetchKeysReq.java	2004-04-20 22:23:17.000000000 +0300
+++ bamboo1/src/bamboo/dmgr/FetchKeysReq.java	2008-05-15 16:25:49.000000000 +0300
@@ -35,9 +35,9 @@
      */
     public long seq;
 
-    public FetchKeysReq (NodeId dest, BigInteger lg, BigInteger hg,
+    public FetchKeysReq (NodeId dest, NodeId dest_id, NodeId source_id, BigInteger lg, BigInteger hg,
 	    long lt, long ht, long s) {
-	super (dest, false);
+	super (dest, dest_id, source_id, false);
         low_guid = lg; high_guid = hg; low_time = lt; high_time = ht; seq = s;
     }
 
diff -urN bamboo/src/bamboo/dmgr/FetchKeysResp.java bamboo1/src/bamboo/dmgr/FetchKeysResp.java
--- bamboo/src/bamboo/dmgr/FetchKeysResp.java	2004-05-18 22:11:32.000000000 +0300
+++ bamboo1/src/bamboo/dmgr/FetchKeysResp.java	2008-05-15 16:25:11.000000000 +0300
@@ -33,8 +33,8 @@
      */
     public long seq;
 
-    public FetchKeysResp (NodeId dest, LinkedList k, long s) {
-	super (dest, false);
+    public FetchKeysResp (NodeId dest, NodeId dest_id, NodeId source_id, LinkedList k, long s) {
+	super (dest, dest_id, source_id, false);
         keys = k; seq = s;
     }
 
diff -urN bamboo/src/bamboo/dmgr/FetchMerkleTreeNodeReject.java bamboo1/src/bamboo/dmgr/FetchMerkleTreeNodeReject.java
--- bamboo/src/bamboo/dmgr/FetchMerkleTreeNodeReject.java	2004-04-20 22:23:17.000000000 +0300
+++ bamboo1/src/bamboo/dmgr/FetchMerkleTreeNodeReject.java	2008-05-15 16:17:40.000000000 +0300
@@ -38,8 +38,8 @@
      */
     public long seq;
 
-    public FetchMerkleTreeNodeReject (NodeId dest, int r, long s) {
-	super (dest, false);
+    public FetchMerkleTreeNodeReject (NodeId dest, NodeId dest_id, NodeId source_id, int r, long s) {
+	super (dest, dest_id, source_id, false);
         reason = r; seq = s;
     }
 
diff -urN bamboo/src/bamboo/dmgr/FetchMerkleTreeNodeReq.java bamboo1/src/bamboo/dmgr/FetchMerkleTreeNodeReq.java
--- bamboo/src/bamboo/dmgr/FetchMerkleTreeNodeReq.java	2004-02-10 23:24:04.000000000 +0200
+++ bamboo1/src/bamboo/dmgr/FetchMerkleTreeNodeReq.java	2008-05-15 16:12:35.000000000 +0300
@@ -66,9 +66,9 @@
      */
     public long seq;
 
-    public FetchMerkleTreeNodeReq (NodeId dest, BigInteger pg, BigInteger lg, 
+    public FetchMerkleTreeNodeReq (NodeId dest, NodeId dest_id, NodeId source_id, BigInteger pg, BigInteger lg, 
             BigInteger hg, int exp, int lv, long lt, byte [] eh, long s) {
-	super (dest, false);
+	super (dest, dest_id, source_id, false);
         peer_guid = pg; low_guid = lg; high_guid = hg; expansion = exp; 
         level = lv; low_time = lt; expected_hash = eh; seq = s;
     }
diff -urN bamboo/src/bamboo/dmgr/FetchMerkleTreeNodeResp.java bamboo1/src/bamboo/dmgr/FetchMerkleTreeNodeResp.java
--- bamboo/src/bamboo/dmgr/FetchMerkleTreeNodeResp.java	2004-02-10 23:24:04.000000000 +0200
+++ bamboo1/src/bamboo/dmgr/FetchMerkleTreeNodeResp.java	2008-05-15 16:21:08.000000000 +0300
@@ -69,9 +69,9 @@
      */
     public long seq;
 
-    public FetchMerkleTreeNodeResp (NodeId dest, byte [] h, boolean l, 
+    public FetchMerkleTreeNodeResp (NodeId dest, NodeId dest_id, NodeId source_id, byte [] h, boolean l, 
             LinkedList c, long s) {
-	super (dest, false);
+	super (dest, dest_id, source_id, false);
         hash = h; leaf = l; children = c; seq = s;
     }
 
diff -urN bamboo/src/bamboo/dmgr/PutOrRemoveAck.java bamboo1/src/bamboo/dmgr/PutOrRemoveAck.java
--- bamboo/src/bamboo/dmgr/PutOrRemoveAck.java	2004-08-04 22:23:27.000000000 +0300
+++ bamboo1/src/bamboo/dmgr/PutOrRemoveAck.java	2008-05-15 16:23:31.000000000 +0300
@@ -25,8 +25,8 @@
 
     public long seq;
 
-    public PutOrRemoveAck (NodeId dest, long s) {
-	super (dest, false);  seq = s;
+    public PutOrRemoveAck (NodeId dest, NodeId dest_id, NodeId source_id, long s) {
+	super (dest, dest_id, source_id, false);  seq = s;
     }
 
     public PutOrRemoveAck (InputBuffer buffer) throws QSException {
diff -urN bamboo/src/bamboo/dmgr/PutOrRemoveMsg.java bamboo1/src/bamboo/dmgr/PutOrRemoveMsg.java
--- bamboo/src/bamboo/dmgr/PutOrRemoveMsg.java	2005-05-12 03:08:19.000000000 +0300
+++ bamboo1/src/bamboo/dmgr/PutOrRemoveMsg.java	2008-05-15 16:22:40.000000000 +0300
@@ -38,10 +38,10 @@
     public byte [] value_hash;
     public byte [] secret_hash;
 
-    public PutOrRemoveMsg (NodeId dest, long t, int tt, BigInteger g,
+    public PutOrRemoveMsg (NodeId dest, NodeId dest_id, NodeId source_id, long t, int tt, BigInteger g,
 			   ByteBuffer v, boolean p, InetAddress c, long s,
                            byte [] vh, byte [] sh) {
-	super (dest, false);
+	super (dest, dest_id, source_id, false);
 	time_usec = t; ttl_sec = tt; guid = g; value = v; put = p; seq = s;
         client_id = c; value_hash = vh; secret_hash = sh;
     }
diff -urN bamboo/src/bamboo/dmgr/ReplicaSetReq.java bamboo1/src/bamboo/dmgr/ReplicaSetReq.java
--- bamboo/src/bamboo/dmgr/ReplicaSetReq.java	2004-08-04 22:23:27.000000000 +0300
+++ bamboo1/src/bamboo/dmgr/ReplicaSetReq.java	2008-05-16 17:23:12.000000000 +0300
@@ -27,21 +27,24 @@
 public class ReplicaSetReq implements QuickSerializable {
 
     public NodeId return_address;
+    public NodeId node_id;
     public BigInteger guid;
     public long nonce;
 
-    public ReplicaSetReq (NodeId n, BigInteger g, long x) { 
-	return_address = n; guid = g; nonce = x; 
+    public ReplicaSetReq (NodeId n, NodeId id, BigInteger g, long x) { 
+	return_address = n; node_id = id; guid = g; nonce = x; 
     }
 
     public ReplicaSetReq (InputBuffer buffer) throws QSException { 
 	return_address = new NodeId (buffer);
+	node_id = new NodeId (buffer);
 	guid = buffer.nextBigInteger ();
 	nonce = buffer.nextLong ();
     }
 
     public void serialize (OutputBuffer buffer) {
 	return_address.serialize (buffer);
+	node_id.serialize (buffer);
 	buffer.add (guid);
 	buffer.add (nonce);
     }
@@ -49,13 +52,15 @@
     public Object clone () throws CloneNotSupportedException {
         ReplicaSetReq result = (ReplicaSetReq) super.clone ();
         result.return_address = return_address;
+        result.node_id = node_id;
         result.guid = guid;
         result.nonce = nonce;
         return result;
     }
 
     public String toString () {
-	return "(ReplicaSetReq return_address=" + return_address + 
+	return "(ReplicaSetReq return_address=" + return_address  +
+		", my_node_id=" + node_id + 
 	    " guid=" + GuidTools.guid_to_string (guid) + 
 	    " nonce=" + nonce + ")";
     }
diff -urN bamboo/src/bamboo/dmgr/ReplicaSetResp.java bamboo1/src/bamboo/dmgr/ReplicaSetResp.java
--- bamboo/src/bamboo/dmgr/ReplicaSetResp.java	2004-05-18 22:12:11.000000000 +0300
+++ bamboo1/src/bamboo/dmgr/ReplicaSetResp.java	2008-05-16 16:48:06.000000000 +0300
@@ -6,6 +6,7 @@
  */
 
 package bamboo.dmgr;
+import bamboo.router.NeighborInfo;
 import java.math.BigInteger;
 import java.util.Iterator;
 import java.util.LinkedList;
@@ -24,10 +25,10 @@
 public class ReplicaSetResp extends NetworkMessage {
 
     public long nonce;
-    public NodeId [] replica_set;
+    public NeighborInfo [] replica_set;
 
-    public ReplicaSetResp (NodeId dest, long n, NodeId [] r) {
-        super (dest, false); nonce = n; replica_set = r;
+    public ReplicaSetResp (NodeId dest, NodeId dest_id, NodeId source_id, long n, NeighborInfo [] r) {
+        super (dest, dest_id, source_id, false); nonce = n; replica_set = r;
     }
 
     public ReplicaSetResp (InputBuffer buffer) throws QSException {
@@ -35,9 +36,9 @@
 	nonce = buffer.nextLong ();
 	int n = buffer.nextInt ();
         if (n <= 0) throw new QSException ("replica_set empty");
-	replica_set = new NodeId [n];
+	replica_set = new NeighborInfo [n];
 	for (int i = 0; i < n; ++i) 
-	    replica_set [i] = new NodeId (buffer);
+	    replica_set [i] = new NeighborInfo (buffer);
     }
 
     public void serialize (OutputBuffer buffer) {
diff -urN bamboo/src/bamboo/lss/ASyncCoreImpl.java bamboo1/src/bamboo/lss/ASyncCoreImpl.java
--- bamboo/src/bamboo/lss/ASyncCoreImpl.java	2005-06-04 21:08:29.000000000 +0300
+++ bamboo1/src/bamboo/lss/ASyncCoreImpl.java	2008-06-12 10:43:28.000000000 +0300
@@ -74,7 +74,8 @@
     public void registerSelectable (
 	    SelectableChannel channel, int interest_ops, Runnable cb) 
             throws ClosedChannelException {
-
+    	
+    	logger.info ("ASyncCore.register_selectable");//TODO
 	if (logger.isDebugEnabled ())
             logger.debug ("ASyncCore.register_selectable");
 	SelectionKey skey = channel.keyFor (selector);
@@ -100,7 +101,9 @@
     public void unregisterSelectable (
 	    SelectableChannel channel, int interest_ops) 
         throws ClosedChannelException {
-
+    	
+    	//logger.info ("ASyncCore.register_selectable in unregisterselectable function");//TODO
+    	
 	if (logger.isDebugEnabled ())
             logger.debug ("ASyncCore.register_selectable");
 	SelectionKey skey = channel.keyFor (selector);
@@ -142,6 +145,7 @@
     private Object register_timer_impl (
 	    long time_ms, Object cb, Object user_data) {
 
+    	//logger.info ("ASyncCore.register_timer");//TODO
 	if (logger.isDebugEnabled ()) logger.debug ("ASyncCore.register_timer");
 	TimerInfo result = new TimerInfo (cb, user_data);
 
@@ -162,7 +166,7 @@
 
         if (wakeup)
             selector.wakeup ();
-
+      
 	if (logger.isDebugEnabled ()) logger.debug ("set timer time_ms=" +
 		time_ms + " ti=" + result);
 	return result;
@@ -215,12 +219,15 @@
             synchronized(watchdogLock) {
                 watchdogFlag = false;
             }
+            //logger.info("loop loop loop \n");
             registerTimer(watchdogResetPeriod, this);
         }
     }
 
+    // similar to the select() in the Selector class. luxiaopeng 
     public void asyncMain () {
-
+    	
+    	logger.info ("async_main called");//TODO
         if (logger.isDebugEnabled ()) logger.debug ("async_main called");
 
         if (useWatchdog) {
@@ -252,6 +259,8 @@
 
 	    long now_ms = nowMillis();
 	    if (logger.isDebugEnabled ()) logger.debug ("now_ms=" + now_ms);
+	    //logger.info ("now_ms=" + now_ms);
+	    //logger.info ("timers=" + timers);
 	    // if (logger.isDebugEnabled ()) logger.debug ("timers=" + timers);
 
 	    try {
@@ -299,7 +308,8 @@
                     System.exit (1);
                 }
 	    }
-
+           
+	        
             if (logger.isDebugEnabled ()) logger.debug ("select returned");
 
 	    // Process the ready selectables.
@@ -331,7 +341,7 @@
             }
 
 	    // Process the ready timers.
-
+	    
 	    while (true) {
 		TimerInfo info = null;
                 synchronized (timers) {
@@ -356,6 +366,7 @@
                 else
                     ((Runnable) info.cb).run();
 	    }
+	    
 	}
     }
 
diff -urN bamboo/src/bamboo/lss/DelayedHelloWorld.java~ bamboo1/src/bamboo/lss/DelayedHelloWorld.java~
--- bamboo/src/bamboo/lss/DelayedHelloWorld.java~	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/lss/DelayedHelloWorld.java~	2008-01-21 16:17:59.000000000 +0200
@@ -0,0 +1,555 @@
+/*
+ * Copyright (c) 2001-2003 Regents of the University of California.
+ * All rights reserved.
+ *
+ * See the file LICENSE included in this distribution for details.
+ */
+
+package bamboo.lss;
+import java.io.IOException;
+import java.nio.channels.Selector;
+import java.nio.channels.SelectionKey;
+import java.nio.channels.SelectableChannel;
+import java.nio.channels.ClosedChannelException;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import org.apache.log4j.ConsoleAppender;
+import org.apache.log4j.Logger;
+import org.apache.log4j.Level;
+import org.apache.log4j.PatternLayout;
+import org.apache.log4j.PropertyConfigurator;
+import org.apache.log4j.helpers.NullEnumeration;
+import static bamboo.util.Curry.*;
+import static java.nio.channels.SelectionKey.*;
+import bamboo.util.PriorityQueue;
+import bamboo.util.GetTimeOfDayCC;
+
+/**
+ * A main-loop largely inspired by David Mazieres' libasync, but using
+ * java.nio.
+ *
+ * <p><b>A note about threading:</b> This system is designed to have one
+ * principal thread.  This thread will execute the asyncMain function,
+ * and the various callbacks will be called from it.  If you want to run
+ * another thread, you can pass events to it through any synchronized
+ * queue.  To pass events back to the main thread, call registerTimer
+ * with a delay of 0.  Both registerTimer and cancelTimer are properly
+ * synchronized for this purpose.
+ *
+ * @author Sean C. Rhea
+ * @version $Id: ASyncCore.java,v 1.30 2005/04/27 20:51:10 srhea Exp $
+ */
+public abstract class ASyncCore {
+
+    //////////////////////////////////////////////////////////////////
+    //                        Current Interface                     //
+    //  These functions comprise the latest interface.  The other   //
+    //  functions below them are for backward compatibility only.   //
+    //////////////////////////////////////////////////////////////////
+
+    public abstract void registerSelectable (
+	    SelectableChannel channel, int interestOps, Runnable callback) 
+            throws ClosedChannelException;
+
+    public abstract void unregisterSelectable (
+	    SelectableChannel channel, int interestOps) 
+            throws ClosedChannelException;
+
+    public abstract void unregisterSelectable (SelectableChannel channel);
+
+    public abstract long nowMillis ();
+    
+    public abstract long timerMillis();
+
+    public abstract void asyncMain();
+
+    /**
+     * Register a function to be called sometime later than
+     * <code>delayMillis</code> milliseconds from now.  This function is safe
+     * to call from any thread.  The return value may be used as an argument
+     * to cancelTimer, but is otherwise opaque to the user.
+     */
+    public abstract Object registerTimer(long delayMillis, Runnable cb);
+
+    public abstract void cancelTimer (Object token);
+
+    //////////////////////////////////////////////////////////////////
+    //                         Older Interface                      //
+    //////////////////////////////////////////////////////////////////
+
+    public static interface SelectableCB {
+	void select_cb (SelectionKey key, Object user_data);
+    }
+
+    public static interface TimerCB {
+	void timer_cb (Object user_data);
+    }
+
+    public abstract SelectionKey register_selectable (
+	    SelectableChannel channel, int interest_ops,
+	    SelectableCB cb, Object user_data) throws ClosedChannelException;
+
+    public abstract void unregister_selectable (SelectionKey skey);
+
+    //////////////////////////////////////////////////////////////////
+    //            These functions are also part of the older        //
+    //           interface, but they can be implemented using       //
+    //              the new one, so they're not abstract.           //
+    //////////////////////////////////////////////////////////////////
+
+    public Object register_timer (
+	    long time_ms, final TimerCB cb, final Object user_data) {
+        return registerTimer(time_ms, new Runnable() { 
+                public void run() { cb.timer_cb(user_data); }});
+    }
+
+    public Object register_timer(long delayMillis, Runnable cb) {
+        return registerTimer(delayMillis, cb);
+    }
+
+    public void register_selectable (
+	    SelectableChannel channel, int interestOps, Runnable callback) 
+            throws ClosedChannelException {
+        registerSelectable(channel, interestOps, callback);
+    }
+
+    public void unregister_selectable (
+	    SelectableChannel channel, int interestOps) 
+            throws ClosedChannelException {
+        unregisterSelectable(channel, interestOps);
+    }
+
+    public void unregister_selectable (SelectableChannel channel) {
+        unregisterSelectable(channel);
+    }
+
+    public void cancel_timer (Object token) { cancelTimer(token); }
+
+    public void async_main () { asyncMain(); }
+}
+
+/*
+ * Copyright (c) 2001-2003 Regents of the University of California.
+ * All rights reserved.
+ *
+ * See the file LICENSE included in this distribution for details.
+ */
+
+
+
+/**
+ * A main-loop largely inspired by David Mazieres' libasync, but using
+ * java.nio.
+ *
+ * <b>A note about threading:</b> This system is designed to have one
+ * principal thread.  This thread will execute the main function, and the
+ * various callbacks (SelectableCBs and TimerCBs) will be called from it.  If
+ * you want to run another thread, you can pass events to it through any
+ * synchronized queue.  To pass events back to the main thread, call
+ * register_timer with a time of 0.  Both register_timer and cancel_timer are
+ * properly synchronized for this purpose.
+ *
+ * @author Sean C. Rhea
+ * @version $Id: ASyncCoreImpl.java,v 1.2 2005/06/04 18:08:29 srhea Exp $
+ */
+public class ASyncCoreImpl extends ASyncCore {
+
+    protected Logger logger;
+
+    public ASyncCoreImpl () throws IOException {
+	selector = Selector.open ();
+        if (Logger.getRoot ().getAllAppenders () instanceof NullEnumeration) {
+            PatternLayout pl = new PatternLayout ("%c: %m\n");
+            ConsoleAppender ca = new ConsoleAppender (pl);
+            Logger.getRoot ().addAppender (ca);
+            Logger.getRoot ().setLevel (Level.INFO);
+        }
+        logger = Logger.getLogger (getClass ());
+    }
+
+    public SelectionKey register_selectable (
+	    SelectableChannel channel, int interest_ops,
+	    SelectableCB cb, Object user_data) throws ClosedChannelException {
+
+	if (logger.isDebugEnabled ())
+            logger.debug ("ASyncCore.register_selectable");
+	SelectionKey skey = channel.register (selector, interest_ops);
+	selectable_info.put (channel, new SelectableInfo (cb, user_data));
+	return skey;
+    }
+
+    public void unregister_selectable (SelectionKey skey) {
+	selectable_info.remove (skey.channel ());
+        skey.cancel ();
+    }
+
+    public void registerSelectable (
+	    SelectableChannel channel, int interest_ops, Runnable cb) 
+            throws ClosedChannelException {
+
+	if (logger.isDebugEnabled ())
+            logger.debug ("ASyncCore.register_selectable");
+	SelectionKey skey = channel.keyFor (selector);
+        if (skey == null)
+            skey = channel.register (selector, interest_ops);
+        else
+            skey.interestOps (skey.interestOps () | interest_ops);
+        SelectableInfo si = (SelectableInfo) selectable_info.get (channel);
+        if (si == null) {
+            si = new SelectableInfo ();
+            selectable_info.put (channel, si);
+        }
+        if ((interest_ops & SelectionKey.OP_ACCEPT) != 0)
+            si.accept_cb = cb;
+        if ((interest_ops & SelectionKey.OP_CONNECT) != 0)
+            si.connect_cb = cb;
+        if ((interest_ops & SelectionKey.OP_READ) != 0)
+            si.read_cb = cb;
+        if ((interest_ops & SelectionKey.OP_WRITE) != 0)
+            si.write_cb = cb;
+    }
+
+    public void unregisterSelectable (
+	    SelectableChannel channel, int interest_ops) 
+        throws ClosedChannelException {
+
+	if (logger.isDebugEnabled ())
+            logger.debug ("ASyncCore.register_selectable");
+	SelectionKey skey = channel.keyFor (selector);
+        skey.interestOps (skey.interestOps () & ~interest_ops);
+        SelectableInfo si = (SelectableInfo) selectable_info.get (channel);
+        if ((interest_ops & SelectionKey.OP_ACCEPT) != 0)
+            si.accept_cb = null;
+        if ((interest_ops & SelectionKey.OP_CONNECT) != 0)
+            si.connect_cb = null;
+        if ((interest_ops & SelectionKey.OP_READ) != 0)
+            si.read_cb = null;
+        if ((interest_ops & SelectionKey.OP_WRITE) != 0)
+            si.write_cb = null;
+        if (skey.interestOps () == 0)
+            selectable_info.remove (channel);
+    }
+
+    public void unregisterSelectable (SelectableChannel channel) {
+	SelectionKey skey = channel.keyFor (selector);
+        if (skey.isValid ())
+            skey.interestOps (0);
+        selectable_info.remove (channel);
+    }
+
+    public long nowMillis() {
+        return System.currentTimeMillis();
+    }
+
+    public long timerMillis() {
+        if (GetTimeOfDayCC.available ())
+            return GetTimeOfDayCC.currentTimeMillis ();
+        return nowMillis();
+    }
+
+    public Object registerTimer(long time_ms, Runnable cb) {
+        return register_timer_impl(time_ms, cb, null);
+    }
+
+    private Object register_timer_impl (
+	    long time_ms, Object cb, Object user_data) {
+
+	if (logger.isDebugEnabled ()) logger.debug ("ASyncCore.register_timer");
+	TimerInfo result = new TimerInfo (cb, user_data);
+
+        boolean wakeup = false;
+        synchronized (timers) {
+            long now_ms = nowMillis();
+            long this_timer = time_ms + now_ms;
+            if (timers.isEmpty ())
+                wakeup = true;
+            else {
+                long first_timer = timers.getFirstPriority ().longValue ();
+                if (this_timer < first_timer)
+                    wakeup = true;
+            }
+
+            timers.add (result, new Long(this_timer));
+        }
+
+        if (wakeup)
+            selector.wakeup ();
+
+	if (logger.isDebugEnabled ()) logger.debug ("set timer time_ms=" +
+		time_ms + " ti=" + result);
+	return result;
+    }
+
+    public void cancelTimer (Object token) {
+	if (! (token instanceof TimerInfo))
+	    throw new IllegalArgumentException ();
+        synchronized (timers) {
+            cancelled_timers.add ((TimerInfo) token);
+        }
+    }
+
+    /** 
+     * Set this flag to false before calling asyncMain to disable the watchdog.
+     */
+    public boolean useWatchdog = true;
+
+    protected boolean watchdogFlag = true;
+    protected long watchdogCheckPeriod = 10*1000;
+    protected long watchdogResetPeriod = 3*1000;
+    protected Object watchdogLock = new Object();
+
+    protected class Watchdog extends Thread {
+        public void run() {
+            while(true) {
+                long now = System.currentTimeMillis();
+                long wake = now + watchdogCheckPeriod;
+                do {
+                    try { Thread.sleep(wake - now); } 
+                    catch (InterruptedException e) {}
+                    now = System.currentTimeMillis();
+                }
+                while (now < wake);
+                boolean flag = false;
+                synchronized(watchdogLock) {
+                    flag = watchdogFlag;
+                    watchdogFlag = true;
+                }
+                if (flag)
+                    logger.warn("main thread appears stalled");
+                else
+                    logger.info("watchdog awakened");
+            }
+        }
+    }
+
+    protected class WatchdogReset implements Runnable {
+        public void run() {
+            synchronized(watchdogLock) {
+                watchdogFlag = false;
+            }
+            registerTimer(watchdogResetPeriod, this);
+        }
+    }
+
+    public void asyncMain () {
+
+        if (logger.isDebugEnabled ()) logger.debug ("async_main called");
+
+        if (useWatchdog) {
+            registerTimer(0, new WatchdogReset());
+            (new Watchdog()).start();
+        }
+
+	while (true) {
+
+	    // Get rid of any cancelled timers.
+
+            synchronized (timers) {
+                while (! timers.isEmpty ()) {
+                    TimerInfo ti = timers.getFirst ();
+                    if (cancelled_timers.remove (ti)) {
+                        if (logger.isDebugEnabled ())
+                            logger.debug ("removing timer " + ti);
+                        timers.removeFirst ();
+                    }
+                    else {
+                        if (logger.isDebugEnabled ())
+                            logger.debug("finished removing timers");
+                        break;
+                    }
+                }
+            }
+
+	    // Select until the next timer, or indefinitely.
+
+	    long now_ms = nowMillis();
+	    if (logger.isDebugEnabled ()) logger.debug ("now_ms=" + now_ms);
+	    // if (logger.isDebugEnabled ()) logger.debug ("timers=" + timers);
+
+	    try {
+                // I can't hold a lock on timers while selecting, or no other
+                // thread will be able to wake me up in register_timer.
+                // Instead, I just get the head of the timers queue and then
+                // call select.  If someone calls register_timer between when
+                // I check the head of the queue and when I call select, and
+                // that new timer preceeds the previous head of the queue,
+                // they'll call wakeup, which will cause the next call to
+                // select to wake up immediately, so no deadlock is possible
+                // here.
+
+                long time_ms = -1;
+                synchronized (timers) {
+                    if (! timers.isEmpty ())
+                        time_ms = timers.getFirstPriority ().longValue ();
+                }
+
+                if (time_ms == -1) {
+                    // block indefinitely
+                    if (logger.isDebugEnabled ())
+                        logger.debug ("calling select ()");
+                    selector.select ();
+                }
+                else {
+                    if (now_ms >= time_ms) {
+                        // do not block
+                        if (logger.isDebugEnabled ()) logger.debug (
+                                "calling selectNow ()");
+                        selector.selectNow ();
+                    }
+                    else {
+                        // block until next timer expires
+                        if (logger.isDebugEnabled ())
+                            logger.debug ("calling select (" +
+                                (time_ms - now_ms) + ")");
+                        selector.select (time_ms - now_ms);
+                    }
+                }
+            }
+	    catch (IOException e) {
+                if (! e.getMessage ().equals ("Interrupted system call")) {
+                    logger.fatal ("unhandled exception: " + e, e);
+                    System.exit (1);
+                }
+	    }
+
+            if (logger.isDebugEnabled ()) logger.debug ("select returned");
+
+	    // Process the ready selectables.
+
+	    Iterator i = selector.selectedKeys ().iterator ();
+	    while (i.hasNext ()) {
+		SelectionKey skey = (SelectionKey) i.next ();
+                i.remove ();
+		SelectableInfo si = selectable_info.get (skey.channel ());
+                if (si == null)
+                    continue;
+                // Each of these callbacks could cancel this skey, so we need
+                // to check that it's still valid after each one before
+                // calling the next one.
+                if (si.cb != null)
+                    ((SelectableCB) si.cb).select_cb (skey, si.user_data);
+                if (skey.isValid () && (si.accept_cb != null) && 
+                    ((skey.readyOps () & OP_ACCEPT) != 0))
+                    si.accept_cb.run();
+                if (skey.isValid () && (si.connect_cb != null) && 
+                    ((skey.readyOps () & OP_CONNECT) != 0))
+                    si.connect_cb.run();
+                if (skey.isValid () && (si.read_cb != null) && 
+                    ((skey.readyOps () & OP_READ) != 0))
+                    si.read_cb.run();
+                if (skey.isValid () && (si.write_cb != null) && 
+                    ((skey.readyOps () & OP_WRITE) != 0))
+                    si.write_cb.run();
+            }
+
+	    // Process the ready timers.
+
+	    while (true) {
+		TimerInfo info = null;
+                synchronized (timers) {
+                    if (timers.isEmpty ())
+                        break;
+                    long time_ms = timers.getFirstPriority ().longValue ();
+                    if (now_ms < time_ms)
+                        break;
+                    info = timers.removeFirst ();
+                    if (cancelled_timers.remove(info)) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("Skipping cancelled timer " + info);
+                        }
+                        continue;
+                    }
+                }
+                if (logger.isDebugEnabled ())
+                    logger.debug ("calling timer " + info);
+                // Don't hold the lock during the callback.
+                if (info.cb instanceof TimerCB) 
+                    ((TimerCB) info.cb).timer_cb (info.user_data);
+                else
+                    ((Runnable) info.cb).run();
+	    }
+	}
+    }
+
+    protected Selector selector;
+    protected HashMap<SelectableChannel,SelectableInfo> selectable_info 
+        = new HashMap<SelectableChannel,SelectableInfo> ();
+    protected PriorityQueue<TimerInfo,Long> timers = 
+        new PriorityQueue<TimerInfo,Long>(200);
+    protected HashSet<TimerInfo> cancelled_timers = new HashSet<TimerInfo> ();
+
+    protected static class SelectableInfo {
+	public SelectableCB cb;
+	public Object user_data;
+        public Runnable accept_cb, connect_cb, read_cb, write_cb;
+	public SelectableInfo () {}
+	public SelectableInfo (SelectableCB c, Object u) {
+	    cb = c; user_data = u;
+	}
+    }
+
+    protected static class TimerInfo {
+	public Object cb;
+	public Object user_data;
+	public TimerInfo (Object c, Object u) {
+	    cb = c; user_data = u;
+	}
+	public String toString () {
+	    return "(TimerInfo cb=" + cb + " user_data=" + user_data + ")";
+	}
+    }
+
+    /**
+     * Tests the watchdog.
+     */ 
+    public static void main(String args[]) throws Exception {
+        PatternLayout pl = new PatternLayout ("%d{ISO8601} %-5p %c: %m\n");
+        ConsoleAppender ca = new ConsoleAppender (pl);
+        Logger.getRoot ().addAppender (ca);
+        Logger.getRoot ().setLevel (Level.INFO);
+
+        final ASyncCoreImpl acore = new ASyncCoreImpl();
+        acore.registerTimer(acore.watchdogCheckPeriod * 3, new Runnable() { 
+                public void run() { 
+                    acore.logger.info("starting infinite loop"); 
+                    while (true);
+                }
+            });
+        acore.asyncMain();
+    }
+}
+
+
+
+package bamboo.lss;
+
+import java.lang.System;
+
+public class DelayedHelloWorld {
+
+       public  static  Runnable  printCallback = new Runnable( ) {
+ 
+              public void run ( ) {
+ 
+                      System.out.println ("hello world!!!") ;
+ 
+                      System.exit ( 0 ) ;
+ 
+              }
+ 
+       };
+ 
+       public static void main ( String [ ] args ) throws java.io.IOException{
+ 
+              bamboo.lss.ASyncCore acore = new bamboo.lss.ASyncCoreImpl ( ) ;
+ 
+              acore.registerTimer(5000, printCallback) ;
+
+              acore.asyncMain ( );
+
+       }
+
+   }
+
+
diff -urN bamboo/src/bamboo/lss/DustDevil.java bamboo1/src/bamboo/lss/DustDevil.java
--- bamboo/src/bamboo/lss/DustDevil.java	2005-04-27 23:51:10.000000000 +0300
+++ bamboo1/src/bamboo/lss/DustDevil.java	2008-05-12 14:19:31.000000000 +0300
@@ -93,14 +93,18 @@
 	Enumeration iter = config.getStages ();
 	while (iter.hasMoreElements ()) {
 	    stageDescr descr = (stageDescr) iter.nextElement ();
-	    if (descr.stageName.indexOf ("Network") != -1)
+	    
+		//logger.info ("descr.stageName:" + descr.stageName + ";  descr.className: " + descr.className);  //added by luxiaopeng
+		//logger.info ("; descr.initargs: "+ descr.initargs );
+		
+	    if (descr.stageName.indexOf ("Network") != -1)  
 		continue;
 
 	    ConfigData config_data = new ConfigData (mgr, descr.initargs);
 
 	    Class c = null;
 	    try {
-		c = Class.forName (descr.className);
+		c = Class.forName (descr.className);   //dynamicly create stage class
 	    }
 	    catch (ClassNotFoundException e) {
 		logger.fatal ("Error: could not load class " +
@@ -110,7 +114,7 @@
 
 	    EventHandlerIF handler = null;
 	    try {
-		handler = (EventHandlerIF) c.newInstance ();
+		handler = (EventHandlerIF) c.newInstance ();   //dynamicly create EventhandlerIF interface
 	    }
 	    catch (Exception e) {
 		logger.fatal ("Error: caught exception " +
@@ -133,9 +137,11 @@
 	    Object [] p = (Object []) handlers.removeFirst ();
 	    EventHandlerIF handler = (EventHandlerIF) p [0];
 	    ConfigData config_data = (ConfigData) p [1];
-
+	    
+		logger.info ("create each stage now here by call init function of :\n");  //add by luxiaopeng
+		
 	    try {
-		handler.init (config_data);
+		handler.init (config_data);  //this is the point... we init the every stage of bamboo that configured in the cfg file. 
 	    }
 	    catch (Exception e) {
 		logger.fatal ("Error: caught an exception " +
@@ -169,7 +175,7 @@
         return main (cfg);
     }
 
-    public StageManager main (String cfg_filename) throws Exception { 
+    public StageManager main (String cfg_filename) throws Exception {
 
 	SandstormConfig cfg = null;
 	try {
@@ -201,7 +207,7 @@
 	    System.exit (1);
 	}
 
-	Classifier classifier = Classifier.getClassifier (node_id); 
+	Classifier classifier = Classifier.getClassifier (node_id); // ostore.dispatch.Classifier. what does that mean?
 	classifier.set_timer_cb (create_timer_cb (classifier));
 	classifiers.addLast (classifier);
 
@@ -210,12 +216,12 @@
 	InetSocketAddress my_addr = new InetSocketAddress (
 		node_id.address (), node_id.port ());
 
-	EventHandlerIF network = create_network (my_addr);
+	EventHandlerIF network = create_network (my_addr);   //what do this session codes means? create network stage?
 	SinkIF sink = new DustDevilSink (network, Thread.currentThread ());
 	StageIF stage = new SimulatorStage (
 		name, new StageWrapper (network), sink);
-	config_data.setStage (stage);
-	network.init (config_data);
+	config_data.setStage (stage);	
+	network.init (config_data);	
 	mgr.addStage (stage.getName (), stage);
     }
 
@@ -225,7 +231,7 @@
 
 	// First off, we need to find the network stage so that we can get our
 	// hostname and port.
-
+    
 	LinkedList classifiers = new LinkedList ();
 	
 	StageManager mgr = new StageManager (cfg);
@@ -245,47 +251,60 @@
 			    config_data_tmp, classifiers);
 		}
 	    }
-	    else if (descr.stageName.indexOf ("Network") != -1) {
+	    else if (descr.stageName.indexOf ("Network") != -1) {	
 		ConfigData config_data = new ConfigData (mgr, descr.initargs);
-		String nidstr = config_data.getString ("node_id");
-		if (nidstr == null) {
-		    logger.fatal ("Network stage must have node_id");
-		    System.exit (1);
-		}
-		create_network_stage (descr.stageName, nidstr, mgr, 
-			config_data, classifiers);
+		int network_count = config_data.getInt ("network_count");
+		if (network_count < 0) {
+			String nidstr = config_data.getString ("network");
+			if (nidstr == null) {
+			    logger.fatal ("Network stage must have network_id");
+			    System.exit (1);
+			}
+			create_network_stage (descr.stageName, nidstr, mgr, 
+					config_data, classifiers);
+		} else {
+			for (int i = 0; i < network_count; ++i) {
+				String nid_str = config_data.getString ("network_" + i);
+				if (nid_str == null) {
+				    logger.fatal ("Network stage must have network_id");
+				    System.exit (1);
+				}
+				create_network_stage (descr.stageName, nid_str, mgr, 
+						config_data, classifiers);
+        }				
 	    }
 	}
+	}
 	if( classifiers.isEmpty() ) {
-	    // No Network stage, but we still need a classifier.
+	    // No Network stage, but we still need a classifier.		
 	    String nidstr = cfg.getString ("global.initargs.node_id");
 	    NodeId node_id = null;
-	    try {
-		node_id = new NodeId (nidstr);
-	    }
-	    catch (ostore.util.NodeId.BadFormat e) {
-		logger.fatal ("node_id must be an IP:port tuple");
-		System.exit (1);
-	    }
-	    catch (UnknownHostException e) {
-		logger.fatal ("unknown host: " + nidstr);
-		System.exit (1);
-	    }
-	    Classifier classifier = Classifier.getClassifier (node_id); 
-	    classifier.set_timer_cb (create_timer_cb (classifier));
-	    classifiers.addLast (classifier);
-	}
+			    try {
+				node_id = new NodeId (nidstr);
+			    }
+			    catch (ostore.util.NodeId.BadFormat e) {
+				logger.fatal ("node_id must be an IP:port tuple");
+				System.exit (1);
+			    }
+			    catch (UnknownHostException e) {
+				logger.fatal ("unknown host: " + nidstr);
+				System.exit (1);
+			    }			    
+			    Classifier classifier = Classifier.getClassifier (node_id); //what does classifier mean? 
+			    classifier.set_timer_cb (create_timer_cb (classifier));
+			    classifiers.addLast (classifier);					
+			}
 	         
 	// Create the other stages.
 
 	init_nodes (cfg, mgr);
 
-	// Send a StagesInitializedSignal.
+	// Send a StagesInitializedSignal.  
 
 	while (! classifiers.isEmpty ()) {
 	    Classifier classifier = (Classifier) classifiers.removeFirst ();
 	    try {
-		classifier.enqueue (new StagesInitializedSignal ());
+		classifier.enqueue (new StagesInitializedSignal ()); //what does that mean? lu xiaopeng
 	    }
 	    catch (SinkException e) {
 		logger.fatal ("got exception on init: " + e, e);
@@ -307,7 +326,7 @@
         String cfgfile = null;
 
         if (args.length == 3) {
-            if (! args [0].equals ("-l")) 
+            if (! args [0].equals ("-l"))
                 usage ();
             String logfile = args [1];
             cfgfile = args [2];
@@ -333,14 +352,14 @@
             l.fatal ("could not open selector", e);
             System.exit (1);
         }
-
+        //l.info("the begin of the world");
         DustDevil dd = new DustDevil ();
-	dd.main (cfgfile);
-
-	// Start the main loop.
-	
+	    dd.main (cfgfile);
+        //l.info("back to here");
+	    // Start the main loop.	
         try {
-            acore_instance ().async_main ();
+            acore_instance ().async_main ();            
+            l.info("i am here waiting for your back, my async_main");            
         }
         catch (OutOfMemoryError e) {
             DustDevilSink.reserve = null;
diff -urN bamboo/src/bamboo/lss/DustDevilSink.java bamboo1/src/bamboo/lss/DustDevilSink.java
--- bamboo/src/bamboo/lss/DustDevilSink.java	2004-07-15 22:14:57.000000000 +0300
+++ bamboo1/src/bamboo/lss/DustDevilSink.java	2008-03-11 10:20:35.000000000 +0200
@@ -63,7 +63,9 @@
         check_thread ();
 	QueueElementIF [] events = {event};
 	try {
-	    handler.handleEvents (events);
+		//logger.info("The handler of this sinkif is:" + handler);
+		//logger.info("The event of this sinkif is:" + event);
+		handler.handleEvents (events);
 	}
 	catch (EventHandlerException e) {
 	    throw new SinkFullException ("from EventHandlerException");
diff -urN bamboo/src/bamboo/lss/Network.java bamboo1/src/bamboo/lss/Network.java
--- bamboo/src/bamboo/lss/Network.java	2005-07-01 01:30:55.000000000 +0300
+++ bamboo1/src/bamboo/lss/Network.java	2008-05-22 17:02:50.000000000 +0300
@@ -10,7 +10,10 @@
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.util.LinkedHashMap;
+import java.util.Iterator;
 import java.util.Random;
+import bamboo.router.LookupNodeidReq;
+import bamboo.router.LookupNodeidResp;
 import ostore.network.NetworkMessage;
 import ostore.network.NetworkMessageResult;
 import ostore.network.NetworkLatencyReq;
@@ -39,13 +42,13 @@
 
     /////////////////// Function-Callback Interface //////////////////
 
-    protected static LinkedHashMap<InetSocketAddress,Network> instances = 
+    public static LinkedHashMap<InetSocketAddress,Network> instances = 
         new LinkedHashMap<InetSocketAddress,Network>();
 
     public static Network instance(InetSocketAddress addr) {
         return (Network) instances.get (addr);
-    }
-
+    }    
+ 
     // This is some hairy code, mainly because of all of the type parameter
     // stuff.  Try to be calm while reading it.  Our goal is that a client of
     // this class not be able to call registerReceiver with a class that is
@@ -81,12 +84,12 @@
      */
     public <T extends QuickSerializable> void registerReceiver(
             Class<T> type, Thunk2<T, InetSocketAddress> callback)
-    throws DuplicateTypeException {
-        if (receivers.containsKey(type)) 
+    throws DuplicateTypeException {	
+    	if (receivers.containsKey(type)) 
             throw new DuplicateTypeException (type);
         try { ostore.util.TypeTable.register_type(type); }
         catch (Exception e) { BUG(e); }
-        receivers.put(type, callback);
+        receivers.put(type, callback);        
     }
 
     /**
@@ -231,27 +234,32 @@
         }
     }
 
-    protected InetSocketAddress addr;
+    public InetSocketAddress addr;
     protected ASyncCore main_acore;
     protected double drop_prob;
     protected Random rand;
+    public NodeId networkid;
 
     public Network (InetSocketAddress addr, ASyncCore ac) throws IOException {
         this.addr = addr;
         main_acore = ac;
-
+        networkid = new NodeId(addr.getPort(), addr.getAddress()); //TODO
+        
         instances.put (addr, this);
 
         event_types    = new Class [] { NetworkLatencyReq.class };
-	outb_msg_types = new Class [] { NetworkMessage.class };
+	outb_msg_types = new Class [] { NetworkMessage.class, 
+		    LookupNodeidReq.class,  //TODO
+		    LookupNodeidResp.class, 
+	};
 
 	// This output line makes OceanStore scripts think we're ready to
 	// receive messages, which allows run-experiment (in particular) to
 	// work correctly when a DustDevil node is specified as being of
 	// type fed (as opposed to dynamic or static).
 
-	logger.info ("Network " + addr.getAddress ().getHostName () +
-		" now listening on port " + addr.getPort ());
+	logger.info ("Network " + addr.getAddress () +
+		" now listening on port " + addr.getPort ());   //TODO
     }
 
     /////////////////// Implementation of Serializer ////////////////
@@ -279,11 +287,19 @@
     public void recv (final Object o, final InetSocketAddress src, 
                       final InetSocketAddress l, final int tries, 
                       final long wait_ms, final long est_rtt_ms) {
+    	// is this useful?
+    	if (src.getAddress().getClass() != addr.getAddress().getClass())
+    	{
+    		logger.info("the address is worng, just return from the recv network.");
+    		return;
+    	}
 
         final Thunk2<QuickSerializable,InetSocketAddress> callback = 
             (Thunk2<QuickSerializable,InetSocketAddress>)
             receivers.get(o.getClass());
-
+        //modify begin TODO
+        //logger.info("the recevied Msg is: " + o.getClass() + ", the Msg is: " + o);
+        //modify end TODO
         if (callback != null) {
             final QuickSerializable qs = (QuickSerializable) o;
             if (udpcc_thread == null) {
@@ -296,14 +312,26 @@
                 };
                 acore.registerTimer(0, r);
             }
-        }
+        } 
         else {
-            final NetworkMessage msg = (NetworkMessage) o;
-            msg.inbound = true;
+        	//logger.info("No receivers, dispatch it");
+        	if (o instanceof LookupNodeidReq) {
+            	final LookupNodeidReq msg = (LookupNodeidReq) o;
+            	msg.peer = NodeId.create(src); 
+                if (udpcc_thread == null) {
+                    try { classifier.dispatch(msg); }
+                    catch (SinkException e) { BUG(e); }
+                }
+                else{
+                	classifier.dispatch_later (msg, 0);
+                }           	 	
+        	}
+        	else {
+        	final NetworkMessage msg = (NetworkMessage) o;            
+            msg.inbound = true;             
             msg.peer = NodeId.create(src);
             msg.wait_ms = wait_ms;
-            msg.est_rtt_ms = est_rtt_ms;
-
+            msg.est_rtt_ms = est_rtt_ms;           
             // Use dispatch later to get back into main thread.
             if (udpcc_thread == null) {
                 try { classifier.dispatch(msg); }
@@ -314,17 +342,41 @@
             }
         }
     }
+    }
 
     //////////////////// End Implementation of Sink /////////////////
 
     ///////////////// Implementation of EventHandlerIF //////////////
 
     public void handleEvent (QueueElementIF item) {
+
         if (item instanceof NetworkMessage) {
-            handle_outbound_msg ((NetworkMessage) item);
+        	if (((NetworkMessage) item).peer.getAddress().getClass() == networkid.getAddress().getClass())
+        	{   
+        		handle_outbound_msg ((NetworkMessage) item);
+            }
+        } else if (item instanceof LookupNodeidReq){
+        	if (((LookupNodeidReq) item).peer.getAddress().getClass() == networkid.getAddress().getClass()){
+        		LookupNodeidReq msg = (LookupNodeidReq) item;
+        		if (msg.source_id.equals(my_node_id)){        			
+        			send(msg, msg.peer);
+        		}            	
+        	}        	
+        } else if (item instanceof LookupNodeidResp){
+        	if (((LookupNodeidResp) item).peer.getAddress().getClass() == networkid.getAddress().getClass()){            	
+        		LookupNodeidResp msg = (LookupNodeidResp) item;
+        		if (msg.source_id.equals(my_node_id)){                	
+        			send(msg, msg.peer);        		
+        		}            	
+        	} 
         }
         else {
-            handle_net_lat_req ((NetworkLatencyReq) item);
+        	if (((NetworkLatencyReq) item).peer.getAddress().getClass() == networkid.getAddress().getClass()){
+        		//logger.info("handleEvent, the Network id: " + networkid);
+            	//logger.info("Network NetworkLatencyReq the handleEvent() : " + item); 
+            	handle_net_lat_req ((NetworkLatencyReq) item);
+        	}
+            
         }
     }
 
@@ -350,6 +402,7 @@
         else {
 	    udpcc = new UdpCC (main_acore, addr, this, this);
         }
+        
 
 	int i = config_get_int (config, "udpcc_debug_level");
 	if (i >= 0)
@@ -417,8 +470,8 @@
     protected final void handle_outbound_msg (final NetworkMessage msg) {
         final InetSocketAddress dst = new InetSocketAddress (
                 msg.peer.address (), msg.peer.port ());
-
-        if (msg.timeout_sec == -1) {
+        
+        if (msg.timeout_sec == -1) {        
             if (udpcc_thread == null) {
                 udpcc.send_nocc (msg, dst);
             }
@@ -428,7 +481,7 @@
                 });
             }
         }
-        else {
+        else { 
             final SinkIF comp_q = msg.comp_q;
             final Object user_data = msg.user_data;
             final long timeout_sec = 
@@ -447,7 +500,7 @@
 
     protected void handle_net_lat_req (final NetworkLatencyReq req) {
         final InetSocketAddress addr = new InetSocketAddress (
-                req.node_id.address (), req.node_id.port ());
+                req.peer.address (), req.peer.port ());
         ASyncCore.TimerCB cb = new ASyncCore.TimerCB () {
             public void timer_cb (Object not_used) {
                 long rtt_ms = udpcc.latency_mean (addr);
diff -urN bamboo/src/bamboo/lss/Rpc.java bamboo1/src/bamboo/lss/Rpc.java
--- bamboo/src/bamboo/lss/Rpc.java	2005-08-16 01:22:29.000000000 +0300
+++ bamboo1/src/bamboo/lss/Rpc.java	2008-05-22 13:00:41.000000000 +0300
@@ -13,6 +13,7 @@
 import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
+import java.util.Iterator;
 import ostore.util.InputBuffer;
 import ostore.util.OutputBuffer;
 import ostore.util.QSException;
@@ -112,7 +113,7 @@
             Class<T> requestType, Thunk3<InetSocketAddress,T,Object> handler) 
         throws DuplicateTypeException {
         if (handlers.containsKey(requestType))
-            throw new DuplicateTypeException(requestType);
+            throw new DuplicateTypeException(requestType);        
         ensure_known(requestType);
         handlers.put(requestType, 
                 (Thunk3<InetSocketAddress,QuickSerializable,Object>) handler);
@@ -147,6 +148,18 @@
                     timeoutCallback));
         Object timerToken = acore.registerTimer(
                 timeout_sec * 1000, curry(requestTimeout, xact_id));
+        //logger.info("sendRequest to the dest:" + dest);
+        
+    	Iterator i = Network.instances.keySet ().iterator ();
+        while (i.hasNext ()) {        	 
+       	 Network n_id = Network.instances.get(i.next());      	 
+       	 if (dest.getAddress().getClass() == n_id.addr.getAddress().getClass())
+       		 network = n_id;       	 
+        }
+        if (network == null ){
+		    logger.fatal ("there is no network for this addr:" + dest);
+		    System.exit (1);
+        }        
         Object networkToken = network.send(
                 new Msg (true, xact_id.longValue (), req), dest, timeout_sec);
         return new SendToken(xact_id, timerToken, networkToken);
@@ -155,7 +168,6 @@
     public void cancelSend(Object token) {
         SendToken s = (SendToken) token;
         inflight.remove(s.xact_id);
-        acore.cancelTimer(s.timerToken);
         network.cancelSend(s.networkToken);
     }
 
@@ -181,6 +193,18 @@
     public void sendResponse(QuickSerializable resp, Object token) {
         Pair<InetSocketAddress,Long> pair = 
             (Pair<InetSocketAddress,Long>) token;
+        //get the network according to the class of the InetSocketAddress
+    	Iterator i = Network.instances.keySet ().iterator ();
+        while (i.hasNext ()) {        	 
+       	 Network n_id = Network.instances.get(i.next());      	 
+       	 if (pair.first.getAddress().getClass() == n_id.addr.getAddress().getClass())
+       		 network = n_id;       	 
+        }
+        if (network == null ){
+		    logger.fatal ("there is no network for this addr:" + pair.first);
+		    System.exit (1);
+        }
+        
         network.send(new Msg(false, pair.second.longValue(), resp),
                      pair.first);
     }
@@ -192,14 +216,20 @@
     public void init(ConfigDataIF config) throws Exception {
         super.init(config);
         instances.put(my_node_id, this);
-        acore.registerTimer(0, ready);
+        acore.registerTimer(0, ready);        
     }
 
     protected Runnable ready = new Runnable() {
         public void run() {
-            network = Network.instance(my_node_id);
-            try { network.registerReceiver(Msg.class, handleMsg); }
-            catch (DuplicateTypeException e) { BUG(e); }
+        	Iterator i = Network.instances.keySet ().iterator ();
+            while (i.hasNext ()) {            	
+           	 Network network = Network.instances.get(i.next());
+           	 try {network.registerReceiver(Msg.class, handleMsg); }
+           	catch (DuplicateTypeException e) { BUG(e); }       	 
+            }            
+            //network = Network.instance(my_node_id);            
+            //try { network.registerReceiver(Msg.class, handleMsg); }
+            //catch (DuplicateTypeException e) { BUG(e); }            
         }
     };
 
@@ -207,6 +237,7 @@
         new Thunk2<Msg,InetSocketAddress>() {
         public void run(Msg msg, InetSocketAddress peer) {
 
+        	//logger.info ("in the handleMsg of Rpc, the msg is:" + msg.payload.getClass().getName());
             if (msg.req) {
                 Thunk3<InetSocketAddress,QuickSerializable,Object> cb = 
                     handlers.get(msg.payload.getClass());
diff -urN bamboo/src/bamboo/lss/UdpCC.java bamboo1/src/bamboo/lss/UdpCC.java
--- bamboo/src/bamboo/lss/UdpCC.java	2005-08-16 01:22:29.000000000 +0300
+++ bamboo1/src/bamboo/lss/UdpCC.java	2008-06-12 10:34:17.000000000 +0300
@@ -143,8 +143,9 @@
     public UdpCC (ASyncCore core, InetSocketAddress address,
 	    Serializer slz, Sink snk) {
 
+    	
         logger = Logger.getLogger (getClass ());
-
+    logger.info("the address is:" + address);
 	acore = core;
 	my_addr = address;
 	serializer = slz;
@@ -156,8 +157,7 @@
 	try {
 	    channel = DatagramChannel.open ();
 	    sock = channel.socket ();
-	    int rxsize = sock.getReceiveBufferSize();
-	    logger.info("initial rcv sobuf = " + rxsize);
+	    int rxsize = sock.getReceiveBufferSize();	    
 	    sock.bind (my_addr);
 	    channel.configureBlocking (false);
 	    skey = acore.register_selectable (channel, SelectionKey.OP_READ,
@@ -695,7 +695,8 @@
     protected class MyAckTimeoutCB implements ASyncCore.TimerCB {
 	public void timer_cb (Object user_data) {
             if (closed) return;
-
+            
+        //logger.info("In the My ack timeout CB()");
 	    Long seq = (Long) user_data;
 	    TimeoutInfo tinfo = (TimeoutInfo) unacked.remove (seq);
 	    if (DEBUG) debugln ("check timeout "
@@ -1027,6 +1028,7 @@
 
         if ((!cancelled.remove(new Long(tinfo.msg_id))) 
             && (tinfo.send_cb != null)) {
+        	    //logger.info("In handle_ack, and the tinfo" + tinfo);
                 tinfo.send_cb.run(new Boolean(true)/* success */);
         }
     }
@@ -1108,7 +1110,9 @@
 
             if (!conn.addr.equals(my_addr))
                 countBytes(msg, size);
-
+            
+            //logger.info("received Message: " + msg.getClass().getName() + ", from: " + src); //TODO
+            //logger.info("received Message: " + msg.getClass().getName() + ", from: " + src + ",  msg:" + msg); //TODO
             sink.recv (msg, src, my_addr, tries, wait_ms, est_rtt_ms);
         }
     }
@@ -1121,6 +1125,7 @@
 	    InetSocketAddress src = null;
 	    try {
 		src = (InetSocketAddress) channel.receive (bb);
+		//logger.info("the src in the handle_readable is : " + src);
 	    }
 	    catch (SocketException e) {
                 // For some reason, Sun's j2sdk1.4.2 will occasionally throw
@@ -1326,7 +1331,8 @@
 
     protected final boolean send_msg (Connection conn, boolean retry) {
 
-        TimeoutInfo tinfo = null;
+    	//logger.info("In the send_msg()" + conn.addr);
+    	TimeoutInfo tinfo = null;
         LinkedList<TimeoutInfo> q = retry ? conn.retry_q : conn.send_q;
         while (!q.isEmpty()) {
             TimeoutInfo t = q.getFirst();
@@ -1385,13 +1391,16 @@
 	bb.rewind ();
 
 	int n = 0;
-	try {
+	try {		
+		//logger.info("Send Message: " + tinfo.msg.getClass().getName() + ", to" + conn.addr);	//TODO	
+		//logger.info("Send Message: " + conn.addr + ", and the Msg: " + tinfo.msg);	//TODO	
 	    n = channel.send (bb, conn.addr);
 	}
 	catch (IOException e) {
             bb.rewind ();
             byte [] data = new byte [bb.limit () - bb.position ()];
             bb.get (data, 0, data.length);
+            
 	    logger.fatal ("bb.pos=" + bb.position () + " bb.lim=" 
                           + bb.limit () + " addr=" 
                           + conn.addr.getAddress ().getHostAddress ()
@@ -1401,6 +1410,7 @@
 
 	if (n == 0) {
 	    // Undo
+		
 	    if (DEBUG) debugln ("send failed, will retry later");
 	    return false;
 	}
@@ -1436,6 +1446,7 @@
         long timeout_ms = Math.round (conn.rto * timeout_factor + timeout_diff);
 	if (DEBUG) debugln ("setting timeout for " + timeout_ms);
 	acore.register_timer (timeout_ms, ack_timeout_cb, Seq);
+	
 
 	return true;
     }
@@ -1498,18 +1509,21 @@
                         switch (conn.next_q) {
                             case 0:
                                 // Try the retry queue first.
-
+                                
                                 if (conn.can_send_retry ()) {
+                                	//logger.info("In the handle_writable() conn.can_send_retry" + conn.addr);
                                     if (! send_msg (conn, true /* retry */))
                                         return;
                                     done = true;
                                 }
                                 else if (conn.can_send_msg ()) {
+                                	//logger.info("In the handle_writable() conn.can_send_msg" + conn.addr);
                                     if (! send_msg (conn, false /* !retry */))
                                         return;
                                     done = true;
                                 }
                                 else if (DEBUG) {
+                                	logger.info("In the handle_writable() nothing can send" + conn.addr);
                                     if (conn.send_q.isEmpty () &&
                                         conn.retry_q.isEmpty ())
                                         debugln ("no msgs");
diff -urN bamboo/src/bamboo/openhash/multicast/CheckRunning.java bamboo1/src/bamboo/openhash/multicast/CheckRunning.java
--- bamboo/src/bamboo/openhash/multicast/CheckRunning.java	2004-08-04 20:45:26.000000000 +0300
+++ bamboo1/src/bamboo/openhash/multicast/CheckRunning.java	2008-05-16 18:03:23.000000000 +0300
@@ -22,8 +22,9 @@
 
     public void init (ConfigDataIF config) throws Exception {
 	super.init (config);
+        NodeId peer = new NodeId (config_get_string (config, "peer"));
         NodeId node = new NodeId (config_get_string (config, "node"));
-        MulticastPingMessage outb = new MulticastPingMessage (node);
+        MulticastPingMessage outb = new MulticastPingMessage (peer, node, my_node_id);
         outb.comp_q = my_sink;
         outb.timeout_sec = 60;
         dispatch (outb);
diff -urN bamboo/src/bamboo/openhash/multicast/MulticastPingMessage.java bamboo1/src/bamboo/openhash/multicast/MulticastPingMessage.java
--- bamboo/src/bamboo/openhash/multicast/MulticastPingMessage.java	2004-05-10 02:28:18.000000000 +0300
+++ bamboo1/src/bamboo/openhash/multicast/MulticastPingMessage.java	2008-05-16 15:51:47.000000000 +0300
@@ -10,8 +10,8 @@
 public class MulticastPingMessage extends NetworkMessage 
     implements QuickSerializable {
 
-    public MulticastPingMessage(NodeId peer/*, Object o*/) {
-	super(peer, false);
+    public MulticastPingMessage(NodeId peer, NodeId d, NodeId s/*, Object o*/) {
+	super(peer, d, s, false);
     }
     
     public MulticastPingMessage ( InputBuffer buffer ) throws QSException {
diff -urN bamboo/src/bamboo/openhash/multicast/PublicMulticastClient.java bamboo1/src/bamboo/openhash/multicast/PublicMulticastClient.java
--- bamboo/src/bamboo/openhash/multicast/PublicMulticastClient.java	2005-04-22 02:20:07.000000000 +0300
+++ bamboo1/src/bamboo/openhash/multicast/PublicMulticastClient.java	2008-05-16 18:05:09.000000000 +0300
@@ -232,7 +232,7 @@
 		     (opposite_partition(my_key, hash, state.current_level)))) {
 
 		    //ping this node
-		    MulticastPingMessage mpm = new MulticastPingMessage(dest);
+		    MulticastPingMessage mpm = new MulticastPingMessage(dest, dest, my_node_id);
                     network.send(mpm, dest, 10, curry(pingDone, dest, 
                                  new Integer(state.current_level)));
 		}
diff -urN bamboo/src/bamboo/router/CheckRunning.java bamboo1/src/bamboo/router/CheckRunning.java
--- bamboo/src/bamboo/router/CheckRunning.java	2004-08-04 20:45:26.000000000 +0300
+++ bamboo1/src/bamboo/router/CheckRunning.java	2008-05-16 16:12:25.000000000 +0300
@@ -8,6 +8,7 @@
 package bamboo.router;
 
 import java.io.BufferedReader;
+import java.math.BigInteger;
 import java.io.FileReader;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
@@ -36,11 +37,15 @@
 implements SingleThreadedEventHandlerIF {
 
     protected LinkedList hosts = new LinkedList ();
+    protected LinkedList<NeighborInfo> hosts_neighborinfo = new LinkedList<NeighborInfo>();
     protected Set outstanding = new HashSet ();
     protected PrintWriter log;
 
     public CheckRunning () {
         event_types = new Class [] { NetworkMessageResult.class };
+        inb_msg_types = new Class [] {
+        	    LookupNodeidResp.class,  //TODO
+        	};
     }
 
     public void init (ConfigDataIF config) throws Exception {
@@ -60,6 +65,8 @@
 	    }
 	    NodeId node_id = new NodeId (5850, addr);
 	    hosts.addLast (node_id);
+	    Router router = Router.instance(my_node_id);
+	    dispatch (new LookupNodeidReq(node_id, my_node_id, router.id()));//TODO
         }
         String log_file = config_get_string (config, "log_file");
         log = new PrintWriter (new BufferedWriter (
@@ -70,21 +77,31 @@
     }
 
     public void handleEvent (QueueElementIF item) {
+    	if(item instanceof LookupNodeidResp){
+    		final LookupNodeidResp resp = (LookupNodeidResp) item;    		
+        	if(resp.dest_id != my_node_id) {
+        		logger.warn ("receivel the wrong LookupNodeidResp " + resp);
+        	}
+        	if (hosts.contains(resp.source_id)){
+        		NeighborInfo host = new NeighborInfo(resp.peer, resp.source_id, resp.source_guid);
+        		hosts_neighborinfo.addLast(host);              
+        	}
+    	}
         if (item instanceof NetworkMessageResult) {
             NetworkMessageResult result = (NetworkMessageResult) item;
-            NodeId node = (NodeId) result.user_data;
+            NeighborInfo node = (NeighborInfo) result.user_data;
             outstanding.remove (node);
             if (result.success)
                 log.println (now_ms () + " " + node + " 1");
             else
                 log.println (now_ms () + " " + node + " 0");
-
             ping_cb.timer_cb (null);
         }
         else {
             BUG ("unexpected event: " + item);
         }
     }
+    
 
     public ASyncCore.TimerCB ping_cb = new ASyncCore.TimerCB () {
         public void timer_cb (Object user_data) {
@@ -96,9 +113,9 @@
                 return;
             }
 
-            NodeId host = (NodeId) hosts.removeFirst ();
+            NeighborInfo host = (NeighborInfo) hosts_neighborinfo.removeFirst ();
             outstanding.add (host);
-            PingMsg ping = new PingMsg (host);
+            PingMsg ping = new PingMsg (host.peer, host.node_id, my_node_id);
             ping.comp_q = my_sink;
             ping.user_data = host;
             ping.timeout_sec = 60;
diff -urN bamboo/src/bamboo/router/CoordReq.java bamboo1/src/bamboo/router/CoordReq.java
--- bamboo/src/bamboo/router/CoordReq.java	2005-08-16 00:49:06.000000000 +0300
+++ bamboo1/src/bamboo/router/CoordReq.java	2008-05-13 11:57:09.000000000 +0300
@@ -12,6 +12,7 @@
 import ostore.util.OutputBuffer;
 import ostore.util.QSException;
 import ostore.util.QuickSerializable;
+import ostore.util.NodeId;
 
 /**
  * Coordinate request type.
@@ -20,16 +21,19 @@
  * @version $Id: CoordReq.java,v 1.1 2005/08/15 21:49:06 srhea Exp $
  */
 public class CoordReq implements QuickSerializable {
+	public NodeId node_id; 
     public BigInteger srcID;
     public VirtualCoordinate srcCoords;
-    public CoordReq(BigInteger i, VirtualCoordinate c) {
-        srcID = i; srcCoords = c;
+    public CoordReq(NodeId n, BigInteger i, VirtualCoordinate c) {
+    	node_id = n; srcID = i; srcCoords = c;
     }
     public CoordReq(InputBuffer buffer) throws QSException {
+    	node_id = new NodeId (buffer);
         srcID = buffer.nextBigInteger();
         srcCoords = new VirtualCoordinate(buffer);
     }
     public void serialize(OutputBuffer buffer) {
+    	node_id.serialize (buffer);
         buffer.add(srcID);
         srcCoords.serialize(buffer);
     }
diff -urN bamboo/src/bamboo/router/IterRouteReq.java bamboo1/src/bamboo/router/IterRouteReq.java
--- bamboo/src/bamboo/router/IterRouteReq.java	2003-10-05 21:22:11.000000000 +0300
+++ bamboo1/src/bamboo/router/IterRouteReq.java	2008-05-15 16:48:18.000000000 +0300
@@ -31,7 +31,7 @@
     public QuickSerializable payload;
 
     public IterRouteReq (IterRouteResp resp) {
-	super (resp.next_hop.node_id, false);  
+	super (resp.next_hop.peer, resp.dest_id, resp.source_id, false);  
 	src = resp.src; 
 	dest = resp.dest;  
 	app_id = resp.app_id;  
@@ -39,9 +39,9 @@
 	intermediate_upcall = resp.intermediate_upcall;
     }
 
-    public IterRouteReq (NodeId n, BigInteger s, BigInteger d, long a, 
+    public IterRouteReq (NodeId n, NodeId dest_id, NodeId source_id, BigInteger s, BigInteger d, long a, 
 	    boolean u, QuickSerializable p) {
-	super (n, false);  
+	super (n, dest_id, source_id, false);  
 	src = s; 
 	dest = d;  
 	app_id = a;  
diff -urN bamboo/src/bamboo/router/IterRouteResp.java bamboo1/src/bamboo/router/IterRouteResp.java
--- bamboo/src/bamboo/router/IterRouteResp.java	2003-10-05 21:22:11.000000000 +0300
+++ bamboo1/src/bamboo/router/IterRouteResp.java	2008-05-15 16:31:35.000000000 +0300
@@ -31,9 +31,9 @@
     public QuickSerializable payload;
     public NeighborInfo next_hop;
 
-    public IterRouteResp (NodeId n, BigInteger s, BigInteger d, long a, 
+    public IterRouteResp (NodeId n, NodeId dest_id, NodeId source_id, BigInteger s, BigInteger d, long a, 
 	    boolean u, QuickSerializable p, NeighborInfo nh) {
-	super (n, false);  
+	super (n, dest_id, source_id, false);  
 	src = s; 
 	dest = d;  
 	app_id = a;  
diff -urN bamboo/src/bamboo/router/JoinReq.java bamboo1/src/bamboo/router/JoinReq.java
--- bamboo/src/bamboo/router/JoinReq.java	2005-03-02 05:25:45.000000000 +0200
+++ bamboo1/src/bamboo/router/JoinReq.java	2008-05-15 22:02:42.000000000 +0300
@@ -28,8 +28,8 @@
     public int rev_ttl;
     public LinkedList<NeighborInfo> path = new LinkedList<NeighborInfo>();
 
-    public JoinReq (NodeId dest, NodeId n, BigInteger g, int r) {
-	super (dest, false);  node_id = n;  guid = g;  rev_ttl = r;
+    public JoinReq (NodeId dest, NodeId dest_id, NodeId source_id, BigInteger g, int r) {
+	super (dest, dest_id, source_id, false);  node_id = dest_id;  guid = g;  rev_ttl = r;
     }
 
     public JoinReq (InputBuffer buffer) throws QSException {
diff -urN bamboo/src/bamboo/router/JoinResp.java bamboo1/src/bamboo/router/JoinResp.java
--- bamboo/src/bamboo/router/JoinResp.java	2003-10-05 21:22:11.000000000 +0300
+++ bamboo1/src/bamboo/router/JoinResp.java	2008-05-15 22:03:25.000000000 +0300
@@ -28,12 +28,14 @@
     public LinkedList path = new LinkedList ();
     public Set leaf_set = new TreeSet ();
 
-    public JoinResp (NodeId dest, LinkedList p, Set l) {
-	super (dest, false);
+
+    public JoinResp (NodeId dest, NodeId dest_id, NodeId source_id, LinkedList p, Set l) {
+	super (dest, dest_id, source_id, false);
+
 	path = p;
 	leaf_set = l;
     }
-
+    
     public JoinResp (InputBuffer buffer) throws QSException {
 	super (buffer);
 	int path_len = buffer.nextInt ();
diff -urN bamboo/src/bamboo/router/LeafSetChanged.java bamboo1/src/bamboo/router/LeafSetChanged.java
--- bamboo/src/bamboo/router/LeafSetChanged.java	2003-10-05 21:22:11.000000000 +0300
+++ bamboo1/src/bamboo/router/LeafSetChanged.java	2008-05-15 16:32:34.000000000 +0300
@@ -27,8 +27,8 @@
     public BigInteger guid;
     public boolean want_reply;
 
-    public LeafSetChanged (NodeId dest, BigInteger g, LinkedList l) {
-	super (dest, false);  guid = g;  leaf_set = l;
+    public LeafSetChanged (NodeId dest, NodeId dest_id, NodeId source_id, BigInteger g, LinkedList l) {
+	super (dest, dest_id, source_id, false);  guid = g;  leaf_set = l;
     }
 
     public LeafSetChanged (InputBuffer buffer) throws QSException {
diff -urN bamboo/src/bamboo/router/LeafSet.java bamboo1/src/bamboo/router/LeafSet.java
--- bamboo/src/bamboo/router/LeafSet.java	2005-08-16 08:11:08.000000000 +0300
+++ bamboo1/src/bamboo/router/LeafSet.java	2008-05-13 23:46:25.000000000 +0300
@@ -17,6 +17,7 @@
 import ostore.util.NodeId;
 import static bamboo.util.GuidTools.*;
 
+
 /**
  * Manages the leaf set for node.
  * 
@@ -69,8 +70,7 @@
     public BambooNeighborInfo [] preds () {
 	BambooNeighborInfo [] result = new BambooNeighborInfo [leaf_pred_count];
 	for (int j = 0; j < leaf_pred_count; ++j) 
-	    result [j] = new BambooNeighborInfo (
-		    leaf_preds [j].node_id, leaf_preds [j].guid);
+	    result [j] = new BambooNeighborInfo (leaf_succs [j].peer, leaf_preds [j].node_id, leaf_preds [j].guid);
 	return result;
     }
 
@@ -78,7 +78,7 @@
 	BambooNeighborInfo [] result = new BambooNeighborInfo [leaf_succ_count];
 	for (int j = 0; j < leaf_succ_count; ++j) 
 	    result [j] = new BambooNeighborInfo (
-		    leaf_succs [j].node_id, leaf_succs [j].guid);
+	    		leaf_succs [j].peer, leaf_succs [j].node_id, leaf_succs [j].guid);
 	return result;
     }
 
diff -urN bamboo/src/bamboo/router/LeafSetReq.java bamboo1/src/bamboo/router/LeafSetReq.java
--- bamboo/src/bamboo/router/LeafSetReq.java	2003-10-05 21:22:11.000000000 +0300
+++ bamboo1/src/bamboo/router/LeafSetReq.java	2008-05-15 16:33:28.000000000 +0300
@@ -20,8 +20,8 @@
  */
 public class LeafSetReq extends NetworkMessage {
 
-    public LeafSetReq (NodeId dest) {
-	super (dest, false);
+    public LeafSetReq (NodeId dest, NodeId dest_id, NodeId source_id) {
+	super (dest, dest_id, source_id, false);
     }
 
     public LeafSetReq (InputBuffer buffer) throws QSException {
diff -urN bamboo/src/bamboo/router/LookuoNodeidReq.java~ bamboo1/src/bamboo/router/LookuoNodeidReq.java~
--- bamboo/src/bamboo/router/LookuoNodeidReq.java~	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/router/LookuoNodeidReq.java~	2008-05-14 17:13:36.000000000 +0300
@@ -0,0 +1,88 @@
+/*
+ * Copyright (c) 2001-2003 Regents of the University of California.
+ * All rights reserved.
+ *
+ * See the file LICENSE included in this distribution for details.
+ */
+
+package bamboo.router;
+import java.math.BigInteger;
+import java.util.Iterator;
+import java.util.LinkedList;
+import ostore.network.NetworkMessage;
+import ostore.util.InputBuffer;
+import ostore.util.NodeId;
+import ostore.util.OutputBuffer;
+import ostore.util.QSException;
+
+/**
+ * JoinReq.
+ *
+ * @author  Sean C. Rhea
+ * @version $Id: JoinReq.java,v 1.7 2005/03/02 03:25:45 srhea Exp $
+ */
+public class JoinReq extends NetworkMessage {
+
+    public NodeId node_id;
+    public NodeId dest_node_id; 
+    public BigInteger guid;
+    public int rev_ttl;
+    public LinkedList<NeighborInfo> path = new LinkedList<NeighborInfo>();
+
+    public JoinReq (NodeId dest, NodeId n, BigInteger g, int r) {
+	super (dest, false);  node_id = n;  guid = g;  rev_ttl = r;
+    }
+
+    public JoinReq (InputBuffer buffer) throws QSException {
+	super (buffer);
+	node_id = new NodeId (buffer);
+	dest_node_id = new NodeId (buffer);
+	guid = buffer.nextBigInteger ();
+	rev_ttl = buffer.nextInt ();
+	int path_len = buffer.nextInt ();
+	while (path_len-- > 0) 
+	    path.addLast (new NeighborInfo (buffer));
+    }
+
+    public void serialize (OutputBuffer buffer) {
+	super.serialize (buffer);
+        node_id.serialize (buffer);
+        dest_node_id = new NodeId (buffer);
+        buffer.add (guid);
+        buffer.add (rev_ttl);
+	buffer.add (path.size ());
+	for (Iterator i = path.iterator (); i.hasNext (); ) 
+	    ((NeighborInfo) i.next ()).serialize (buffer);
+    }
+
+    public Object clone () throws CloneNotSupportedException {
+	JoinReq result = (JoinReq) super.clone ();
+	result.node_id = node_id;
+	result.guid = guid;
+	result.rev_ttl = rev_ttl;
+	result.path = new LinkedList<NeighborInfo>();
+	for (Iterator i = path.iterator (); i.hasNext (); ) 
+	    result.path.addLast ((NeighborInfo) i.next ());
+	return result;
+    }
+
+    public String toString () {
+	StringBuffer result = new StringBuffer (50 + 70 * path.size ());
+	result.append ("(JoinReq super=");
+	result.append (super.toString ());
+	result.append (" node_id=");
+	result.append (node_id);
+	result.append (" guid=0x");
+	result.append (bamboo.util.GuidTools.guid_to_string (guid));
+	result.append (" rev_ttl=");
+	result.append (rev_ttl);
+	result.append (" path=(");
+	for (Iterator i = path.iterator (); i.hasNext (); ) {
+	    result.append ((NeighborInfo) i.next ());
+	    if (i.hasNext ()) result.append (", ");
+	}
+	result.append ("))");
+	return result.toString ();
+    }
+}
+
diff -urN bamboo/src/bamboo/router/LookupNodeidReq.java bamboo1/src/bamboo/router/LookupNodeidReq.java
--- bamboo/src/bamboo/router/LookupNodeidReq.java	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/router/LookupNodeidReq.java	2008-05-19 17:46:54.000000000 +0300
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) 2001-2003 Regents of the University of California.
+ * All rights reserved.
+ *
+ * See the file LICENSE included in this distribution for details.
+ */
+
+package bamboo.router;
+import java.math.BigInteger;
+import java.util.Iterator;
+import java.util.LinkedList;
+import ostore.network.NetworkMessage;
+import ostore.util.InputBuffer;
+import ostore.util.NodeId;
+import ostore.util.OutputBuffer;
+import ostore.util.QuickSerializable;
+import seda.sandStorm.api.QueueElementIF;
+import ostore.util.QSException;
+
+/**
+ * LookupNodeidReq.
+ *
+ * @author  Lu xiaopeng
+ * @version $Id: LookupNodeidReq.java,v 1.7 2005/03/02 03:25:45 srhea Exp $
+ */
+public class LookupNodeidReq  
+implements QueueElementIF, QuickSerializable, Cloneable {
+
+    public NodeId source_id;
+    public NodeId peer;
+    public BigInteger source_guid;    
+    //public int rev_ttl;
+    //public LinkedList<NeighborInfo> path = new LinkedList<NeighborInfo>();
+
+    public LookupNodeidReq (NodeId p, NodeId s_id, BigInteger g) {
+    	peer = p;  source_id = s_id;  source_guid = g;
+    }
+
+    public LookupNodeidReq (InputBuffer buffer) throws QSException {	
+    peer = new NodeId (buffer);
+    source_id = new NodeId (buffer);	
+    source_guid = buffer.nextBigInteger ();
+    }
+
+    public void serialize (OutputBuffer buffer) {
+    	peer.serialize (buffer);      
+    	source_id.serialize (buffer);  
+        buffer.add (source_guid);
+    }
+
+    public Object clone () throws CloneNotSupportedException {
+	LookupNodeidReq result = (LookupNodeidReq) super.clone ();
+	result.peer = peer;
+	result.source_id = source_id;
+	result.source_guid = source_guid;
+	return result;
+    }
+
+    public String toString () {
+	StringBuffer result = new StringBuffer (500);
+	result.append ("(LookupNodeidReq peer=");
+	result.append (peer);
+	result.append (" source_id=");
+	result.append (source_id);
+	result.append (" source_guid=0x");
+	result.append (bamboo.util.GuidTools.guid_to_string (source_guid));
+	result.append ("))");
+	return result.toString ();
+    }
+}
+
diff -urN bamboo/src/bamboo/router/LookupNodeidReq.java~ bamboo1/src/bamboo/router/LookupNodeidReq.java~
--- bamboo/src/bamboo/router/LookupNodeidReq.java~	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/router/LookupNodeidReq.java~	2008-05-19 17:46:53.000000000 +0300
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) 2001-2003 Regents of the University of California.
+ * All rights reserved.
+ *
+ * See the file LICENSE included in this distribution for details.
+ */
+
+package bamboo.router;
+import java.math.BigInteger;
+import java.util.Iterator;
+import java.util.LinkedList;
+import ostore.network.NetworkMessage;
+import ostore.util.InputBuffer;
+import ostore.util.NodeId;
+import ostore.util.OutputBuffer;
+import ostore.util.QuickSerializable;
+import seda.sandStorm.api.QueueElementIF;
+import ostore.util.QSException;
+
+/**
+ * LookupNodeidReq.
+ *
+ * @author  Lu xiaopeng
+ * @version $Id: LookupNodeidReq.java,v 1.7 2005/03/02 03:25:45 srhea Exp $
+ */
+public class LookupNodeidReq  
+implements QueueElementIF, QuickSerializable, Cloneable {
+
+    public NodeId source_id;
+    public NodeId peer;
+    public BigInteger source_guid;    
+    //public int rev_ttl;
+    //public LinkedList<NeighborInfo> path = new LinkedList<NeighborInfo>();
+
+    public LookupNodeidReq (NodeId p, NodeId s_id, BigInteger g) {
+    	peer = p;  source_id = s_id;  source_guid = g;
+    }
+
+    public LookupNodeidReq (InputBuffer buffer) throws QSException {	
+    peer = new NodeId (buffer);
+    source_id = new NodeId (buffer);	
+    source_guid = buffer.nextBigInteger ();
+    }
+
+    public void serialize (OutputBuffer buffer) {
+    	peer.serialize (buffer);      
+    	source_id.serialize (buffer);  
+        buffer.add (source_guid);
+    }
+
+    public Object clone () throws CloneNotSupportedException {
+	LookupNodeidReq result = (LookupNodeidReq) super.clone ();
+	result.peer = peer;
+	result.source_id = source_id;
+	result.source_guid = source_guid;
+	return result;
+    }
+
+    public String toString () {
+	StringBuffer result = new StringBuffer (500);
+	result.append ("(LookupNodeidReq peer=");
+	result.append (peer);
+	result.append (" source_id=");
+	result.append (source_id);
+	result.append (" source_guid=0x");
+	result.append (bamboo.util.GuidTools.guid_to_string (source_guid));
+	result.append ("))");
+	return result.toString ();
+    }
+}
+
diff -urN bamboo/src/bamboo/router/LookupNodeidResp.java bamboo1/src/bamboo/router/LookupNodeidResp.java
--- bamboo/src/bamboo/router/LookupNodeidResp.java	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/router/LookupNodeidResp.java	2008-05-16 14:12:29.000000000 +0300
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) 2001-2003 Regents of the University of California.
+ * All rights reserved.
+ *
+ * See the file LICENSE included in this distribution for details.
+ */
+
+package bamboo.router;
+import java.math.BigInteger;
+import java.util.Iterator;
+import java.util.LinkedList;
+import ostore.network.NetworkMessage;
+import ostore.util.InputBuffer;
+import ostore.util.NodeId;
+import ostore.util.OutputBuffer;
+import ostore.util.QuickSerializable;
+import seda.sandStorm.api.QueueElementIF;
+import ostore.util.QSException;
+
+/**
+ * LookupNodeidReq.
+ *
+ * @author  Lu xiaopeng
+ * @version $Id: LookupNodeidReq.java,v 1.7 2005/03/02 03:25:45 srhea Exp $
+ */
+public class LookupNodeidResp extends NetworkMessage {
+
+    public BigInteger source_guid;    
+    //public int rev_ttl;
+    //public LinkedList<NeighborInfo> path = new LinkedList<NeighborInfo>();
+
+    public LookupNodeidResp (NodeId p, NodeId dest_id, NodeId s_id, BigInteger g) {
+    	super (p, dest_id, s_id, false); source_guid = g;
+    }
+
+    public LookupNodeidResp (InputBuffer buffer) throws QSException {	
+    super (buffer);	
+    source_guid = buffer.nextBigInteger ();
+    }
+
+    public void serialize (OutputBuffer buffer) {
+    	super.serialize (buffer); 
+        buffer.add (source_guid);
+    }
+
+    public Object clone () throws CloneNotSupportedException {
+	LookupNodeidResp result = (LookupNodeidResp) super.clone ();
+	result.source_guid = source_guid;
+	return result;
+    }
+
+    public String toString () {
+	StringBuffer result = new StringBuffer (500);
+	result.append ("(LookupNodeidResp super=");
+        result.append (super.toString ());
+	result.append (" source_guid=0x");
+	result.append (bamboo.util.GuidTools.guid_to_string (source_guid));
+	result.append ("))");
+	return result.toString ();
+    }
+}
+
diff -urN bamboo/src/bamboo/router/LookupNodeidResp.java~ bamboo1/src/bamboo/router/LookupNodeidResp.java~
--- bamboo/src/bamboo/router/LookupNodeidResp.java~	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/router/LookupNodeidResp.java~	2008-05-16 14:11:57.000000000 +0300
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) 2001-2003 Regents of the University of California.
+ * All rights reserved.
+ *
+ * See the file LICENSE included in this distribution for details.
+ */
+
+package bamboo.router;
+import java.math.BigInteger;
+import java.util.Iterator;
+import java.util.LinkedList;
+import ostore.network.NetworkMessage;
+import ostore.util.InputBuffer;
+import ostore.util.NodeId;
+import ostore.util.OutputBuffer;
+import ostore.util.QuickSerializable;
+import seda.sandStorm.api.QueueElementIF;
+import ostore.util.QSException;
+
+/**
+ * LookupNodeidReq.
+ *
+ * @author  Lu xiaopeng
+ * @version $Id: LookupNodeidReq.java,v 1.7 2005/03/02 03:25:45 srhea Exp $
+ */
+public class LookupNodeidResp extends NetworkMessage {
+
+    public BigInteger source_guid;    
+    //public int rev_ttl;
+    //public LinkedList<NeighborInfo> path = new LinkedList<NeighborInfo>();
+
+    public LookupNodeidResp (NodeId p, NodeId dest_id, NodeId s_id, BigInteger g) {
+    	super (p, dest_id, s_id_id, false); source_guid = g;
+    }
+
+    public LookupNodeidResp (InputBuffer buffer) throws QSException {	
+    super (buffer);	
+    source_guid = buffer.nextBigInteger ();
+    }
+
+    public void serialize (OutputBuffer buffer) {
+    	super.serialize (buffer); 
+        buffer.add (source_guid);
+    }
+
+    public Object clone () throws CloneNotSupportedException {
+	LookupNodeidResp result = (LookupNodeidResp) super.clone ();
+	result.source_guid = source_guid;
+	return result;
+    }
+
+    public String toString () {
+	StringBuffer result = new StringBuffer (500);
+	result.append ("(LookupNodeidResp super=");
+        result.append (super.toString ());
+	result.append (" source_guid=0x");
+	result.append (bamboo.util.GuidTools.guid_to_string (source_guid));
+	result.append ("))");
+	return result.toString ();
+    }
+}
+
diff -urN bamboo/src/bamboo/router/LookupReqPayload.java bamboo1/src/bamboo/router/LookupReqPayload.java
--- bamboo/src/bamboo/router/LookupReqPayload.java	2003-12-20 23:48:12.000000000 +0200
+++ bamboo1/src/bamboo/router/LookupReqPayload.java	2008-05-13 18:31:00.000000000 +0300
@@ -25,6 +25,7 @@
 public class LookupReqPayload implements QuickSerializable {
 
     public NodeId rtn_addr;
+   
 
     public LookupReqPayload (NodeId s) { rtn_addr = s; }
 
diff -urN bamboo/src/bamboo/router/LookupRespMsg.java bamboo1/src/bamboo/router/LookupRespMsg.java
--- bamboo/src/bamboo/router/LookupRespMsg.java	2004-03-24 01:42:19.000000000 +0200
+++ bamboo1/src/bamboo/router/LookupRespMsg.java	2008-05-15 22:07:54.000000000 +0300
@@ -27,9 +27,9 @@
     public BigInteger lookup_id;
     public BigInteger owner_id;
 
-    public LookupRespMsg (NodeId dest, BigInteger l, BigInteger o) {
-	super (dest, false); lookup_id = l; owner_id = o;
-    }
+    public LookupRespMsg (NodeId dest, NodeId dest_id, NodeId source_id, BigInteger l, BigInteger o) {
+	super (dest, dest_id, source_id, false); lookup_id = l; owner_id = o;
+    }      
 
     public LookupRespMsg (InputBuffer buffer) throws QSException {
 	super (buffer);
diff -urN bamboo/src/bamboo/router/NeighborInfo.java bamboo1/src/bamboo/router/NeighborInfo.java
--- bamboo/src/bamboo/router/NeighborInfo.java	2003-10-05 21:22:11.000000000 +0300
+++ bamboo1/src/bamboo/router/NeighborInfo.java	2008-05-20 18:49:52.000000000 +0300
@@ -21,21 +21,32 @@
  * @version $Id: NeighborInfo.java,v 1.9 2003/10/05 18:22:11 srhea Exp $
  */
 public class NeighborInfo implements Comparable, QuickSerializable {
-
-    public NodeId node_id;
+	
+	public NodeId peer;   //TODO
+    public NodeId node_id;    
     public BigInteger guid;
 
-    public NeighborInfo (NodeId n, BigInteger g) {
-	node_id = n; guid = g;
+    public NeighborInfo (NodeId p, NodeId n, BigInteger g) {  //TODO
+    	peer = p;  node_id = n;  guid = g;
+    }    
+
+    //public NeighborInfo (NodeId n, BigInteger g) {
+    //	node_id = n; guid = g;
+    //    }
+    
+    public void set (NodeId n, NodeId p, BigInteger g) {
+    	peer = p;  node_id = n;  guid = g;
     }
-
+    
     public NeighborInfo (InputBuffer buffer) throws QSException {
-	node_id = new NodeId (buffer);
+    peer = new NodeId(buffer);
+    node_id = new NodeId (buffer);	
 	guid = buffer.nextBigInteger ();
     }
 
     public void serialize (OutputBuffer buffer) {
-        node_id.serialize (buffer);
+    	peer.serialize (buffer);
+    	node_id.serialize (buffer);      
         buffer.add (guid);
     }
 
@@ -57,7 +68,8 @@
     }
 
     public String toString () {
-	return "(" + node_id.address ().getHostAddress () + ":" + 
+	return "( peer:" + peer.address ().getHostAddress () + ":" + 
+	    peer.port () + ", node_id:" + node_id.address ().getHostAddress () + ":" + 
 	    node_id.port () + ", 0x" + GuidTools.guid_to_string (guid) + ")";
     }
 }
diff -urN bamboo/src/bamboo/router/PingMsg.java bamboo1/src/bamboo/router/PingMsg.java
--- bamboo/src/bamboo/router/PingMsg.java	2003-10-05 21:22:11.000000000 +0300
+++ bamboo1/src/bamboo/router/PingMsg.java	2008-05-15 16:34:58.000000000 +0300
@@ -21,10 +21,15 @@
  */
 public class PingMsg extends NetworkMessage {
 
-    public PingMsg (NodeId n) {
-	super (n, false);  
+    public PingMsg (NodeId p, NodeId d, NodeId s) {
+	super (p, d, s, false);  
     }
-
+    
+    /*
+    public PingMsg (NodeId p) {
+    	super (p, false);  
+        }
+    */
     public PingMsg (InputBuffer buffer) throws QSException {
 	super (buffer);
     }
diff -urN bamboo/src/bamboo/router/PrintLeafSets.java bamboo1/src/bamboo/router/PrintLeafSets.java
--- bamboo/src/bamboo/router/PrintLeafSets.java	2004-02-13 06:28:01.000000000 +0200
+++ bamboo1/src/bamboo/router/PrintLeafSets.java	2008-05-16 11:41:49.000000000 +0300
@@ -78,11 +78,11 @@
 	    System.out.println ("Tapestry: ready");
 	    pending.add (gateway);
 	    System.out.println ("Asking " + gateway + " for leaf set");
-	    dispatch (new LeafSetReq (gateway));
+	    dispatch (new LeafSetReq (gateway, gateway, my_node_id));
 	}
 	else if (item instanceof LeafSetChanged) {
 	    LeafSetChanged resp = (LeafSetChanged) item;
-	    System.out.println ("Got leaf set from " + resp.peer);
+	    System.out.println ("Got leaf set from " + resp.peer + ", and the node_id of this peer:" + resp.source_id);
 	    done.put (resp.peer, resp.leaf_set);
 	    pending.remove (resp.peer);
 	    for (Iterator i = resp.leaf_set.iterator (); i.hasNext (); ) {
@@ -94,7 +94,7 @@
 		    pending.add (ni.node_id);
 		    System.out.println (
 			    "Asking " + ni.node_id + " for leaf set");
-		    dispatch (new LeafSetReq (ni.node_id));
+		    dispatch (new LeafSetReq (ni.peer, ni.node_id, my_node_id));
 		}
 	    }
 
diff -urN bamboo/src/bamboo/router/RouteMsg.java bamboo1/src/bamboo/router/RouteMsg.java
--- bamboo/src/bamboo/router/RouteMsg.java	2005-08-16 08:11:44.000000000 +0300
+++ bamboo1/src/bamboo/router/RouteMsg.java	2008-05-15 16:35:49.000000000 +0300
@@ -43,9 +43,9 @@
             return false;
     }
 
-    public RouteMsg (NodeId n, BigInteger s, BigInteger d, long a, 
+    public RouteMsg (NodeId peer, NodeId dest_id, NodeId source_id, BigInteger s, BigInteger d, long a, 
 	    boolean u, BigInteger g, QuickSerializable p) {
-	super (n, false);  
+	super (peer, dest_id, source_id, false);  
 	src = s; 
 	dest = d;  
 	app_id = a;  
diff -urN bamboo/src/bamboo/router/Router.java bamboo1/src/bamboo/router/Router.java
--- bamboo/src/bamboo/router/Router.java	2005-12-15 23:16:14.000000000 +0200
+++ bamboo1/src/bamboo/router/Router.java	2008-06-12 10:38:55.000000000 +0300
@@ -222,6 +222,21 @@
      * <code>registerApplication</code> will be called once the message
      * reaches the node responsible for <code>dest</code>.
      */
+    public NeighborInfo selectMyneigborinfo(NeighborInfo n){
+    	
+    	if (multiNeighbor){    		
+            for (Iterator i = my_neighbor_infos.iterator (); i.hasNext (); ) {
+            	NeighborInfo m = (NeighborInfo) i.next ();
+                if (m.peer.getAddress().getClass() == n.peer.getAddress().getClass()) 
+                	return m;               
+            }    		
+    	}    	
+    		return my_neighbor_info;    	   	
+    }
+    
+    
+    
+    
     public void routeInit(final BigInteger dest, final long applicationID, 
             final boolean intermediateUpcall, final QuickSerializable payload) {
 
@@ -231,13 +246,13 @@
             System.exit(1);
         }
 
-        NeighborInfo next_hop = calc_next_hop (dest, true);
+        NeighborInfo next_hop = calc_next_hop (dest, true);        
         if (next_hop == my_neighbor_info) {
             deliver(my_guid, dest, my_node_id, applicationID, 1,
                     0L, 0L, payload);
         }
         else {
-            RouteMsg outb = new RouteMsg (next_hop.node_id,
+            RouteMsg outb = new RouteMsg (next_hop.peer, next_hop.node_id, my_node_id, 
                     my_guid, dest, applicationID, intermediateUpcall,
                     my_guid, payload);
             outb.comp_q = my_sink;
@@ -271,12 +286,12 @@
         }
 
         NeighborInfo next_hop = calc_next_hop (dest, true);
-	if (next_hop == my_neighbor_info) {
+	if (next_hop == selectMyneigborinfo(next_hop)) {
 	    deliver (src, dest, immediateSource,
 		     applicationID, 1, 0L, 0L, payload);
 	}
 	else {
-	    RouteMsg outb = new RouteMsg (next_hop.node_id,
+	    RouteMsg outb = new RouteMsg (next_hop.peer, next_hop.node_id, my_node_id, 
 		    src, dest, applicationID, intermediateUpcall,
 		    my_guid, payload);
             outb.comp_q = my_sink;
@@ -379,7 +394,7 @@
                 possibly_down_helper.put (ni.node_id, ni);
                 if (logger.isDebugEnabled ()) logger.debug (
                         "added " + ni + " to possibly down");
-                PingMsg outb = new PingMsg (ni.node_id);
+                PingMsg outb = new PingMsg (ni.peer, ni.node_id, my_node_id); //TODO
                 outb.comp_q = my_sink;
                 outb.user_data = new SecondChancePingCB (ni);
                 outb.timeout_sec = 60;
@@ -418,7 +433,7 @@
         new LinkedList<QueueElementIF>();
 
     protected LocationCache location_cache;
-    protected Set<NodeId> down_nodes = new LinkedHashSet<NodeId>();
+    protected Set<NeighborInfo> down_nodes = new LinkedHashSet<NeighborInfo>();
     protected int down_nodes_cap = 20;
     protected boolean immediate_join;
 
@@ -428,7 +443,10 @@
     protected RoutingTable rt;
 
     protected LinkedList<NodeId> gateways = new LinkedList<NodeId>();
-
+    protected LinkedList<NeighborInfo> gateways_neighborinfo = new LinkedList<NeighborInfo>();
+    protected LinkedList<NeighborInfo> my_neighbor_infos = new LinkedList<NeighborInfo>();
+    public boolean multiNeighbor = false;
+    
     protected static class AppData {
 	public AppData (SinkIF s, boolean ls, boolean rt, boolean rrt) {
 	    sink = s;
@@ -468,7 +486,8 @@
 	ostore.util.TypeTable.register_type (LookupReqPayload.class);
 	ostore.util.TypeTable.register_type (NeighborInfo.class);
         ostore.util.TypeTable.register_type(CoordReq.class);
-        ostore.util.TypeTable.register_type(CoordResp.class);
+        ostore.util.TypeTable.register_type(LookupNodeidReq.class);
+        ostore.util.TypeTable.register_type(LookupNodeidResp.class);
 
 	event_types = new Class [] {
 	    BambooAddToLocationCache.class,
@@ -479,10 +498,12 @@
 	inb_msg_types = new Class [] {
 	    PingMsg.class,
 	    JoinReq.class,
-	    JoinResp.class,
+	    JoinResp.class,	    
 	    LeafSetReq.class,
 	    LeafSetChanged.class,
-            LookupRespMsg.class,
+	    LookupNodeidReq.class,  //TODO
+	    LookupNodeidResp.class,  //TODO
+        LookupRespMsg.class,
 	    RouteMsg.class,
 	    RoutingTableReq.class,
 	    RoutingTableResp.class,
@@ -497,6 +518,9 @@
 
     public void init (ConfigDataIF config) throws Exception {
 	super.init (config);
+	
+	    logger.info ("now we are in init function of Router class. call by DustDevil init_node()");
+       
 
         acore.registerTimer(0, ready);
 
@@ -611,10 +635,29 @@
 	    SecureHash my_guid_sh = new SHA1Hash (my_node_id);
             my_guid = GuidTools.secure_hash_to_big_integer (my_guid_sh);
 	}
-
-	my_neighbor_info = new NeighborInfo (my_node_id, my_guid);
+	network = Network.instance(my_node_id);
+	//my_neighbor_info = new NeighborInfo (Network.networkid, my_node_id, my_guid);
         // routers.put (my_guid, this);
-
+	//change the neighbor info initilized. 
+	
+    if (Network.instances.size() > 1) {
+    	multiNeighbor = true;
+    	Set<InetSocketAddress> n = Network.instances.keySet();
+    	Iterator i = Network.instances.keySet ().iterator ();
+         while (i.hasNext ()) {        	 
+        	 Network n_id = Network.instances.get(i.next());
+        	 logger.info("the network of router is: " + n_id);
+        	 my_neighbor_info = new NeighborInfo (n_id.networkid, my_node_id, my_guid);       
+        	 if (! my_neighbor_infos.contains (my_neighbor_info))
+            	 my_neighbor_infos.addLast (my_neighbor_info);        	 
+         }    	
+    } else {
+    	logger.info("the network of router is: " + network);
+    	my_neighbor_info = new NeighborInfo (network.networkid, my_node_id, my_guid);    	
+    	my_neighbor_infos.addLast(my_neighbor_info);    	
+    }
+    
+    logger.info("the my_neighbor_info of router is: " + my_neighbor_info);
 	int gateway_count = config_get_int (config, "gateway_count");
         if (gateway_count < 0) {
             NodeId g = new NodeId (config_get_string (config, "gateway"));
@@ -636,7 +679,7 @@
             }
         }
         boolean am_gateway = false;
-        for (Iterator i = gateways.iterator (); i.hasNext (); ) {
+        for (Iterator i = gateways.iterator (); i.hasNext ();) {
             if (i.next ().equals (my_node_id)) {
                 am_gateway = true;
                 i.remove ();
@@ -657,15 +700,18 @@
 		GuidTools.guid_to_string (my_guid));
 
 	leaf_set_size = configGetInt(config, "leaf_set_size", 2);
-	leaf_set = new LeafSet (my_neighbor_info, leaf_set_size, MODULUS);
-
+	
+	
+	leaf_set = new LeafSet (my_neighbor_info, leaf_set_size, MODULUS);//TODO	
+	logger.info("the my_neighbor_info of router is: " + leaf_set);
+	
         double rt_scale = config_get_double (config, "rt_scale");
         if (rt_scale == -1.0)
             rt_scale = 0.9;
 	rt = new RoutingTable (my_neighbor_info, rt_scale, MODULUS,
 		GUID_DIGITS, DIGIT_VALUES);
         my_digits = rt.guid_to_digits (my_guid);
-
+    
 	rand = new Random (my_guid.longValue ());
 
         location_cache = new LocationCache (
@@ -680,14 +726,17 @@
         if (immediate_join) {
             down_nodes_cap = Math.min (down_nodes_cap, gateways.size ());
             for (Iterator i = gateways.iterator (); i.hasNext (); ) {
-                NodeId n = (NodeId) i.next ();
-                add_to_down_nodes (n);
-                i.remove ();
+                NodeId n = (NodeId) i.next ();                
+                dispatch( new LookupNodeidReq(n, my_node_id, my_guid));
+                //add_to_down_nodes (n);
+                //i.remove ();
             }
         }
 
         // Done initializing.  Make ourselves available.
-        instances.put (my_node_id, this);
+        instances.put (my_node_id, this);        
+
+		logger.info ("end of init function of router"); //added by luxiaopeng
     }
 
     public void handleEvent (QueueElementIF item) {
@@ -697,14 +746,25 @@
 
 	if (item instanceof PingMsg) {
             // Ignore it; the network-level ACK is all that's important.
-        }
+        }  
+	else if (item instanceof LookupNodeidReq) {
+		logger.info("recevied the LookupNodeidReq");
+		final LookupNodeidReq msg = (LookupNodeidReq) item;
+		if (msg.source_id != my_node_id) {
+			dispatch(new LookupNodeidResp(msg.peer, msg.source_id, my_node_id, my_guid));	
+		}        
+        }
+	else if (item instanceof LookupNodeidResp) {
+		logger.info("recevied the LookupNodeidResp");
+		handle_lookup_nodeid_resp((LookupNodeidResp) item);
+	}
 	else if (item instanceof JoinResp) {
 	    handle_join_resp ((JoinResp) item);
 	}
 	else if (item instanceof RoutingNeighborAnnounce) {
 	    handle_rt_annc ((RoutingNeighborAnnounce) item);
 	}
-        else if (item instanceof NetworkMessageResult) {
+        else if (item instanceof NetworkMessageResult) {        	
             handle_net_msg_result ((NetworkMessageResult) item);
         }
         else if (item instanceof NetworkLatencyResp) {
@@ -736,7 +796,7 @@
 		else if (item instanceof BambooAddToLocationCache) {
 		    BambooAddToLocationCache req =
                         (BambooAddToLocationCache) item;
-                    NeighborInfo ni = new NeighborInfo (req.node_id, req.guid);
+                    NeighborInfo ni = new NeighborInfo (req.peer, req.node_id, req.guid);   //when will the BambooAddToLocationCache use? 
                     location_cache.add_node (ni);
 		}
 		else if (item instanceof BambooRouteContinue) {
@@ -766,8 +826,8 @@
 
     protected void handle_net_msg_result (NetworkMessageResult result) {
         NetMsgResultCB cb = (NetMsgResultCB) result.user_data;
-        if (result.success)
-            cb.success ();
+        if (result.success){        	
+            cb.success ();}
         else
             cb.failure ();
     }
@@ -778,7 +838,7 @@
         public void success () {
             periodic_pings.remove (ni);
             generic_msg_success (ni);
-            dispatch (new NetworkLatencyReq (ni.node_id, my_sink, ni));
+            dispatch (new NetworkLatencyReq (ni.peer, ni.node_id, my_sink, ni));
         }
         public void failure () {
             periodic_pings.remove (ni);
@@ -833,7 +893,7 @@
                     if ((! periodic_pings.contains (ni) &&
                                 (! possibly_down.containsKey (ni)))) {
                         periodic_pings.add (ni);
-                        PingMsg outb = new PingMsg (ni.node_id);
+                        PingMsg outb = new PingMsg (ni.peer, ni.node_id, my_node_id); //TODO
                         outb.comp_q = my_sink;
                         outb.user_data = new PeriodicPingCB (ni);
                         outb.timeout_sec = 5;
@@ -881,7 +941,7 @@
     }
 
     protected void handle_rt_annc (RoutingNeighborAnnounce annc) {
-	NeighborInfo ni = new NeighborInfo (annc.peer, annc.guid);
+	NeighborInfo ni = new NeighborInfo (annc.peer, annc.source_id, annc.guid);
 	if (annc.add)
 	    add_to_rrt (ni);
 	else
@@ -892,7 +952,7 @@
 
 	if (logger.isDebugEnabled ()) logger.debug (ni + " is down.");
 
-        add_to_down_nodes (ni.node_id);
+        add_to_down_nodes (ni);
 
         if (latency_map.containsKey (ni))
             latency_map.remove (ni);
@@ -954,15 +1014,14 @@
         public void run() {
             if (down_nodes.size () > 0) {
                 int which = rand.nextInt (down_nodes.size ());
-                Iterator<NodeId> i = down_nodes.iterator ();
-                NodeId n = null;
+                Iterator<NeighborInfo> i = down_nodes.iterator ();
+                NeighborInfo n = null;
                 while (which-- >= 0)
                     n = i.next ();
-
-                JoinReq outb = new JoinReq (n, my_node_id, my_guid, 0);
+                JoinReq outb = new JoinReq (n.peer, n.node_id, my_node_id, my_guid, 0);
                 outb.timeout_sec = 10;
                 outb.comp_q = my_sink;
-                outb.user_data = new PartitionCheckCB (n);
+                outb.user_data = new PartitionCheckCB (n.node_id);
                 if (logger.isDebugEnabled ()) logger.debug (
                         "sending " + outb + " to check for partition");
                 dispatch (outb);
@@ -984,11 +1043,12 @@
             // one of our leaf set members.
 
             NeighborInfo ni = leaf_set.random_member (rand);
-
+            
+            //logger.info("leafSetAlarm leaf_set: " + leaf_set); 
             // Try not to slam nodes that are already behind.
             if ((ni != null) && (! possibly_down.containsKey (ni))) {
                 LeafSetChanged outb =
-                    new LeafSetChanged(ni.node_id, my_guid, leaf_set.as_list());
+                    new LeafSetChanged(ni.peer, ni.node_id, my_node_id, my_guid, leaf_set.as_list());
                 use_as_periodic_ping (ni, outb);
                 outb.want_reply = true;
                 dispatch (outb);
@@ -998,12 +1058,12 @@
     };
 
     protected void handle_leaf_set_req (LeafSetReq req) {
-	dispatch (new LeafSetChanged (req.peer, my_guid, leaf_set.as_list ()));
+	dispatch (new LeafSetChanged (req.peer, req.source_id, my_node_id, my_guid, leaf_set.as_list ()));
     }
 
     protected void handle_leaf_set_changed (LeafSetChanged msg) {
 
-	NeighborInfo sender = new NeighborInfo (msg.peer, msg.guid);
+	NeighborInfo sender = new NeighborInfo (msg.peer, msg.source_id, msg.guid);
         location_cache.add_node (sender);
 
 	// For each person in the sender's leaf set, if they are not in our
@@ -1015,7 +1075,23 @@
             // that they're up, such as receiving a message from them.
             // location_cache.add_node (other);
 	    if (leaf_set.promising (other)) {
-                add_to_ls (other);
+	    	//add the address type check, if there is not the relevant the network  
+	    	//for the other, modify the other.peer to the msg.peer  added by Luxiaopeng
+	    	    if(other.peer.getAddress().getClass() == msg.peer.getAddress().getClass()){
+	    	    	add_to_ls (other);
+	    	    } else {
+	    	    	Iterator j = Network.instances.keySet ().iterator ();
+	    	        while (j.hasNext ()) {        	 
+	    	          	 Network n_id = Network.instances.get(j.next());      	 
+	    	          	 if (other.peer.getAddress().getClass() == n_id.addr.getAddress().getClass())
+	    	          		 network = n_id;       	 
+	    	           }
+	    	           if (network == null ){
+	    	   		    logger.info ("there is no network for this node:" + other);
+	    	   		    other.peer = msg.peer;
+	    	           }
+	    	           add_to_ls (other);
+	    	    }              
 	    }
 	    else if (logger.isDebugEnabled ())
                 logger.debug (other + " isn't promising.");
@@ -1029,8 +1105,8 @@
 	// Respond in kind.
 
 	if (msg.want_reply) {
-            LeafSetChanged outb = new LeafSetChanged (
-                    sender.node_id, my_guid, leaf_set.as_list ());
+            LeafSetChanged outb = new LeafSetChanged (sender.peer, 
+                    sender.node_id, my_node_id, my_guid, leaf_set.as_list ());
             use_as_periodic_ping (sender, outb);
             dispatch (outb);
 	}
@@ -1125,7 +1201,7 @@
                     for (int digit = 0; digit < DIGIT_VALUES; ++digit) {
                         NeighborInfo ni = rt.primary (level, digit);
                         if ((ni != null) && (! ni.equals (my_neighbor_info))) {
-                            added [j++] = new BambooNeighborInfo (
+                            added [j++] = new BambooNeighborInfo (ni.peer,  
                                     ni.node_id, ni.guid, rtt_ms (ni));
                         }
                     }
@@ -1137,7 +1213,7 @@
                 j = 0;
                 for (Iterator i = reverse_rt.iterator (); i.hasNext (); ) {
                     NeighborInfo ni = (NeighborInfo) i.next ();
-                    added [j++] = new BambooNeighborInfo (ni.node_id, ni.guid);
+                    added [j++] = new BambooNeighborInfo (ni.peer, ni.node_id, ni.guid);
                 }
                 if (rrtct != null)
                     rrtct.run(added, null);
@@ -1167,9 +1243,9 @@
         if (app_id == 0) {
             if (payload instanceof LookupReqPayload) {
                 LookupReqPayload req = (LookupReqPayload) payload;
-                NeighborInfo peer_ni = new NeighborInfo (req.rtn_addr, src);
+                NeighborInfo peer_ni = new NeighborInfo (req.rtn_addr, req.rtn_addr, src);   //TODO
                 location_cache.add_node (peer_ni);
-                dispatch (new LookupRespMsg (req.rtn_addr, dest, my_guid));
+                dispatch (new LookupRespMsg (req.rtn_addr, req.rtn_addr, my_node_id, src, my_guid));  //TODO
             }
             else {
                 if (logger.isDebugEnabled ())
@@ -1205,7 +1281,7 @@
     }
 
     protected void handle_route_msg (final RouteMsg req) {
-        NeighborInfo peer_ni = new NeighborInfo (req.peer, req.peer_guid);
+        NeighborInfo peer_ni = new NeighborInfo (req.peer, req.source_id, req.peer_guid);
         location_cache.add_node (peer_ni);
 
 	NeighborInfo next_hop = calc_next_hop (req.dest, true);
@@ -1233,7 +1309,7 @@
                     }
                 }
 
-		RouteMsg outb = new RouteMsg (next_hop.node_id,
+		RouteMsg outb = new RouteMsg (next_hop.peer, next_hop.node_id, my_node_id,  
 			req.src, req.dest, req.app_id, req.intermediate_upcall,
 			my_guid, req.payload);
                 outb.comp_q = my_sink;
@@ -1291,34 +1367,37 @@
     }
 
     protected Runnable ready = new Runnable() {
-        public void run() {
-            network = Network.instance(my_node_id);
+        public void run() {        	
+            //network = Network.instance(my_node_id);
             vivaldi = Vivaldi.instance(my_node_id);
             rpc = Rpc.instance(my_node_id);
-            try {
-                rpc.registerRequestHandler(CoordReq.class, coordReqHandler);
+            try {            	
+                rpc.registerRequestHandler(CoordReq.class, coordReqHandler);                
             }
             catch (DuplicateTypeException e) { BUG(e); }
             start_time_ms = now_ms ();
-            if (gateways.isEmpty ()) {
+            if (gateways_neighborinfo.isEmpty ()) {
                 logger.info ("Joined through gateway " + my_node_id);
                 set_initialized ();
                 notify_leaf_set_changed ();
             }
             else {
-                NodeId gateway = gateways.removeFirst ();
-                gateways.addLast (gateway);
-                logger.info ("Trying to join through gateway " + gateway);
-                dispatch (new JoinReq (gateway, my_node_id, my_guid, 0));
+            	NeighborInfo gateway = gateways_neighborinfo.removeFirst ();  //why remove first and then add last..  what does this change order mean?
+                gateways_neighborinfo.addLast (gateway);
+                logger.info ("Trying to Lookup the node_id of gateway " + gateway);//we should send joinreq after lookupnodeidreq message. 
+                //dispatch (new LookupNodeidReq (gateway, my_node_id, my_guid));
+                dispatch (new JoinReq (gateway.peer, gateway.node_id, my_node_id, my_guid, 0));
                 acore.registerTimer(randomPeriod(10*1000), 
                         curry(joinAlarm, new Integer(0), 
-                            new Integer(10*1000), // 10 seconds for starters
-                            new Integer(0)));
+                        new Integer(10*1000), // 10 seconds for starters
+                        new Integer(0)));
             } 
             acore.registerTimer(randomPeriod(periodic_ping_period), pingAlarm);
             acore.registerTimer(randomPeriod(COORD_CHECK), expireCoordsAlarm);
             acore.registerTimer(randomPeriod(send_coord_period), 
                                 sendCoordsAlarm);
+            
+            //logger.info ("\nin the ready,... the end of ready\n");
         }
     };
 
@@ -1384,7 +1463,7 @@
                 // Try not to slam nodes that are already behind.
                 if (! possibly_down.containsKey (ni)) {
                     RoutingTableReq outb =
-                        new RoutingTableReq (ni.node_id, my_guid, which);
+                        new RoutingTableReq (ni.peer, ni.node_id, my_node_id, my_guid, which);
                     use_as_periodic_ping (ni, outb);
                     dispatch (outb);
                 }
@@ -1507,7 +1586,7 @@
                     + GuidTools.guid_to_string (resp.owner_id));
         }
 
-	NeighborInfo ni = new NeighborInfo (resp.peer, resp.owner_id);
+	NeighborInfo ni = new NeighborInfo (resp.peer, resp.source_id, resp.owner_id);
         add_to_rt (ni);
         location_cache.add_node (ni);
 
@@ -1527,7 +1606,7 @@
 	    return;
 	}
 
-	NeighborInfo ni = new NeighborInfo (req.peer, req.guid);
+	NeighborInfo ni = new NeighborInfo (req.peer, req.source_id, req.guid);
         // add_to_rt (ni);
         location_cache.add_node (ni);
 
@@ -1543,7 +1622,7 @@
 	}
 
 	RoutingTableResp outb =
-            new RoutingTableResp (req.peer, my_guid, neighbors);
+            new RoutingTableResp (req.peer, req.source_id, my_node_id , my_guid, neighbors);
         if (leaf_set.contains (ni) || rt.contains (ni)
                 || reverse_rt.contains (ni))
             use_as_periodic_ping (ni, outb);
@@ -1551,7 +1630,7 @@
     }
 
     protected void handle_routing_table_resp (RoutingTableResp resp) {
-        NeighborInfo peer_ni = new NeighborInfo (resp.peer, resp.peer_guid);
+        NeighborInfo peer_ni = new NeighborInfo (resp.peer, resp.source_id, resp.peer_guid);
         location_cache.add_node (peer_ni);
 
         // Find all the nodes that are neither in our leaf set or routing
@@ -1604,11 +1683,27 @@
             Iterator<NeighborInfo> i = new_nodes.iterator ();
             while (i.hasNext ()) {
                 NeighborInfo ni = i.next ();
+                //modify the node's peer if there is no network for address type.
+                if(ni.peer.getAddress().getClass() == resp.peer.getAddress().getClass()){	    	    	
+	    	     //do nothing
+                } else {
+	    	    	Iterator j = Network.instances.keySet ().iterator ();
+	    	        while (j.hasNext ()) {        	 
+	    	          	 Network n_id = Network.instances.get(j.next());      	 
+	    	          	 if (ni.peer.getAddress().getClass() == n_id.addr.getAddress().getClass())
+	    	          		 network = n_id;       	 
+	    	           }
+	    	           if (network == null ){
+	    	   		    logger.info ("there is no network for this node:" + ni);
+	    	   		    ni.peer = resp.peer;
+	    	           }
+                }
+	    	           
                 if (rt.fills_hole (ni)) {
                     if (logger.isDebugEnabled ())
                         logger.debug (ni + " fills a hole.");
-                    i.remove ();
-                    add_to_rt (ni);
+                    i.remove ();        
+    	    	    add_to_rt (ni);    	    	                              
                 }
                 else if (logger.isDebugEnabled ())
                     logger.debug (ni + " doesn't fill a hole.");
@@ -1623,6 +1718,7 @@
                     new_nodes.removeFirst ();
 
                 NeighborInfo ni = new_nodes.getFirst ();
+                
                 add_to_rt (ni);
 
                 // Also, if this node didn't send this response to me, I might
@@ -1638,7 +1734,7 @@
                         new LinkedList<NeighborInfo>();
                     only_me.addLast (my_neighbor_info);
                     RoutingTableResp outb =
-                        new RoutingTableResp (ni.node_id, my_guid, only_me);
+                        new RoutingTableResp (ni.peer, ni.node_id, my_node_id, my_guid, only_me);
                     use_as_periodic_ping (ni, outb);
                     dispatch (outb);
                 }
@@ -1706,19 +1802,42 @@
                 period = new Integer(period.intValue() >= 30*1000 
                                      ? 60*1000 : period.intValue() * 2);
                 int divisor = Math.max (3, gateways.size ());
-                NodeId gateway = gateways.removeFirst ();
-                gateways.addLast (gateway);
+                NeighborInfo gateway = gateways_neighborinfo.removeFirst ();
+                gateways_neighborinfo.addLast (gateway);
                 logger.info ("Join try " + tries +
                         " timed out.  Gateway=" + gateway + ".  Trying again " +
                         " with rev_ttl=" + revTTL.intValue()/divisor);
-                dispatch (new JoinReq (gateway, my_node_id, my_guid, 
+                dispatch (new JoinReq (gateway.peer, gateway.node_id, my_node_id, my_guid, 
                                        revTTL.intValue()/divisor));
                 acore.registerTimer(randomPeriod(period.intValue()),
                                     curry(this, tries, period, revTTL));
+            
             }
         }
     };
 
+    protected void handle_lookup_nodeid_resp(LookupNodeidResp resp){
+    	
+    	if( ! resp.dest_id.equals(my_node_id) ) {
+    		logger.warn ("receivel the wrong LookupNodeidResp " + resp);
+    		return;
+    	}
+    	if (gateways.contains(resp.peer)){
+    		
+    		logger.info("the resp.peer is in the gateway list.");
+    		NeighborInfo gateway = new NeighborInfo(resp.peer, resp.source_id, resp.source_guid);
+    		gateways_neighborinfo.addLast(gateway); 
+    		gateways.remove(resp.peer);
+    		add_to_down_nodes(gateway);
+    		
+    		logger.info ("Join throught the Gateway " + resp.source_id);
+    		dispatch (new JoinReq (gateway.peer, gateway.node_id, my_node_id, my_guid, 0)); 
+    		acore.registerTimer(randomPeriod(10*1000), 
+                          curry(joinAlarm, new Integer(0), 
+                          new Integer(10*1000), // 10 seconds for starters
+                          new Integer(0)));                    
+    	}
+    }
     protected void handle_join_req (JoinReq req) {
 
         // Check for routing loops, and if one is found, just drop the
@@ -1729,11 +1848,22 @@
             logger.warn ("loop in join path: " + req);
             return;
         }
-
-        NeighborInfo joiner = new NeighborInfo (req.node_id, req.guid);
-
+        NeighborInfo joiner = new NeighborInfo (req.peer, req.source_id, req.guid);
+        
+        // set the peer field of the my_neighbor_info   //TODO
+        if (req.peer != null){        	          	
+        for (Iterator i = my_neighbor_infos.iterator (); i.hasNext ();) {
+        	NeighborInfo m = (NeighborInfo) i.next();
+        	if (m.node_id.getAddress().getClass() == req.peer.getAddress().getClass())
+        	{
+        		my_neighbor_info.peer = req.peer;
+        		break;
+        	}
+        }	
+        }
+                
         // Don't use location cache for joins.
-	NeighborInfo next_hop = calc_next_hop (req.guid, false);
+	    NeighborInfo next_hop = calc_next_hop (req.guid, false);
         int hops_to_go = est_hops_to_go (req.guid, false);
 
         // Don't add nodes to the location cache w/o direct
@@ -1754,9 +1884,11 @@
 	    LinkedList<NeighborInfo> path = new LinkedList<NeighborInfo>();
             for (NeighborInfo n : req.path) 
                 path.addLast(n);
+
+            
 	    path.addLast (my_neighbor_info);
 
-	    dispatch (new JoinResp (req.node_id, path, leaf_set.as_set ()));
+	    dispatch (new JoinResp (req.peer, req.source_id, my_node_id, path, leaf_set.as_set ())); //TODO
 
 	    // Add it to our leaf set and routing table.
 
@@ -1771,8 +1903,8 @@
 	    catch (CloneNotSupportedException e) {
                 BUG (e);
 	    }
-	    req.path.addLast (my_neighbor_info);
-	    req.peer = next_hop.node_id;
+	    req.path.addLast (my_neighbor_info);	    
+	    req.peer = next_hop.peer;
 	    req.inbound = false;
             req.comp_q = my_sink;
             req.user_data = new RecursiveRouteCB (next_hop, 
@@ -1786,10 +1918,11 @@
 
 	// The one who sent this message should be last in the path.
 
+    // modify the my_root.node_id.equals (resp.peer) to the my_root.node_id.equals (resp.nodeid)
 	NeighborInfo my_root = (NeighborInfo) resp.path.getLast ();
-	if (! my_root.node_id.equals (resp.peer)) {
-	    logger.warn ("my_root=" + my_root + ", but join resp.peer=" +
-		    resp.peer + ".  Retrying join.");
+	if (! my_root.node_id.equals (resp.source_id)) {
+	    logger.warn ("my_root=" + my_root + ", but join resp.sender=" +
+		    resp.sender + ".  Retrying join.");
 	    // Wait for timeout.
 	    return;
 	}
@@ -1860,7 +1993,7 @@
 
 	    pings_in_flight.add (ni);
 
-            PingMsg outb = new PingMsg (ni.node_id);
+            PingMsg outb = new PingMsg (ni.peer, ni.node_id, my_node_id);  
             outb.comp_q = my_sink;
             outb.user_data = new ProbePingCB (ni);
             outb.timeout_sec = 5;
@@ -1871,10 +2004,11 @@
     protected class ProbePingCB implements NetMsgResultCB {
         NeighborInfo ni;
         public ProbePingCB (NeighborInfo n) { ni = n; }
-        public void success () {
+        public void success () {        	
             pings_in_flight.remove (ni);
             generic_msg_success (ni);
-            dispatch (new NetworkLatencyReq (ni.node_id, my_sink, ni));
+            //logger.info("In the ProbePingCB and the node: " + ni);
+            dispatch (new NetworkLatencyReq (ni.peer, ni.node_id, my_sink, ni));
         }
         public void failure () {
 	    pings_in_flight.remove (ni);
@@ -1886,6 +2020,7 @@
 
         if (! resp.success) return;
 
+        //logger.info("In the handle_net_lat_resp" + resp);
         NeighborInfo ni = (NeighborInfo) resp.user_data;
 
         // We got this resp. b/c we think the node is up.  But if it's in
@@ -1918,6 +2053,7 @@
     //
     //////////////////////////////////////////////////////////////////////
 
+    //We should modify this function, because not all node in leafSetchanged can be reach. we should update the peer field of the node in lfset.  
     protected void add_to_ls (NeighborInfo ni) {
         if (! leaf_set.contains (ni)) {
             if (have_rtt_ms (ni))
@@ -1938,7 +2074,11 @@
 
                 if (r == my_neighbor_info) {
                     buf = new StringBuffer (50);
-                    buf.append ("added ");
+                    buf.append ("added peer:");
+                    buf.append (ni.peer.address ().getHostAddress ());
+                    buf.append (":");
+                    buf.append (ni.peer.port ());
+                    buf.append (", node_id :");
                     buf.append (ni.node_id.address ().getHostAddress ());
                     buf.append (":");
                     buf.append (ni.node_id.port ());
@@ -1946,11 +2086,19 @@
                 }
                 else {
                     buf = new StringBuffer (80);
-                    buf.append ("replaced ");
+                    buf.append ("replaced peer:");
+                    buf.append (r.peer.address ().getHostAddress ());
+                    buf.append (":");
+                    buf.append (r.peer.port ());
+                    buf.append (", node_id :");
                     buf.append (r.node_id.address ().getHostAddress ());
                     buf.append (":");
                     buf.append (r.node_id.port ());
-                    buf.append (" with ");
+                    buf.append (" with peer: ");
+                    buf.append (ni.peer.address ().getHostAddress ());
+                    buf.append (":");
+                    buf.append (ni.peer.port ());
+                    buf.append (", node_id :");
                     buf.append (ni.node_id.address ().getHostAddress ());
                     buf.append (":");
                     buf.append (ni.node_id.port ());
@@ -2040,16 +2188,16 @@
         if (r != my_neighbor_info) {
             removed = new BambooNeighborInfo [1];
             removed [0] =
-                new BambooNeighborInfo (r.node_id, r.guid, rtt_ms (r));
+                new BambooNeighborInfo (r.peer, r.node_id, r.guid, rtt_ms (r));
 
-            dispatch (new RoutingNeighborAnnounce (
-                        r.node_id, my_guid, false));
+            dispatch (new RoutingNeighborAnnounce (r.peer, 
+                        r.node_id, my_node_id, my_guid, false));
         }
 
-        dispatch (new RoutingNeighborAnnounce (ni.node_id, my_guid, true));
+        dispatch (new RoutingNeighborAnnounce (ni.peer, ni.node_id, my_node_id, my_guid, true));
 
         BambooNeighborInfo [] added = {
-            new BambooNeighborInfo (ni.node_id, ni.guid, rtt_ms)
+            new BambooNeighborInfo (ni.peer, ni.node_id, ni.guid, rtt_ms)
         };
         notify_routing_table_changed (added, removed);
 
@@ -2098,7 +2246,7 @@
         }
 
 	BambooNeighborInfo [] removed = {
-	    new BambooNeighborInfo (ni.node_id, ni.guid)
+	    new BambooNeighborInfo (ni.peer, ni.node_id, ni.guid)
 	};
 
 	notify_routing_table_changed (null, removed);
@@ -2118,7 +2266,7 @@
 	    reverse_rt.add (ni);
 
 	    BambooNeighborInfo [] added = {
-		new BambooNeighborInfo (ni.node_id, ni.guid)
+		new BambooNeighborInfo (ni.peer, ni.node_id, ni.guid)
 	    };
 
 	    notify_reverse_routing_table_changed (added, null);
@@ -2128,7 +2276,7 @@
     protected boolean remove_from_rrt (NeighborInfo ni) {
         if (reverse_rt.remove (ni)) {
             BambooNeighborInfo [] removed = {
-                new BambooNeighborInfo (ni.node_id, ni.guid)
+                new BambooNeighborInfo (ni.peer, ni.node_id, ni.guid)
             };
 
             notify_reverse_routing_table_changed (null, removed);
@@ -2417,12 +2565,12 @@
 	return GuidTools.in_range_mod(low, high, query, MODULUS);
     }
 
-    protected void add_to_down_nodes (NodeId n) {
+    protected void add_to_down_nodes (NeighborInfo n) {
         if (down_nodes_cap > 0) {
             down_nodes.remove (n);
             down_nodes.add (n);
             if (down_nodes.size () > down_nodes_cap) {
-                Iterator<NodeId> i = down_nodes.iterator ();
+                Iterator<NeighborInfo> i = down_nodes.iterator ();
                 assert i.hasNext ();
                 i.next ();
                 i.remove ();
@@ -2504,7 +2652,7 @@
     protected LinkedList<NeighborInfo> sendCoordsShuffle = 
         new LinkedList<NeighborInfo>();
 
-    protected int send_coord_period = 1000;
+    protected int send_coord_period = 5000;  //TODO 1000 before
 
     protected Runnable sendCoordsAlarm = new Runnable() {
         public void run() {
@@ -2516,8 +2664,9 @@
             if (!sendCoordsShuffle.isEmpty()) {
                 NeighborInfo ni = sendCoordsShuffle.removeFirst();
                 CoordReq req = 
-                    new CoordReq(my_guid, vivaldi.localCoordinates()); 
-                rpc.sendRequest(ni.node_id, req, 5, CoordResp.class, 
+                    new CoordReq(my_node_id, my_guid, vivaldi.localCoordinates()); 
+                logger.info("send a CoordReq for the sendCoordsShuffle to the ni.peer: " + ni.peer);   //TODO
+                rpc.sendRequest(ni.peer, req, 5, CoordResp.class, 
                                 curry(coordRespHandler, ni), null);
             }
             acore.registerTimer(randomPeriod(send_coord_period), this);
@@ -2535,7 +2684,7 @@
         new Thunk3<InetSocketAddress,CoordReq,Object>() {
         public void run(InetSocketAddress peer, CoordReq req, Object respTok) {
             NeighborInfo other = 
-                new NeighborInfo(NodeId.create(peer), req.srcID);
+                new NeighborInfo(NodeId.create(peer), req.node_id, req.srcID);
             coords.put(other, Pair.create(req.srcCoords, new Long(timer_ms())));
             VirtualCoordinate local = vivaldi.localCoordinates();
             rpc.sendResponse(new CoordResp(vivaldi.localCoordinates()),respTok);
diff -urN bamboo/src/bamboo/router/Router.java~ bamboo1/src/bamboo/router/Router.java~
--- bamboo/src/bamboo/router/Router.java~	1970-01-01 02:00:00.000000000 +0200
+++ bamboo1/src/bamboo/router/Router.java~	2008-05-16 15:29:10.000000000 +0300
@@ -0,0 +1,2635 @@
+/*
+ * Copyright (c) 2001-2003 Regents of the University of California.
+ * All rights reserved.
+ *
+ * See the file LICENSE included in this distribution for details.
+ */
+
+package bamboo.router;
+
+import bamboo.api.BambooAddToLocationCache;
+import bamboo.api.BambooLeafSetChanged;
+import bamboo.api.BambooNeighborInfo;
+import bamboo.api.BambooReverseRoutingTableChanged;
+import bamboo.api.BambooRouteContinue;
+import bamboo.api.BambooRouteDeliver;
+import bamboo.api.BambooRouteInit;
+import bamboo.api.BambooRouteUpcall;
+import bamboo.api.BambooRouterAppRegReq;
+import bamboo.api.BambooRouterAppRegResp;
+import bamboo.api.BambooRoutingTableChanged;
+import bamboo.lss.ASyncCore;
+import bamboo.lss.DuplicateTypeException;
+import bamboo.lss.DustDevil;
+import bamboo.lss.Network;
+import bamboo.lss.Rpc;
+import bamboo.dht.Dht;
+import bamboo.util.GuidTools;
+import bamboo.util.Pair;
+import bamboo.util.StandardStage;
+import bamboo.vivaldi.Vivaldi;
+import bamboo.vivaldi.VirtualCoordinate;
+import java.io.FileInputStream;
+import java.math.BigInteger;
+import java.net.InetSocketAddress;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.LinkedList;
+import java.util.Map;
+import java.util.Random;
+import java.util.Set;
+import org.apache.log4j.Level;
+import org.apache.log4j.Level;
+import ostore.network.NetworkLatencyReq;
+import ostore.network.NetworkLatencyResp;
+import ostore.network.NetworkMessage;
+import ostore.network.NetworkMessageResult;
+import ostore.security.QSPublicKey;
+import ostore.util.NodeId;
+import ostore.util.QSIO;
+import ostore.util.QuickSerializable;
+import ostore.util.SHA1Hash;
+import ostore.util.SecureHash;
+import seda.sandStorm.api.ConfigDataIF;
+import seda.sandStorm.api.QueueElementIF;
+import seda.sandStorm.api.SingleThreadedEventHandlerIF;
+import seda.sandStorm.api.SinkException;
+import seda.sandStorm.api.SinkIF;
+import static bamboo.util.Curry.*;
+
+/**
+ * The routing and dynamic ring maintenance code for Bamboo.
+ *
+ * @author Sean C. Rhea
+ * @version $Id: Router.java,v 1.119 2005/12/15 21:16:14 srhea Exp $
+ */
+public class Router extends StandardStage
+implements SingleThreadedEventHandlerIF {
+
+    protected static Map<NodeId,Router> instances = 
+        new LinkedHashMap<NodeId,Router>();
+
+    /**
+     * Returns the Router stage for a given Bamboo node.
+     */
+    public static Router instance (NodeId nodeID) {
+        return instances.get (nodeID);
+    }
+
+    /**
+     * Computes an app_id based on the class name for convenience.  
+     */
+    public static final long app_id (Class clazz) {
+        return ostore.util.ByteUtils.bytesToLong (
+                (new SHA1Hash (clazz.getName ())).bytes (),
+                new int [1]);
+    }
+
+    /**
+     * Computes an app_id based on the class name for convenience.
+     */
+    public static final long applicationID(Class clazz) {
+        return app_id(clazz);
+    }
+
+    protected static class ApplicationInfo {
+
+        Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]> leafSetChanged;
+        Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]> routingTableChanged;
+        Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]> 
+            reverseRoutingTableChanged;
+        Thunk6<BigInteger,BigInteger,NodeId,Long,Long,QuickSerializable> 
+            routeUpcall;
+        Thunk6<BigInteger,BigInteger,NodeId,Long,Long,QuickSerializable> 
+            routeDeliver;
+
+        ApplicationInfo(
+               Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]> 
+               leafSetChanged,
+               Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]> 
+               routingTableChanged,
+               Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]> 
+               reverseRoutingTableChanged,
+               Thunk6<BigInteger,BigInteger,NodeId,Long,Long,QuickSerializable> 
+               routeUpcall,
+               Thunk6<BigInteger,BigInteger,NodeId,Long,Long,QuickSerializable> 
+               routeDeliver) {
+            this.leafSetChanged = leafSetChanged;
+            this.routingTableChanged = routingTableChanged;
+            this.reverseRoutingTableChanged = reverseRoutingTableChanged;
+            this.routeUpcall = routeUpcall;
+            this.routeDeliver = routeDeliver;
+        }
+    }
+
+    protected Map<Long,ApplicationInfo> apps = 
+        new LinkedHashMap<Long,ApplicationInfo>();
+
+    /**
+     * Thrown if {@link #registerApplication} is called with a duplicate
+     * application ID.
+     */
+    public static class DuplicateApplicationException extends Exception {
+        public DuplicateApplicationException(String msg) { super(msg); }
+    };
+
+    /**
+     * Register an application (such as bamboo.dht.Dht) to use the Router.
+     * 
+     * @param id A value to identify this application in route messages sent
+     * across the network.
+     *
+     * @param leafSetChanged Called when the leaf set changes.  The first
+     * array is the new predecessor list; the second is the new successor
+     * list.
+     *
+     * @param routingTableChanged Called when the routing table changes.  The
+     * first array is the nodes added to the routing table; the second is
+     * those removed from the routing table.
+     *
+     * @param reverseRoutingTableChanged Called when we are added to or
+     * removed from some other node's routing table.  The first array is the
+     * nodes added to the routing table; the second is those removed from the
+     * routing table.
+     *
+     * @param routeUpcall Called when a message is routed through this node,
+     * and the source specified that it should upcall at nodes that are not
+     * the root of the destination ID.  The arguments are source ID,
+     * destination ID, immediate source IP:port, the queuing time before the
+     * message was forwarded, the estimated round trip time from the immediate
+     * source to this node, and the payload.
+     *
+     * @param routeDeliver Called when we are the root for a route message.
+     * The arguments are source ID, destination ID, immediate source IP:port,
+     * the queuing time before the message was forwarded, the estimated round
+     * trip time from the immediate source to this node, and the payload.
+     *
+     * @throws DuplicateApplicationException if
+     * <code>registerApplication</code> has already been called with this
+     * <code>id</code>
+     */
+    public void registerApplication(long id,
+            Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]> leafSetChanged,
+            Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]> 
+            routingTableChanged,
+            Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]> 
+            reverseRoutingTableChanged,
+            Thunk6<BigInteger,BigInteger,NodeId,Long,Long,QuickSerializable>
+            routeUpcall,
+            Thunk6<BigInteger,BigInteger,NodeId,Long,Long,QuickSerializable>
+            routeDeliver) 
+            throws DuplicateApplicationException {
+        if (apps.containsKey(new Long(id)))
+            throw new DuplicateApplicationException("duplicate id " + id);
+        apps.put(new Long(id), new ApplicationInfo(leafSetChanged, 
+                    routingTableChanged, reverseRoutingTableChanged, 
+                    routeUpcall, routeDeliver));
+    }
+
+    /**
+     * The identifier of this node.
+     */
+    public BigInteger id() { return my_guid; }
+
+    /**
+     * One larger than the largest identifier supported by the system.
+     */
+    public BigInteger modulus() { return MODULUS; }
+
+    /**
+     * The number of digits per identifier being used by this router.
+     */
+    public int digitsPerID() { return GUID_DIGITS; }
+
+    /**
+     * The number of values per digit in each identifier being used by this
+     * router.
+     */
+    public int valuesPerDigit() { return DIGIT_VALUES; }
+
+    /**
+     * Initiate a routing operation to <code>dest</code>.  Place the message
+     * to be sent in <code>payload</code>.  To receive the message, the node
+     * responsible for <code>dest</code> must have registered an application
+     * (see <code>registerApplication</code>) with the given
+     * <code>applicationID</code>.  If <code>intermediateUpcall</code> is
+     * true, a the <code>routeUpcall</code> function object given in that call
+     * to <code>registerApplication</code> will be called on each intermediate
+     * node in the path.  To continue the routing operation, that node must
+     * call <code>routeContinue</code>.  Finally, the
+     * <code>routeDeliver</code> function object given in the call to
+     * <code>registerApplication</code> will be called once the message
+     * reaches the node responsible for <code>dest</code>.
+     */
+    public NeighborInfo selectMyneigborinfo(NeighborInfo n){
+    	
+    	if (multiNeighbor){    		
+            for (Iterator i = my_neighbor_infos.iterator (); i.hasNext (); ) {
+            	NeighborInfo m = (NeighborInfo) i.next ();
+                if (m.peer.getAddress().getClass() == n.peer.getAddress().getClass()) 
+                	return m;               
+            }    		
+    	}    	
+    		return my_neighbor_info;    	   	
+    }
+    
+    
+    
+    
+    public void routeInit(final BigInteger dest, final long applicationID, 
+            final boolean intermediateUpcall, final QuickSerializable payload) {
+
+        if (! apps.containsKey(new Long(applicationID))) {
+            logger.error("routeInit called with unknown application ID " 
+                         + applicationID);
+            System.exit(1);
+        }
+
+        NeighborInfo next_hop = calc_next_hop (dest, true);        
+        if (next_hop == my_neighbor_info) {
+            deliver(my_guid, dest, my_node_id, applicationID, 1,
+                    0L, 0L, payload);
+        }
+        else {
+            RouteMsg outb = new RouteMsg (next_hop.peer, next_hop.node_id, my_node_id, 
+                    my_guid, dest, applicationID, intermediateUpcall,
+                    my_guid, payload);
+            outb.comp_q = my_sink;
+            outb.user_data = new RecursiveRouteCB (next_hop, new Runnable() {
+                    public void run() { 
+                        routeInit(dest, applicationID, 
+                                  intermediateUpcall, payload); 
+                        }
+                    });
+            if (no_rexmit_routes)
+                outb.timeout_sec = -1;
+            else
+                outb.timeout_sec = 5;
+            dispatch (outb);
+        }
+    }
+
+    /**
+     * Coninue a routing operation after an upcall.  See the comments for
+     * {@link #routeInit} for more information.
+     */
+    public void routeContinue(final BigInteger src, final BigInteger dest, 
+                final NodeId immediateSource, final long applicationID, 
+                final boolean intermediateUpcall, 
+                final QuickSerializable payload) {
+
+        if (! apps.containsKey(new Long(applicationID))) {
+            logger.error("routeContinue called with unknown application ID " 
+                    + applicationID);
+            System.exit(1);
+        }
+
+        NeighborInfo next_hop = calc_next_hop (dest, true);
+	if (next_hop == selectMyneigborinfo(next_hop)) {
+	    deliver (src, dest, immediateSource,
+		     applicationID, 1, 0L, 0L, payload);
+	}
+	else {
+	    RouteMsg outb = new RouteMsg (next_hop.peer, next_hop.node_id, my_node_id, 
+		    src, dest, applicationID, intermediateUpcall,
+		    my_guid, payload);
+            outb.comp_q = my_sink;
+            outb.user_data = new RecursiveRouteCB (next_hop, new Runnable() {
+                    public void run() { 
+                        routeContinue(src, dest, immediateSource, 
+                                      applicationID, intermediateUpcall, 
+                                      payload); 
+                        }
+                    });
+            if (no_rexmit_routes)
+                outb.timeout_sec = -1;
+            else
+                outb.timeout_sec = 5;
+	    dispatch (outb);
+	}
+    }
+
+    /**
+     * Treat this as read-only or perish.
+     */
+    public LeafSet leafSet() {
+        return leaf_set;
+    }
+
+    /**
+     * Treat this as read-only or perish.
+     */
+    public RoutingTable routingTable() {
+        return rt;
+    }
+
+    /**
+     * The modulus of the ring of identifiers.  If you want to get at this
+     * value, get it from BambooRouterAppRegResp.
+     */
+    protected BigInteger MODULUS;
+
+    /**
+     * The number of digits in each identifier.  If you want to get at this
+     * value, get it from BambooRouterAppRegResp.
+     */
+    protected int GUID_DIGITS;
+
+    protected int GUID_BITS;
+
+    /**
+     * The number of possible distinct values for each digit.  If you want
+     * to get at this value, get it from BambooRouterAppRegResp.
+     */
+    protected int DIGIT_VALUES;
+
+    protected int DIGIT_BITS;
+
+    protected static final int PING_ITER = 10;
+
+    protected boolean PNS;
+    protected boolean ignore_possibly_down;
+    protected boolean no_rexmit_routes;
+
+    protected Map<NeighborInfo,Double> latency_map = 
+        new LinkedHashMap<NeighborInfo,Double>();
+
+    protected Map<NeighborInfo,Long> possibly_down = 
+        new LinkedHashMap<NeighborInfo,Long>();
+    protected Map<NodeId,NeighborInfo> possibly_down_helper = 
+        new LinkedHashMap<NodeId,NeighborInfo>();
+    
+    public Set<NeighborInfo> possiblyDown() {
+        return possibly_down.keySet();
+    }
+
+    public void addToPossiblyDown(NodeId n) {
+        // This is horribly inefficient, but we only call it on a message
+        // timeout, so it's not that bad.
+        for (NeighborInfo ni : leaf_set.as_list()) {
+            if (ni.node_id.equals(n)) {
+                addToPossiblyDown(ni);
+                return;
+            }
+        }
+        for (NeighborInfo ni : rt.as_list()) {
+            if (ni.node_id.equals(n)) {
+                addToPossiblyDown(ni);
+                return;
+            }
+        }
+    }
+
+    public void addToPossiblyDown(NeighborInfo ni) {
+        // If the node is in our leaf set, routing table, or reverse
+        // routing table, note that it is temporarily down, and start
+        // pinging it to see if it comes back up.
+
+        if (leaf_set.contains (ni) || rt.contains (ni)
+                || reverse_rt.contains (ni)) {
+
+            if (! possibly_down.containsKey (ni)) {
+                possibly_down.put (ni, new Long (now_ms ()));
+                possibly_down_helper.put (ni.node_id, ni);
+                if (logger.isDebugEnabled ()) logger.debug (
+                        "added " + ni + " to possibly down");
+                PingMsg outb = new PingMsg (ni.peer, ni.node_id, my_node_id); //TODO
+                outb.comp_q = my_sink;
+                outb.user_data = new SecondChancePingCB (ni);
+                outb.timeout_sec = 60;
+                dispatch (outb);
+            }
+        }
+    }
+
+    public void removeFromPossiblyDown(NeighborInfo ni) {
+        if (possibly_down.containsKey (ni)) {
+            possibly_down.remove (ni);
+            possibly_down_helper.remove(ni.node_id);
+            if (logger.isDebugEnabled ()) logger.debug (
+                    "removed " + ni + " from possibly_down");
+        }
+    }
+
+    public void removeFromPossiblyDown(NodeId n) {
+        // Unlike addToPossiblyDown, we call this function on every successful
+        // send, so it needs to be more efficient.  So we use the
+        // possibly_down_helper map to go from NodeId to NeighborInfo quickly.
+        NeighborInfo ni = possibly_down_helper.get(n);
+        if (ni != null) 
+            removeFromPossiblyDown(ni);
+    }
+
+    protected Set<NeighborInfo> periodic_pings = 
+        new LinkedHashSet<NeighborInfo>();
+
+    protected BigInteger my_guid;
+    protected int [] my_digits;
+    protected NeighborInfo my_neighbor_info;
+
+    protected boolean initialized;
+    protected LinkedList<QueueElementIF> waitq = 
+        new LinkedList<QueueElementIF>();
+
+    protected LocationCache location_cache;
+    protected Set<NeighborInfo> down_nodes = new LinkedHashSet<NeighborInfo>();
+    protected int down_nodes_cap = 20;
+    protected boolean immediate_join;
+
+    protected LeafSet leaf_set;
+    protected int leaf_set_size;
+
+    protected RoutingTable rt;
+
+    protected LinkedList<NodeId> gateways = new LinkedList<NodeId>();
+    protected LinkedList<NeighborInfo> gateway_neighborinfos = new LinkedList<NeighborInfo>();
+    protected LinkedList<NeighborInfo> my_neighbor_infos = new LinkedList<NeighborInfo>();
+    public boolean multiNeighbor = false;
+    
+    protected static class AppData {
+	public AppData (SinkIF s, boolean ls, boolean rt, boolean rrt) {
+	    sink = s;
+	    want_leaf_set_updates = ls;
+	    want_routing_table_updates = rt;
+	    want_reverse_routing_table_updates = rrt;
+	}
+	public SinkIF sink;
+	public boolean want_leaf_set_updates;
+	public boolean want_routing_table_updates;
+	public boolean want_reverse_routing_table_updates;
+    }
+
+    protected Random rand;
+
+    protected int periodic_ping_period;
+    protected int partition_check_alarm_period;
+    protected int ls_alarm_period;
+    protected int near_rt_alarm_period;
+    protected int far_rt_alarm_period;
+    protected int lookup_rt_alarm_period;
+    protected boolean pastry_mode = false;
+
+    protected long start_time_ms;
+
+    protected Set<NeighborInfo> reverse_rt = new LinkedHashSet<NeighborInfo>();
+
+    protected Network network;
+    protected Vivaldi vivaldi;
+    protected Rpc rpc;
+
+    public Router () throws Exception {
+
+        // Application ID 0 is reserved for the router's use.
+        registerApplication(0, null, null, null, null, null); 
+                
+	ostore.util.TypeTable.register_type (LookupReqPayload.class);
+	ostore.util.TypeTable.register_type (NeighborInfo.class);
+        ostore.util.TypeTable.register_type(CoordReq.class);
+        ostore.util.TypeTable.register_type(CoordResp.class);
+
+	event_types = new Class [] {
+	    BambooAddToLocationCache.class,
+            BambooRouteContinue.class,
+	    BambooRouteInit.class,
+	    BambooRouterAppRegReq.class,
+        };
+	inb_msg_types = new Class [] {
+	    PingMsg.class,
+	    JoinReq.class,
+	    JoinResp.class,
+	    //LookupNodeidResp.class,   //TODO
+	    LeafSetReq.class,
+	    LeafSetChanged.class,
+	    LookupNodeidReq.class,
+	    LookupNodeidResp.class,
+        LookupRespMsg.class,
+	    RouteMsg.class,
+	    RoutingTableReq.class,
+	    RoutingTableResp.class,
+	    RoutingNeighborAnnounce.class
+	};
+    }
+
+    protected int config_get_seconds (
+            ConfigDataIF config, String name, int default_value) {
+        return configGetInt(config, name, default_value) * 1000;
+    }
+
+    public void init (ConfigDataIF config) throws Exception {
+	super.init (config);
+	
+	    logger.info ("now we are in init function of Router class. call by DustDevil init_node()");
+       
+
+        acore.registerTimer(0, ready);
+
+        no_rexmit_routes =
+            config_get_boolean (config, "no_rexmit_routes");
+	ignore_possibly_down =
+            config_get_boolean (config, "ignore_possibly_down");
+	PNS = ! config_get_boolean (config, "ignore_proximity");
+
+	GUID_BITS = 160;
+	MODULUS = BigInteger.valueOf (2).pow (GUID_BITS);
+	DIGIT_VALUES = configGetInt(config, "digit_values", 16);
+	if (DIGIT_VALUES <= 1)
+	    throw new IllegalArgumentException ("digit_values must be >= 0");
+
+	{
+	    DIGIT_BITS = 1;
+	    int i = 2;
+	    while (i < DIGIT_VALUES) {
+		++DIGIT_BITS; i <<= 1;
+	    }
+	    if (i != DIGIT_VALUES)
+		throw new IllegalArgumentException (
+			"digit_values must be a power of two");
+
+	    if (GUID_BITS % DIGIT_BITS != 0)
+		throw new IllegalArgumentException (
+			"log_2 (digit_values) must divide 160");
+
+	    GUID_DIGITS = GUID_BITS / DIGIT_BITS;
+	}
+
+        // Cost estimates:
+        //
+        // IP header                                    20 bytes
+        // UdpCC header (plus type code)                24 bytes
+        // NodeId                                        7 bytes
+        // BigInteger (guid)                            24 bytes
+        // PingMsg                                      44 bytes
+        // LeafSetChanged (with 8 neighbors)           317 bytes
+        // RoutingTableReq                              72 bytes
+        // EmbeddedRoutingTableReq (+RouteMsg)         144 bytes
+        // RoutingTableResp (for 16 digit values)      544 bytes
+        //
+        // Msgs are ACKed with pings, so they take an additional 28 bytes
+        // each.  In req-resp pairs, the ACK for the req is piggy-backed on
+        // the resp, but the resp ACK goes alone.
+        //
+        // log_16 1000 = 2.5
+        //
+        // Assuming a 1000-node network:
+        //
+        // Each                                        We send
+        // ----                                       ----------
+        // ping_alarm_period                          3456 bytes
+        // ls_alarm_period                             690 bytes
+        // near_rt_alarm_period                        616 bytes
+        // far_rt_alarm_period                        1002 bytes
+        //
+        // With default values, that works out to:
+        //
+        // ping_alarm_period                       691.2 bytes/s
+        // ls_alarm_period                         659.0 bytes/s
+        // near_rt_alarm_period                    123.2 bytes/s
+        // far_rt_alarm_period                     100.2 bytes/s
+        // -----------------------------------------------------
+        // total                                  1573.6 bytes/s
+        //
+        // Finally, pings will not be sent if another message was sent
+        // instead, but I expect that to be a small savings.
+
+        partition_check_alarm_period =
+            config_get_seconds (config, "partition_check_alarm_period", 60);
+	periodic_ping_period =
+            config_get_seconds (config, "periodic_ping_period",         20);
+	ls_alarm_period =
+            config_get_seconds (config, "ls_alarm_period",               4);
+	near_rt_alarm_period =
+            config_get_seconds (config, "near_rt_alarm_period",         10);
+	far_rt_alarm_period =
+            config_get_seconds (config, "far_rt_alarm_period",          20);
+	lookup_rt_alarm_period =
+            config_get_seconds (config, "lookup_rt_alarm_period",        0);
+
+	String explicit_guid = config_get_string (config, "explicit_guid");
+	String keyfilename = config_get_string (config, "pkey");
+	if (keyfilename != null && !keyfilename.equals("")) {
+	    QSPublicKey pkey = null;
+	    try {
+		FileInputStream keyfile = new FileInputStream (keyfilename);
+		pkey = (QSPublicKey) QSIO.read (keyfile);
+		keyfile.close ();
+	    }
+	    catch (Exception e) {
+                logger.fatal ("Caught exception " + e +
+			" while trying to read pkey (" + keyfilename +
+			  ") from disk.");
+                System.exit (1);
+	    }
+	    SecureHash my_guid_sh = new SHA1Hash (pkey);
+            my_guid = GuidTools.secure_hash_to_big_integer (my_guid_sh);
+	}
+	else if (explicit_guid != null && !explicit_guid.equals ("")) {
+            final String regex = "0x[0-9a-fA-F]+";
+            if (! explicit_guid.matches (regex)) {
+                logger.fatal ("explicit_guid must match " + regex);
+                System.exit (1);
+            }
+            my_guid = new BigInteger (explicit_guid.substring (2), 16);
+        }
+	else {
+	    SecureHash my_guid_sh = new SHA1Hash (my_node_id);
+            my_guid = GuidTools.secure_hash_to_big_integer (my_guid_sh);
+	}
+
+	my_neighbor_info = new NeighborInfo (my_node_id, my_guid);
+        // routers.put (my_guid, this);
+	//change the neighbor info initilized. 
+	network = Network.instance(my_node_id);
+	
+    if (Network.instances.size() > 1) {
+    	multiNeighbor = true;
+    	Set<InetSocketAddress> n = Network.instances.keySet();
+    	Iterator i = Network.instances.keySet ().iterator ();
+         while (i.hasNext ()) {
+        	 Network n_id = Network.instances.get(i.next());
+        	 NeighborInfo ni = new NeighborInfo (my_node_id, n_id.networkid, my_guid);
+             if (! my_neighbor_infos.contains (ni))
+            	 my_neighbor_infos.addLast (ni);
+         }    	
+    } else {
+    	logger.info("the network of router is: " + network);
+    	my_neighbor_info = new NeighborInfo (my_node_id, my_guid);    	
+    	my_neighbor_infos.addLast(my_neighbor_info);    	
+    }
+    
+	
+	int gateway_count = config_get_int (config, "gateway_count");
+        if (gateway_count < 0) {
+            NodeId g = new NodeId (config_get_string (config, "gateway"));
+            gateways.addLast (g);
+        }
+        else {
+            for (int i = 0; i < gateway_count; ++i) {
+                String nid_str = config_get_string (config, "gateway_" + i);
+                NodeId g = null;
+                try {
+                    g = new NodeId (nid_str);
+                }
+                catch (java.net.UnknownHostException e) {
+                    logger.warn ("cannot DNS resolve host: " + nid_str);
+                    continue;
+                }
+                if (! gateways.contains (g))
+                    gateways.addLast (g);
+            }
+        }
+        boolean am_gateway = false;
+        for (Iterator i = gateways.iterator (); i.hasNext ();) {
+            if (i.next ().equals (my_node_id)) {
+                am_gateway = true;
+                i.remove ();
+            }
+        }
+
+        if (gateways.isEmpty ()) {
+            if (am_gateway && ((gateway_count == 1) || (gateway_count < 0))) {
+                // We are the first node in the network.  All is well.
+            }
+            else {
+                logger.fatal ("Could not DNS resolve any gateways.");
+                System.exit (1);
+            }
+        }
+
+	logger.info ("Bamboo node " + my_node_id + " has guid 0x" +
+		GuidTools.guid_to_string (my_guid));
+
+	leaf_set_size = configGetInt(config, "leaf_set_size", 2);
+	
+	leaf_set = new LeafSet (my_neighbor_info, leaf_set_size, MODULUS); //TODO
+
+        double rt_scale = config_get_double (config, "rt_scale");
+        if (rt_scale == -1.0)
+            rt_scale = 0.9;
+	rt = new RoutingTable (my_neighbor_info, rt_scale, MODULUS,
+		GUID_DIGITS, DIGIT_VALUES);
+        my_digits = rt.guid_to_digits (my_guid);
+    
+	rand = new Random (my_guid.longValue ());
+
+        location_cache = new LocationCache (
+                configGetInt(config, "location_cache_size", 0), MODULUS);
+
+        // If immediate_join=true in the cfg file, we add all gateways to the
+        // down_nodes set and join immediately (through ourselves).  This hack
+        // allows all PlanetLab nodes to have the same set of 10 or so
+        // gateways and to be started in any order.
+
+        immediate_join = config_get_boolean (config, "immediate_join");
+        if (immediate_join) {
+            down_nodes_cap = Math.min (down_nodes_cap, gateways.size ());
+            for (Iterator i = gateways.iterator (); i.hasNext (); ) {
+                NodeId n = (NodeId) i.next ();                
+                dispatch( new LookupNodeidReq(n, my_node_id, my_guid));
+                //add_to_down_nodes (n);
+                //i.remove ();
+            }
+        }
+
+        // Done initializing.  Make ourselves available.
+        instances.put (my_node_id, this);        
+
+		logger.info ("end of init function of router"); //added by luxiaopeng
+    }
+
+    public void handleEvent (QueueElementIF item) {
+
+	if (logger.isDebugEnabled ())
+	    logger.debug ("got " + item);
+
+	if (item instanceof PingMsg) {
+            // Ignore it; the network-level ACK is all that's important.
+        }  
+	else if (item instanceof LookupNodeidReq) {
+		final LookupNodeidReq msg = (LookupNodeidReq) item;
+        dispatch(new LookupNodeidResp(msg.peer, msg.source_id, my_node_id, my_guid));	
+        }
+	else if (item instanceof LookupNodeidResp) {
+		handle_lookup_nodeid_resp((LookupNodeidResp) item);
+	}
+	else if (item instanceof JoinResp) {
+	    handle_join_resp ((JoinResp) item);
+	}
+	else if (item instanceof RoutingNeighborAnnounce) {
+	    handle_rt_annc ((RoutingNeighborAnnounce) item);
+	}
+        else if (item instanceof NetworkMessageResult) {
+            handle_net_msg_result ((NetworkMessageResult) item);
+        }
+        else if (item instanceof NetworkLatencyResp) {
+            handle_net_lat_resp ((NetworkLatencyResp) item);
+        }
+	else {
+	    if (initialized) {
+		if (item instanceof JoinReq) {
+		    handle_join_req ((JoinReq) item);
+		}
+		else if (item instanceof LeafSetReq) {
+		    handle_leaf_set_req ((LeafSetReq) item);
+		}
+		else if (item instanceof LeafSetChanged) {
+		    handle_leaf_set_changed ((LeafSetChanged) item);
+		}
+		else if (item instanceof RoutingTableReq) {
+		    handle_routing_table_req ((RoutingTableReq) item);
+		}
+		else if (item instanceof RoutingTableResp) {
+		    handle_routing_table_resp ((RoutingTableResp) item);
+		}
+		else if (item instanceof BambooRouterAppRegReq) {
+		    handle_router_app_reg_req ((BambooRouterAppRegReq) item);
+		}
+		else if (item instanceof BambooRouteInit) {
+		    handle_route_init ((BambooRouteInit) item);
+		}
+		else if (item instanceof BambooAddToLocationCache) {
+		    BambooAddToLocationCache req =
+                        (BambooAddToLocationCache) item;
+                    NeighborInfo ni = new NeighborInfo (req.node_id, req.guid);   //when will the BambooAddToLocationCache use? 
+                    location_cache.add_node (ni);
+		}
+		else if (item instanceof BambooRouteContinue) {
+		    handle_route_continue ((BambooRouteContinue) item);
+		}
+		else if (item instanceof RouteMsg) {
+		    handle_route_msg ((RouteMsg) item);
+		}
+		else if (item instanceof LookupRespMsg) {
+		    handle_lookup_resp_msg ((LookupRespMsg) item);
+		}
+		else {
+		    throw new IllegalArgumentException ("unknown event type "
+                            + item.getClass ().getName ());
+		}
+	    }
+	    else {
+		waitq.addLast (item);
+	    }
+	}
+    }
+
+    protected interface NetMsgResultCB {
+        void success ();
+        void failure ();
+    }
+
+    protected void handle_net_msg_result (NetworkMessageResult result) {
+        NetMsgResultCB cb = (NetMsgResultCB) result.user_data;
+        if (result.success)
+            cb.success ();
+        else
+            cb.failure ();
+    }
+
+    protected class PeriodicPingCB implements NetMsgResultCB {
+        NeighborInfo ni;
+        public PeriodicPingCB (NeighborInfo n) { ni = n; }
+        public void success () {
+            periodic_pings.remove (ni);
+            generic_msg_success (ni);
+            dispatch (new NetworkLatencyReq (ni.node_id, my_sink, ni));
+        }
+        public void failure () {
+            periodic_pings.remove (ni);
+            generic_msg_failure (ni, null);
+        }
+        public String toString () { return "(PeriodicPingCB " + ni + ")"; }
+    }
+
+    protected class SecondChancePingCB implements NetMsgResultCB {
+        NeighborInfo ni;
+        public SecondChancePingCB (NeighborInfo n) { ni = n; }
+        public void success () { generic_msg_success (ni); }
+        public void failure () { handle_monitor_node_down (ni); }
+        public String toString () { return "(SecondChancePingCB " + ni + ")"; }
+    }
+
+    protected class RecursiveRouteCB  implements NetMsgResultCB {
+        NeighborInfo ni;
+        Runnable retry;
+        BigInteger dest;
+        long start_time;
+
+        public RecursiveRouteCB (NeighborInfo n, Runnable r) {
+            ni = n; retry = r;
+        }
+        public void success () { 
+            generic_msg_success (ni); 
+        }
+        public void failure () { 
+            generic_msg_failure (ni, retry); 
+        }
+        public String toString () {
+            return "(RecursiveRouteCB " + ni + " " + retry + ")";
+        }
+    }
+
+    protected long randomPeriod(int mean) {
+        return mean / 2 + rand.nextInt(mean);
+    }
+
+    protected Runnable pingAlarm = new Runnable() {
+        public void run() {
+            for (int i = 0; i < 3; ++i) {
+                Iterator j = null;
+
+                if (i == 0)      j = leaf_set.as_list ().iterator ();
+                else if (i == 1) j = rt.as_list ().iterator ();
+                else             j = reverse_rt.iterator ();
+
+                while (j.hasNext ()) {
+                    NeighborInfo ni = (NeighborInfo) j.next ();
+                    if ((! periodic_pings.contains (ni) &&
+                                (! possibly_down.containsKey (ni)))) {
+                        periodic_pings.add (ni);
+                        PingMsg outb = new PingMsg (ni.peer, ni.node_id, my_node_id); //TODO
+                        outb.comp_q = my_sink;
+                        outb.user_data = new PeriodicPingCB (ni);
+                        outb.timeout_sec = 5;
+                        dispatch (outb);
+                    }
+                }
+            }
+
+            acore.registerTimer(randomPeriod(periodic_ping_period), pingAlarm);
+        }
+    };
+
+    protected void use_as_periodic_ping (NeighborInfo ni, NetworkMessage outb) {
+        if (! periodic_pings.contains (ni)) {
+            periodic_pings.add (ni);
+            outb.comp_q = my_sink;
+            outb.user_data = new PeriodicPingCB (ni);
+            outb.timeout_sec = 5;
+        }
+    }
+
+    protected void generic_msg_success (NeighborInfo ni) {
+        removeFromPossiblyDown(ni);
+        if (down_nodes.remove (ni.node_id)) {
+            if (logger.isDebugEnabled ()) logger.debug (
+                    "removed " + ni.node_id + " from down_nodes");
+        }
+    }
+
+    protected void generic_msg_failure (NeighborInfo ni, Runnable retry) {
+        if (logger.isDebugEnabled ()) 
+            logger.debug ("failed on message send to " + ni + ".");
+
+        // Immediately take the node of the location cache.
+
+        if (location_cache.remove_node (ni)) {
+            if (logger.isDebugEnabled ()) logger.debug (
+                    "taking " + ni + ".  Out of location cache.");
+        }
+
+        addToPossiblyDown(ni);
+
+        if (retry != null)
+            retry.run();
+    }
+
+    protected void handle_rt_annc (RoutingNeighborAnnounce annc) {
+	NeighborInfo ni = new NeighborInfo (annc.peer, annc.source_id, annc.guid);
+	if (annc.add)
+	    add_to_rrt (ni);
+	else
+	    remove_from_rrt (ni);
+    }
+
+    protected void handle_monitor_node_down (NeighborInfo ni) {
+
+	if (logger.isDebugEnabled ()) logger.debug (ni + " is down.");
+
+        add_to_down_nodes (ni);
+
+        if (latency_map.containsKey (ni))
+            latency_map.remove (ni);
+
+	// Take it out of our leaf set...
+
+	boolean removed_ls = remove_from_ls (ni);
+
+	// ...our routing table...
+
+	boolean removed_rt = remove_from_rt (ni);
+
+        if (logger.isInfoEnabled () && (removed_ls || removed_rt)) {
+            StringBuffer buf = new StringBuffer (95);
+            buf.append ("neighbor ");
+            buf.append (ni.node_id.address ().getHostAddress ());
+            buf.append (":");
+            buf.append (ni.node_id.port ());
+            buf.append (" unreachable; removed it from");
+            if (removed_ls)
+                buf.append (" leaf set");
+            if (removed_rt) {
+                if (removed_ls)
+                    buf.append (" and routing table");
+                else
+                    buf.append (" routing table");
+            }
+            logger.info (buf);
+        }
+
+	// ...and the reverse routing table.
+
+	boolean removed_rrt = remove_from_rrt (ni);
+
+	if (logger.isDebugEnabled ()
+                && (! (removed_ls || removed_rt || removed_rrt))) {
+	    logger.debug (ni + " is down; but is no " +
+		    "longer in our leaf set, or routing table, or reverse rt.");
+	}
+    }
+
+    protected class PartitionCheckCB implements NetMsgResultCB {
+        public NodeId node_id;
+        public PartitionCheckCB (NodeId n) { node_id = n; }
+        public void success () {
+            // So that we don't keep looking for a partition through a node
+            // that's in our current partition.
+            if (logger.isDebugEnabled ())
+                logger.debug ("down_node " + node_id + " is up.");
+            if (down_nodes.remove (node_id)) {
+                if (logger.isDebugEnabled ()) logger.debug (
+                        "removed " + node_id + " from down_nodes");
+            }
+        }
+        public void failure () {}
+    }
+
+    protected Runnable partitionCheckAlarm = new Runnable() {
+        public void run() {
+            if (down_nodes.size () > 0) {
+                int which = rand.nextInt (down_nodes.size ());
+                Iterator<NeighborInfo> i = down_nodes.iterator ();
+                NeighborInfo n = null;
+                while (which-- >= 0)
+                    n = i.next ();
+                JoinReq outb = new JoinReq (n.peer, n.node_id, my_node_id, my_guid, 0);
+                outb.timeout_sec = 10;
+                outb.comp_q = my_sink;
+                outb.user_data = new PartitionCheckCB (n.node_id);
+                if (logger.isDebugEnabled ()) logger.debug (
+                        "sending " + outb + " to check for partition");
+                dispatch (outb);
+            }
+            else {
+                if (logger.isDebugEnabled ()) logger.debug ("no down nodes");
+            }
+
+            if (partition_check_alarm_period != 0) {
+                acore.registerTimer(
+                        randomPeriod(partition_check_alarm_period), this);
+            }
+        }
+    };
+
+    protected Runnable leafSetAlarm = new Runnable() {
+        public void run() {
+            // Occasionally send an unprovoked LS changed message to
+            // one of our leaf set members.
+
+            NeighborInfo ni = leaf_set.random_member (rand);
+
+            // Try not to slam nodes that are already behind.
+            if ((ni != null) && (! possibly_down.containsKey (ni))) {
+                LeafSetChanged outb =
+                    new LeafSetChanged(ni.peer, ni.node_id, my_node_id, my_guid, leaf_set.as_list());
+                use_as_periodic_ping (ni, outb);
+                outb.want_reply = true;
+                dispatch (outb);
+            }
+            acore.registerTimer(randomPeriod(ls_alarm_period), this);
+        }
+    };
+
+    protected void handle_leaf_set_req (LeafSetReq req) {
+	dispatch (new LeafSetChanged (req.peer, req.source_id, my_node_id, my_guid, leaf_set.as_list ()));
+    }
+
+    protected void handle_leaf_set_changed (LeafSetChanged msg) {
+
+	NeighborInfo sender = new NeighborInfo (msg.peer, msg.source_id, msg.guid);
+        location_cache.add_node (sender);
+
+	// For each person in the sender's leaf set, if they are not in our
+	// leaf set, and possibly should be, try to add them.
+
+	for (Iterator i = msg.leaf_set.iterator (); i.hasNext (); ) {
+	    NeighborInfo other = (NeighborInfo) i.next ();
+            // Don't add nodes to the location cache w/o direct confirmation
+            // that they're up, such as receiving a message from them.
+            // location_cache.add_node (other);
+	    if (leaf_set.promising (other)) {
+                add_to_ls (other);
+	    }
+	    else if (logger.isDebugEnabled ())
+                logger.debug (other + " isn't promising.");
+	}
+
+	// Same goes for the sender.
+
+	if (leaf_set.promising (sender))
+            add_to_ls (sender);
+
+	// Respond in kind.
+
+	if (msg.want_reply) {
+            LeafSetChanged outb = new LeafSetChanged (sender.peer, 
+                    sender.node_id, my_node_id, my_guid, leaf_set.as_list ());
+            use_as_periodic_ping (sender, outb);
+            dispatch (outb);
+	}
+    }
+
+    protected void handle_router_app_reg_req (BambooRouterAppRegReq req) {
+
+        final SinkIF sink = req.completion_queue;
+        final long applicationID = req.app_id;
+
+        final Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]> lsct = 
+            !req.send_leaf_sets ? null : 
+            new Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]>() {
+                public void run(BambooNeighborInfo preds[], 
+                        BambooNeighborInfo succs[]) {
+                    application_enqueue(sink, 
+                            new BambooLeafSetChanged(preds, succs));
+                }
+            };
+
+        final Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]> rtct = 
+            !req.send_rt ? null :
+            new Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]>() {
+                public void run(BambooNeighborInfo added[],
+                                BambooNeighborInfo removed[]) {
+                    application_enqueue(sink, 
+                            new BambooRoutingTableChanged (added, removed));
+                }
+            };
+
+        final Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]> rrtct = 
+            !req.send_reverse_rt ? null :
+            new Thunk2<BambooNeighborInfo[],BambooNeighborInfo[]>() {
+                public void run(BambooNeighborInfo added[],
+                                BambooNeighborInfo removed[]) {
+                    application_enqueue(sink, 
+                        new BambooReverseRoutingTableChanged(added, removed));
+                }
+            };
+
+        Thunk6<BigInteger,BigInteger,NodeId,Long,Long,QuickSerializable> rut = 
+        new Thunk6<BigInteger,BigInteger,NodeId,Long,Long,QuickSerializable>() {
+            public void run(BigInteger src, BigInteger dest, 
+                            NodeId immediateSource, Long waitMillis, 
+                            Long estRTTMillis, QuickSerializable payload) {
+		application_enqueue(sink, new BambooRouteUpcall(
+                            src, dest, immediateSource, applicationID,
+                            false /* not iterative */, 0 /* tries */,
+                            waitMillis.longValue(), 
+                            estRTTMillis.longValue(), payload));
+            }
+        };
+
+        Thunk6<BigInteger,BigInteger,NodeId,Long,Long,QuickSerializable> rdt = 
+        new Thunk6<BigInteger,BigInteger,NodeId,Long,Long,QuickSerializable>() {
+            public void run(BigInteger src, BigInteger dest, 
+                            NodeId immediateSource, Long waitMillis, 
+                            Long estRTTMillis, QuickSerializable payload) {
+		application_enqueue(sink, new BambooRouteDeliver (
+                            src, dest, immediateSource, applicationID,
+                            0 /* tries */, waitMillis.longValue(), 
+                            estRTTMillis.longValue(), payload));
+            }
+        };
+
+        try {
+            registerApplication(applicationID, lsct, rtct, rrtct, rut, rdt);
+        }
+        catch (DuplicateApplicationException e) {
+            application_enqueue(sink, new BambooRouterAppRegResp(
+                    applicationID, false, "duplicate app_id " + applicationID));
+            return;
+        }
+
+        if (logger.isDebugEnabled ()) logger.debug(
+                "registered app " + Long.toHexString(applicationID));
+
+        final ApplicationInfo appInfo = apps.get(new Long(applicationID));
+        assert appInfo != null;
+
+        // Return from this function before calling the leaf set changed and
+        // routing table changed functions.
+
+        acore.registerTimer(0, new Runnable() {
+            public void run() {
+
+                notify_leaf_set_changed (appInfo);
+
+                BambooNeighborInfo added[] = new BambooNeighborInfo[rt.size()];
+                int j = 0;
+                for (int level = 0; level < GUID_DIGITS; ++level) {
+                    for (int digit = 0; digit < DIGIT_VALUES; ++digit) {
+                        NeighborInfo ni = rt.primary (level, digit);
+                        if ((ni != null) && (! ni.equals (my_neighbor_info))) {
+                            added [j++] = new BambooNeighborInfo (ni.peer,  
+                                    ni.node_id, ni.guid, rtt_ms (ni));
+                        }
+                    }
+                }
+                if (rtct != null)
+                    rtct.run(added, null);
+
+                added = new BambooNeighborInfo [reverse_rt.size ()];
+                j = 0;
+                for (Iterator i = reverse_rt.iterator (); i.hasNext (); ) {
+                    NeighborInfo ni = (NeighborInfo) i.next ();
+                    added [j++] = new BambooNeighborInfo (ni.peer, ni.node_id, ni.guid);
+                }
+                if (rrtct != null)
+                    rrtct.run(added, null);
+            }
+        });
+
+        application_enqueue(sink, new BambooRouterAppRegResp(
+                    applicationID, true, modulus(), digitsPerID(),
+                    valuesPerDigit(), id()));
+    }
+
+    protected void application_enqueue (SinkIF sink, QueueElementIF item) {
+	if (logger.isDebugEnabled ())
+            logger.debug ("application enqueue " + item);
+	try {
+	    sink.enqueue (item);
+	}
+	catch (SinkException e) {
+	    logger.warn ("Could not enqueue " + item + " b/c of " + e);
+	}
+    }
+
+    protected void deliver (BigInteger src, BigInteger dest, NodeId is,
+	    long app_id, int tries, long wait_ms, long est_rtt_ms,
+            QuickSerializable payload) {
+
+        if (app_id == 0) {
+            if (payload instanceof LookupReqPayload) {
+                LookupReqPayload req = (LookupReqPayload) payload;
+                NeighborInfo peer_ni = new NeighborInfo (req.rtn_addr, req.rtn_addr, src);   //TODO
+                location_cache.add_node (peer_ni);
+                dispatch (new LookupRespMsg (req.rtn_addr, req.rtn_addr, my_node_id, src, my_guid));  //TODO
+            }
+            else {
+                if (logger.isDebugEnabled ())
+                    logger.debug ("unknown payload type " +
+                        payload.getClass ().getName ());
+            }
+        }
+        else {
+            ApplicationInfo appInfo = apps.get(new Long(app_id));
+            if (appInfo == null) {
+                if (logger.isDebugEnabled ())
+                    logger.debug ("no app with id " + app_id);
+            }
+            else if (appInfo.routeDeliver != null) {
+                appInfo.routeDeliver.run(src, dest, is, new Long(wait_ms),
+                                         new Long(est_rtt_ms), payload);
+            }
+        }
+    }
+
+    protected void handle_route_continue (BambooRouteContinue req) {
+	if (req.iter) {
+            BUG("iterative routing no longer supported");
+	}
+        routeContinue(req.src, req.dest, req.immediate_src,
+                      req.app_id, req.intermediate_upcall, req.payload);
+    }
+
+    protected void handle_route_init (BambooRouteInit req) {
+	if (req.iter)
+            BUG("iterative routing no longer supported");
+        routeInit(req.dest, req.app_id, req.intermediate_upcall, req.payload);
+    }
+
+    protected void handle_route_msg (final RouteMsg req) {
+        NeighborInfo peer_ni = new NeighborInfo (req.peer, req.source_id, req.peer_guid);
+        location_cache.add_node (peer_ni);
+
+	NeighborInfo next_hop = calc_next_hop (req.dest, true);
+	if (next_hop == my_neighbor_info) {
+	    deliver (req.src, req.dest, req.peer, req.app_id, -1, //req.tries,
+                     req.wait_ms, req.est_rtt_ms, req.payload);
+	}
+	else {
+	    ApplicationInfo appInfo = apps.get(new Long(req.app_id));
+	    if (req.intermediate_upcall && (appInfo != null) 
+                    && (appInfo.routeUpcall != null)) {
+                appInfo.routeUpcall.run(req.src, req.dest, req.peer, 
+                                        new Long(req.wait_ms), 
+                                        new Long(req.est_rtt_ms), req.payload);
+	    }
+	    else {
+		if (req.intermediate_upcall && logger.isDebugEnabled ()) {
+                    if (appInfo == null) {
+                        logger.debug ("Could not upcall " + req +
+                                ", no app.  Forwarding it towards the root.");
+                    }
+                    else {
+                        logger.debug ("Could not upcall " + req +
+                               ", no upcall.  Forwarding it towards the root.");
+                    }
+                }
+
+		RouteMsg outb = new RouteMsg (next_hop.peer, next_hop.node_id, my_node_id,  
+			req.src, req.dest, req.app_id, req.intermediate_upcall,
+			my_guid, req.payload);
+                outb.comp_q = my_sink;
+                outb.user_data = new RecursiveRouteCB (next_hop, 
+                    new Runnable() { public void run() { handleEvent(req); }});
+                if (no_rexmit_routes)
+                    outb.timeout_sec = -1;
+                else
+                    outb.timeout_sec = 5;
+		dispatch (outb);
+	    }
+	}
+    }
+
+    protected void set_initialized () {
+
+	// Mimic Tapestry to make run scripts happy.
+	System.out.println ("Tapestry: ready");
+
+	initialized = true;
+	try {
+	    while (! waitq.isEmpty ())
+		handleEvent (waitq.removeFirst ());
+	}
+	catch (Exception e) {
+	    e.printStackTrace ();
+	    BUG ("Caught " + e);
+	}
+
+        acore.registerTimer(randomPeriod(ls_alarm_period), leafSetAlarm);
+
+        if (partition_check_alarm_period != 0) {
+            long wait = 0;
+            if (! immediate_join) {
+                wait = randomPeriod(partition_check_alarm_period);
+            }
+            acore.registerTimer(wait, partitionCheckAlarm);
+        }
+
+        if (near_rt_alarm_period != 0) {
+            acore.registerTimer(randomPeriod(near_rt_alarm_period), 
+                                nearRoutingTableAlarm);
+        }
+
+        if (far_rt_alarm_period != 0) {
+            acore.registerTimer(randomPeriod(far_rt_alarm_period),
+                                farRoutingTableAlarm);
+        }
+
+        if (lookup_rt_alarm_period != 0) {
+            DustDevil.acore_instance ().registerTimer(
+                    randomPeriod(lookup_rt_alarm_period),
+                    lookupRoutingTableAlarm);
+        }
+    }
+
+    protected Runnable ready = new Runnable() {
+        public void run() {        	
+            //network = Network.instance(my_node_id);
+            vivaldi = Vivaldi.instance(my_node_id);
+            rpc = Rpc.instance(my_node_id);
+            try {            	
+                rpc.registerRequestHandler(CoordReq.class, coordReqHandler);                
+            }
+            catch (DuplicateTypeException e) { BUG(e); }
+            start_time_ms = now_ms ();
+            if (gateways.isEmpty ()) {
+                logger.info ("Joined through gateway " + my_node_id);
+                set_initialized ();
+                notify_leaf_set_changed ();
+            }
+            else {
+                NodeId gateway = gateways.removeFirst ();  //why remove first and then add last..  what does this change order mean?
+                gateways.addLast (gateway);
+                logger.info ("Trying to Lookup the node_id of gateway " + gateway);//we should send joinreq after lookupnodeidreq message. 
+                dispatch (new LookupNodeIdReq (gateway, my_node_id, my_guid);
+                //dispatch (new JoinReq (gateway, my_node_id, my_guid, 0));
+                //acore.registerTimer(randomPeriod(10*1000), 
+                  //      curry(joinAlarm, new Integer(0), 
+                  //      new Integer(10*1000), // 10 seconds for starters
+                  //      new Integer(0)));
+            } 
+            acore.registerTimer(randomPeriod(periodic_ping_period), pingAlarm);
+            acore.registerTimer(randomPeriod(COORD_CHECK), expireCoordsAlarm);
+            acore.registerTimer(randomPeriod(send_coord_period), 
+                                sendCoordsAlarm);
+            
+            logger.info ("\nin the ready,... the end of ready\n");
+        }
+    };
+
+    protected int weighted_random_rt_level () {
+        // Prefer nodes in lower (closer) levels of the routing table.
+        // Say there are nodes in three levels of our routing table.  Then we
+        // will pick level 0 with probability 3/x, level 1 with probability
+        // 2/x and level 2 with probability 1/x, where x=3+2+1.
+        //
+        // So, in the code below, choices[0] would be 3, choices[1] would be
+        // 2, and choices[2] would be 1.  sum would be 6, and rval would be in
+        // the range [1,6].  The rest should be obvious.
+        //
+        // NOTE: This code is a little sketchy, and I'm open to another way to
+        // write it if anyone thinks one up.  It also might favor nodes in the
+        // highest level a bit; although that level is unlikely to be picked,
+        // there are likely very few nodes in it, giving them a greater net
+        // probability of being picked than those nodes one level lower.
+
+        if (rt.size () == 0)
+            return 0;
+
+        int highest_level = rt.highest_level ();
+        int [] choices = new int [highest_level + 1];
+        int sum = 0;
+        for (int i = 0; i < choices.length; ++i) {
+            sum += choices [i] = choices.length - i;
+        }
+
+        int rval = rand.nextInt (sum) + 1;
+        int which = 0;
+        while (true) {
+            rval -= choices [which];
+            if (rval <= 0)
+                break;
+            ++which;
+        }
+        return which;
+    }
+
+    protected Runnable nearRoutingTableAlarm = new Runnable() {
+        public void run() {
+            if (rt.size () > 0) {
+                int which = weighted_random_rt_level ();
+                int orig_which = which;
+
+                if (logger.isDebugEnabled ())
+                    logger.debug ("RT AE on level " + which);
+
+                NeighborInfo ni = rt.random_neighbor (which, rand);
+
+                // It's sometimes the case that (for example) we can have a
+                // node on level 2 and no node on level 1.  In such cases, we
+                // just give it to the next highest level.
+                int highest_level = rt.highest_level ();
+                while ((ni == null) && (which <= highest_level))
+                    ni = rt.random_neighbor (++which, rand);
+
+                if (ni == null)
+                    BUG ("level=" + which + " highest=" + rt.highest_level ()
+                            + " orig_level=" + orig_which + " rt=\n" + rt);
+
+                // Try not to slam nodes that are already behind.
+                if (! possibly_down.containsKey (ni)) {
+                    RoutingTableReq outb =
+                        new RoutingTableReq (ni.peer, ni.node_id, my_node_id, my_guid, which);
+                    use_as_periodic_ping (ni, outb);
+                    dispatch (outb);
+                }
+            }
+
+            acore.registerTimer(randomPeriod(near_rt_alarm_period), this);
+        }
+    };
+
+    protected static final int [] bit_select = {
+	0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01
+    };
+
+    protected Runnable farRoutingTableAlarm = new Runnable() {
+        public void run() {
+            int digit = weighted_random_rt_level ();
+            int value = rand.nextInt (DIGIT_VALUES);
+
+            // Find someone else with the same digits as us in levels
+            // which - 1 and below, and ask for their routing table at
+            // that level.
+
+            int [] lookup_digits = new int [GUID_DIGITS];
+            for (int i = 0; i < GUID_DIGITS; ++i) {
+                if (i < digit)
+                    lookup_digits [i] = my_digits [i];
+                else if (i == digit)
+                    lookup_digits [i] = value;
+                else
+                    lookup_digits [i] = (byte) rand.nextInt (DIGIT_VALUES);
+            }
+
+            BigInteger lookup_guid = rt.digits_to_guid (lookup_digits);
+
+            logger.debug ("looking for a closer neighbor at level "
+                    + digit + " and value "
+                    + Integer.toHexString (value) + " by looking up " +
+                    GuidTools.guid_to_string (lookup_guid));
+
+            BambooRouteInit outb = new BambooRouteInit (
+                    lookup_guid, 0, false, false,
+                    new LookupReqPayload (my_node_id));
+
+            handleEvent (outb);
+
+            acore.registerTimer(randomPeriod(far_rt_alarm_period), this);
+        }
+    };
+
+    protected Runnable lookupRoutingTableAlarm = new Runnable() {
+	public void run() {
+
+            int highest = rt.highest_level ();
+            if (logger.isDebugEnabled ()) logger.debug ("highest=" + highest);
+
+            Set<int[]> choices = new LinkedHashSet<int[]> ();
+            for (int digit = 0; digit <= highest; ++digit) {
+                for (int value = 0; value < DIGIT_VALUES; ++value) {
+                    NeighborInfo ni = rt.primary (digit, value);
+                    if (ni == null)
+                        choices.add (new int [] {digit, value});
+                    if (logger.isDebugEnabled ())
+                        logger.debug ("digit=" + digit + ", value="
+                                + value + ", neighbor="
+                                + (ni == null ? "null"
+                                   : GuidTools.guid_to_string (ni.guid)));
+                }
+            }
+            if (choices.size () != 0) {
+                int which = rand.nextInt (choices.size ());
+                int digit = 0, value = 0;
+                {
+                    Iterator<int[]> i = choices.iterator ();
+                    while (which-- > 0)
+                        i.next ();
+                    int [] dv = i.next ();
+                    digit = dv [0];
+                    value = dv [1];
+                }
+
+                // Do a lookup on an identifier whose first digit digits are
+                // the same as ours, and whose digit+1st value is value, and
+                // whose remaining digits are random.
+
+                int [] lookup_digits = new int [GUID_DIGITS];
+                for (int i = 0; i < GUID_DIGITS; ++i) {
+                    if (i < digit)
+                        lookup_digits [i] = my_digits [i];
+                    else if (i == digit)
+                        lookup_digits [i] = value;
+                    else
+                        lookup_digits [i] = (byte) rand.nextInt (DIGIT_VALUES);
+                }
+
+                BigInteger lookup_guid = rt.digits_to_guid (lookup_digits);
+
+                if (logger.isDebugEnabled ())
+                    logger.debug ("trying to fill hole at digit="
+                            + digit + " and value="
+                            + Integer.toHexString (value) + " by looking up "
+                            + GuidTools.guid_to_string (lookup_guid));
+
+                BambooRouteInit outb = new BambooRouteInit (
+                        lookup_guid, 0, false, false,
+                        new LookupReqPayload (my_node_id));
+
+                handleEvent (outb);
+            }
+
+            DustDevil.acore_instance ().registerTimer(
+                    randomPeriod(lookup_rt_alarm_period), this);
+        }
+    };
+
+    protected void handle_lookup_resp_msg (LookupRespMsg resp) {
+
+        if (logger.isDebugEnabled ()) {
+            logger.debug ("got lookup resp for 0x"
+                    + GuidTools.guid_to_string (resp.lookup_id) + " from 0x"
+                    + GuidTools.guid_to_string (resp.owner_id));
+        }
+
+	NeighborInfo ni = new NeighborInfo (resp.peer, resp.owner_id);
+        add_to_rt (ni);
+        location_cache.add_node (ni);
+
+        PendingLookupInfo pl = pending_lookups.remove(resp.lookup_id);
+        if (pl != null) {
+            for (Pair<LookupCb,Object> pair : pl.cbs) {
+                pair.first.lookup_cb(resp.lookup_id, resp.owner_id, 
+                                     resp.peer, pair.second);
+            }
+        }
+    }
+
+    protected void handle_routing_table_req (RoutingTableReq req) {
+	if (req.level >= GUID_DIGITS) {
+            if (logger.isDebugEnabled ())
+                logger.debug ("Got " + req + " with level too high.");
+	    return;
+	}
+
+	NeighborInfo ni = new NeighborInfo (req.peer, req.source_id, req.guid);
+        // add_to_rt (ni);
+        location_cache.add_node (ni);
+
+	LinkedList<NeighborInfo> neighbors = null;
+	for (int value = 0; value < DIGIT_VALUES; ++value) {
+	    if ((rt.primary (req.level, value) != null) &&
+		    (rt.primary (req.level, value) != my_neighbor_info)) {
+		if (neighbors == null) {
+		    neighbors = new LinkedList<NeighborInfo>();
+		}
+		neighbors.addLast (rt.primary (req.level, value));
+	    }
+	}
+
+	RoutingTableResp outb =
+            new RoutingTableResp (req.peer, req.source_id, my_node_id , my_guid, neighbors);
+        if (leaf_set.contains (ni) || rt.contains (ni)
+                || reverse_rt.contains (ni))
+            use_as_periodic_ping (ni, outb);
+	dispatch (outb);
+    }
+
+    protected void handle_routing_table_resp (RoutingTableResp resp) {
+        NeighborInfo peer_ni = new NeighborInfo (resp.peer, resp.source_id, resp.peer_guid);
+        location_cache.add_node (peer_ni);
+
+        // Find all the nodes that are neither in our leaf set or routing
+        // table from this response.
+
+        LinkedList<NeighborInfo> new_nodes = null;
+        if (resp.neighbors != null) {
+            for (Iterator i = resp.neighbors.iterator (); i.hasNext (); ) {
+                NeighborInfo ni = (NeighborInfo) i.next ();
+
+                if (ni.guid.compareTo (MODULUS) >= 0) {
+                    if (logger.isDebugEnabled ()) {
+                        logger.debug ("got a guid with too many digits " +
+                                "in a RoutingTableResp from " + resp.peer +
+                                ".  Offending guid was " +
+                                ni.guid.toString (16));
+                        logger.debug ("msg was " + resp);
+                    }
+                    continue;
+                }
+
+                // Don't add nodes to the location cache w/o direct
+                // confirmation that they're up, such as receiving a message
+                // from them.
+                // location_cache.add_node (ni);
+
+                if (ni.node_id.equals (my_node_id)) {
+                    if (logger.isDebugEnabled ()) logger.debug (ni + " is me.");
+                }
+                else if (leaf_set.contains (ni)) {
+                    if (logger.isDebugEnabled ())
+                        logger.debug (ni + " is in my LS.");
+                }
+                else if (rt.contains (ni)) {
+                    if (logger.isDebugEnabled ())
+                        logger.debug (ni + " is in my RT.");
+                }
+                else {
+                    if (new_nodes == null) 
+                        new_nodes = new LinkedList<NeighborInfo>();
+                    new_nodes.addLast (ni);
+                }
+            }
+        }
+
+        if (new_nodes != null) {
+
+            // Try and add any node which fills a hole.
+
+            Iterator<NeighborInfo> i = new_nodes.iterator ();
+            while (i.hasNext ()) {
+                NeighborInfo ni = i.next ();
+                if (rt.fills_hole (ni)) {
+                    if (logger.isDebugEnabled ())
+                        logger.debug (ni + " fills a hole.");
+                    i.remove ();
+                    add_to_rt (ni);
+                }
+                else if (logger.isDebugEnabled ())
+                    logger.debug (ni + " doesn't fill a hole.");
+            }
+
+            // If there are any redundant nodes, pick one and see if it's
+            // closer than the existing entry.
+
+            if (new_nodes.size () > 0) {
+                int which = rand.nextInt (new_nodes.size ());
+                while (which-- > 0)
+                    new_nodes.removeFirst ();
+
+                NeighborInfo ni = new_nodes.getFirst ();
+                add_to_rt (ni);
+
+                // Also, if this node didn't send this response to me, I might
+                // fill a hole in it's routing table.  I reuse the
+                // RoutingTableResp message to say hello to it.
+                //
+                // NOTE: since I only send myself in this message, the
+                // receiving node won't send one back to me by the following
+                // check:
+
+                if ((! pastry_mode) && (! ni.node_id.equals (resp.peer))) {
+                    LinkedList<NeighborInfo> only_me = 
+                        new LinkedList<NeighborInfo>();
+                    only_me.addLast (my_neighbor_info);
+                    RoutingTableResp outb =
+                        new RoutingTableResp (ni.peer, ni.node_id, my_node_id, my_guid, only_me);
+                    use_as_periodic_ping (ni, outb);
+                    dispatch (outb);
+                }
+            }
+        }
+    }
+
+    protected void notify_routing_table_changed (
+	BambooNeighborInfo [] added, BambooNeighborInfo [] removed) {
+        for (ApplicationInfo appInfo : apps.values()) {
+            if (appInfo.routingTableChanged != null) 
+                appInfo.routingTableChanged.run(added, removed);
+        }
+    }
+
+    protected void notify_reverse_routing_table_changed (
+	    BambooNeighborInfo [] added, BambooNeighborInfo [] removed) {
+        for (ApplicationInfo appInfo : apps.values()) {
+            if (appInfo.reverseRoutingTableChanged != null) 
+                appInfo.reverseRoutingTableChanged.run(added, removed);
+        }
+    }
+
+    protected void notify_leaf_set_changed () {
+        notify_leaf_set_changed (null);
+    }
+
+    protected void notify_leaf_set_changed (ApplicationInfo onlyThisOne) {
+	if (logger.isDebugEnabled ()) logger.debug ("notify_leaf_set_changed");
+
+	LinkedList ls = leaf_set.as_list ();
+	if ((ls.size () < leaf_set_size * 2) &&
+	    (ls.size () > 0)) {
+
+	    if ((! ls.getFirst ().equals (ls.getLast ())) ||
+		(ls.size () % 2 != 0)) {
+
+		// This is a temporary state of the leaf set.  Don't send it
+		// up; instead wait for the final state.
+
+		return;
+	    }
+	}
+		
+        BambooNeighborInfo preds[] = leaf_set.preds ();
+        BambooNeighborInfo succs[] = leaf_set.succs ();
+
+        if (onlyThisOne == null) {
+            for (ApplicationInfo appInfo : apps.values()) {
+                if (appInfo.leafSetChanged != null) 
+                    appInfo.leafSetChanged.run(preds, succs);
+            }
+        }
+        else if (onlyThisOne.leafSetChanged != null) {
+            onlyThisOne.leafSetChanged.run(preds, succs);
+        }
+    }
+
+    protected Thunk3<Integer,Integer,Integer> joinAlarm = 
+            new Thunk3<Integer,Integer,Integer>() {
+        public void run(Integer tries, Integer period, Integer revTTL) {
+            if (! initialized) {
+                tries = new Integer(tries.intValue() + 1);
+                revTTL = new Integer(revTTL.intValue() + 1);
+                period = new Integer(period.intValue() >= 30*1000 
+                                     ? 60*1000 : period.intValue() * 2);
+                int divisor = Math.max (3, gateways.size ());
+                NodeId gateway = gateways.removeFirst ();
+                gateways.addLast (gateway);
+                logger.info ("Join try " + tries +
+                        " timed out.  Gateway=" + gateway + ".  Trying again " +
+                        " with rev_ttl=" + revTTL.intValue()/divisor);
+                dispatch (new JoinReq (gateway, my_node_id, my_guid, 
+                                       revTTL.intValue()/divisor));
+                acore.registerTimer(randomPeriod(period.intValue()),
+                                    curry(this, tries, period, revTTL));
+            
+            }
+        }
+    };
+
+    protected void handle_lookup_nodeid_resp(LookupNodeidResp resp){
+    	
+    	if(resp.dest_id != my_node_id) {
+    		logger.warn ("receivel the wrong LookupNodeidResp " + resp);
+    	}
+    	if (gateways.contains(resp.source_id)){
+    		NeighborInfo gateway = new NeighborInfo(resp.peer, resp.source_id, resp.source_guid);
+    		logger.info ("Join throught the Gateway " + resp.source_id);
+    		dispatch (new JoinReq (gateway.peer, gateway.node_id, my_node_id, my_guid, 0)); 
+    		acore.registerTimer(randomPeriod(10*1000), 
+                          curry(joinAlarm, new Integer(0), 
+                          new Integer(10*1000), // 10 seconds for starters
+                          new Integer(0)));                    
+    	}
+    }
+    protected void handle_join_req (JoinReq req) {
+
+        // Check for routing loops, and if one is found, just drop the
+        // message.  Either the network will heal, or the rev_ttl will be
+        // increased by the joining node until the loop is avoided.
+
+        if (req.path.contains (my_neighbor_info)) {
+            logger.warn ("loop in join path: " + req);
+            return;
+        }
+
+        NeighborInfo joiner = new NeighborInfo (req.peer, req.source_id, req.guid);
+
+        
+        // set the peer field of the my_neighbor_info   //TODO
+        if (req.peer != null){
+        	my_neighbor_info.peer = req.peer;
+        } else {          	
+        for (Iterator i = my_neighbor_infos.iterator (); i.hasNext ();) {
+        	NeighborInfo m = (NeighborInfo) i.next();
+        	if (m.node_id.getAddress().getClass() == req.peer.getAddress().getClass())
+        	{
+        		my_neighbor_info.peer = req.peer;
+        		break;
+        	}
+        }	
+        }
+                
+        // Don't use location cache for joins.
+	    NeighborInfo next_hop = calc_next_hop (req.guid, false);
+        int hops_to_go = est_hops_to_go (req.guid, false);
+
+        // Don't add nodes to the location cache w/o direct
+        // confirmation that they're up, such as receiving a message
+        // from them.
+        // location_cache.add_node (joiner);
+
+	if ((hops_to_go == req.rev_ttl) ||
+            (next_hop == my_neighbor_info) ||
+	    next_hop.node_id.equals (req.node_id)) {
+
+	    if (next_hop.node_id.equals (req.node_id)
+                && logger.isDebugEnabled ())
+                logger.debug ("next hop for " + req + " is joining node!");
+
+	    // We're the root.  Send a response.
+
+	    LinkedList<NeighborInfo> path = new LinkedList<NeighborInfo>();
+            for (NeighborInfo n : req.path) 
+                path.addLast(n);
+
+            
+	    path.addLast (my_neighbor_info);
+
+	    dispatch (new JoinResp (req.peer, req.source_id, my_node_id, path, leaf_set.as_set ())); //TODO
+
+	    // Add it to our leaf set and routing table.
+
+	    add_to_rt (joiner);
+	    add_to_ls (joiner);
+	}
+	else {
+            final JoinReq orig = req;
+	    try {
+		req = (JoinReq) req.clone ();
+	    }
+	    catch (CloneNotSupportedException e) {
+                BUG (e);
+	    }
+	    req.path.addLast (my_neighbor_info);	    
+	    req.peer = next_hop.peer;
+	    req.inbound = false;
+            req.comp_q = my_sink;
+            req.user_data = new RecursiveRouteCB (next_hop, 
+                    new Runnable() { public void run() { handleEvent(orig); }});
+            req.timeout_sec = 5;
+	    dispatch (req);
+	}
+    }
+
+    protected void handle_join_resp (JoinResp resp) {
+
+	// The one who sent this message should be last in the path.
+
+    // modify the my_root.node_id.equals (resp.peer) to the my_root.node_id.equals (resp.nodeid)
+	NeighborInfo my_root = (NeighborInfo) resp.path.getLast ();
+	if (! my_root.node_id.equals (resp.source_id)) {
+	    logger.warn ("my_root=" + my_root + ", but join resp.sender=" +
+		    resp.sender + ".  Retrying join.");
+	    // Wait for timeout.
+	    return;
+	}
+
+	// Add the node that sent the response...
+
+	add_to_rt (my_root);
+	add_to_ls (my_root);
+        location_cache.add_node (my_root);
+
+	// ...and all the people in its leaf set.  Note that if we're already
+        // initialized, this is a JoinResp in response to our looking for
+        // evidence of a partition.  If there hasn't been one, a down node has
+        // come back up and routed our existing leaf set back to us, in which
+        // case the add_to_ls calls will have no effect.  On the other hand,
+        // the add_to_rt calls might, and we have a separate mechanism to
+        // handle optimizing the RT, so we don't do anything to the RT here.
+
+	for (Iterator i = resp.leaf_set.iterator (); i.hasNext (); ) {
+	    NeighborInfo ni = (NeighborInfo) i.next ();
+	    if (! ni.node_id.equals (my_node_id)) {
+		add_to_ls (ni);
+                if (! initialized)
+                    add_to_rt (ni);
+                // Don't add nodes to the location cache w/o direct
+                // confirmation that they're up, such as receiving a message
+                // from them.
+                // location_cache.add_node (ni);
+	    }
+	}
+
+	// At this point, we can route queries.
+        //
+        // If none of these pings come back, we will think we're the root for
+        // everything.  It should get handled by the partition healing code
+        // eventually, though.
+
+        if (! initialized) {
+	    logger.info ("Joined through gateway " + resp.path.getFirst ());
+
+            set_initialized ();
+
+            // Add the nodes from the join path to the routing table.  (The
+            // maintenance algorithm will fill in the rest.)
+
+            for (Iterator i = resp.path.iterator (); i.hasNext (); ) {
+                NeighborInfo ni = (NeighborInfo) i.next ();
+                add_to_rt (ni);
+                // Don't add nodes to the location cache w/o direct
+                // confirmation that they're up, such as receiving a message
+                // from them.
+                // location_cache.add_node (ni);
+            }
+        }
+    }
+
+    //////////////////////////////////////////////////////////////////////
+    //
+    //  		      Probe Ping functions
+    //
+    //////////////////////////////////////////////////////////////////////
+
+    protected Set<NeighborInfo> pings_in_flight = 
+        new LinkedHashSet<NeighborInfo>();
+
+    protected void send_ping (NeighborInfo ni) {
+	if (! pings_in_flight.contains (ni)) {
+
+	    pings_in_flight.add (ni);
+
+            PingMsg outb = new PingMsg (ni.peer, ni.node_id, my_node_id);  
+            outb.comp_q = my_sink;
+            outb.user_data = new ProbePingCB (ni);
+            outb.timeout_sec = 5;
+            dispatch (outb);
+	}
+    }
+
+    protected class ProbePingCB implements NetMsgResultCB {
+        NeighborInfo ni;
+        public ProbePingCB (NeighborInfo n) { ni = n; }
+        public void success () {
+            pings_in_flight.remove (ni);
+            generic_msg_success (ni);
+            dispatch (new NetworkLatencyReq (ni.node_id, my_sink, ni));
+        }
+        public void failure () {
+	    pings_in_flight.remove (ni);
+        }
+        public String toString () { return "(ProbePingCB " + ni + ")"; }
+    }
+
+    protected void handle_net_lat_resp (NetworkLatencyResp resp) {
+
+        if (! resp.success) return;
+
+        NeighborInfo ni = (NeighborInfo) resp.user_data;
+
+        // We got this resp. b/c we think the node is up.  But if it's in
+        // possibly_down, we'll never ping it again.  So pretend for the
+        // moment that its up for sure.
+
+        generic_msg_success (ni);
+
+        // Put this in here so that the add_to_.* functions can see it...
+        Double rtt_ms = new Double ((double) resp.rtt_ms);
+        if (rtt_ms == null)
+            BUG ("compiler bug");
+        latency_map.put (ni, rtt_ms);
+
+	add_to_ls_ping_time (ni, resp.rtt_ms);
+	add_to_rt_ping_time (ni, resp.rtt_ms);
+        location_cache.add_node (ni);
+
+        // ... but don't store latencies for nodes we're not actually
+        // monitoring.
+        if ((! leaf_set.contains (ni)) && (! rt.contains (ni))
+                && (! reverse_rt.contains (ni))) {
+            latency_map.remove (ni);
+        }
+    }
+
+    //////////////////////////////////////////////////////////////////////
+    //
+    //  		       Leaf set functions
+    //
+    //////////////////////////////////////////////////////////////////////
+
+    protected void add_to_ls (NeighborInfo ni) {
+        if (! leaf_set.contains (ni)) {
+            if (have_rtt_ms (ni))
+                add_to_ls_ping_time (ni, Double.MAX_VALUE);
+            else
+                send_ping (ni);
+        }
+    }
+
+    protected boolean add_to_ls_ping_time (NeighborInfo ni, double rtt_ms) {
+	NeighborInfo r = leaf_set.add_node (ni);
+
+	if (r != null) {
+
+            if (logger.isInfoEnabled ()) {
+
+                StringBuffer buf = null;
+
+                if (r == my_neighbor_info) {
+                    buf = new StringBuffer (50);
+                    buf.append ("added ");
+                    buf.append (ni.node_id.address ().getHostAddress ());
+                    buf.append (":");
+                    buf.append (ni.node_id.port ());
+                    buf.append (" to leaf set");
+                }
+                else {
+                    buf = new StringBuffer (80);
+                    buf.append ("replaced ");
+                    buf.append (r.node_id.address ().getHostAddress ());
+                    buf.append (":");
+                    buf.append (r.node_id.port ());
+                    buf.append (" with ");
+                    buf.append (ni.node_id.address ().getHostAddress ());
+                    buf.append (":");
+                    buf.append (ni.node_id.port ());
+                    buf.append (" in leaf set");
+                }
+
+                logger.info (buf);
+            }
+
+	    // Notify local node.
+
+	    notify_leaf_set_changed ();
+
+	    return true;
+	}
+	return false;
+    }
+
+    protected boolean remove_from_ls (NeighborInfo ni) {
+	int result = leaf_set.remove_node (ni);
+	if (result != LeafSet.REMOVED_NONE) {
+
+            if (logger.isInfoEnabled ()) {
+                StringBuffer buf = new StringBuffer (50);
+                buf.append ("removed ");
+                buf.append (ni.node_id.address ().getHostAddress ());
+                buf.append (":");
+                buf.append (ni.node_id.port ());
+                buf.append (" from leaf set");
+                logger.info (buf);
+            }
+
+	    // It may be the case that there is no one left in our leaf
+	    // set.  If so, try and recover it using the routing table.
+
+	    boolean more_added = false;
+	    if (leaf_set.as_set ().isEmpty ()) {
+		for (int level = 0; level < GUID_DIGITS; ++level) {
+		    for (int digit = 0; digit < DIGIT_VALUES; ++digit) {
+			NeighborInfo primary = rt.primary (level, digit);
+			if ((primary != null) &&
+			    (primary != my_neighbor_info) &&
+			    (! primary.equals (ni))) {
+
+			    more_added = add_to_ls_ping_time (primary,
+				    rtt_ms (primary)) || more_added;
+			}
+		    }
+		}
+	    }
+
+	    // If other nodes were added to the leaf set, applications will
+	    // have been notified because of that, so we don't need to do
+	    // it again.
+
+	    if (! more_added)
+		notify_leaf_set_changed ();
+
+	    return true;
+	}
+
+	return false;
+    }
+
+    //////////////////////////////////////////////////////////////////////
+    //
+    //  		  Routing table functions
+    //
+    //////////////////////////////////////////////////////////////////////
+
+    protected void add_to_rt (NeighborInfo ni) {
+        if (! rt.contains (ni)) {
+            if (have_rtt_ms (ni))
+                add_to_rt_ping_time (ni, rtt_ms (ni));
+            else
+                send_ping (ni);
+        }
+    }
+
+    protected boolean add_to_rt_ping_time (NeighborInfo ni, double rtt_ms) {
+
+	NeighborInfo r = rt.add (ni, rtt_ms, PNS, now_ms ());
+	if (r == null)
+            return false;
+
+        BambooNeighborInfo [] removed = null;
+        if (r != my_neighbor_info) {
+            removed = new BambooNeighborInfo [1];
+            removed [0] =
+                new BambooNeighborInfo (r.peer, r.node_id, r.guid, rtt_ms (r));
+
+            dispatch (new RoutingNeighborAnnounce (r.peer, 
+                        r.node_id, my_node_id, my_guid, false));
+        }
+
+        dispatch (new RoutingNeighborAnnounce (ni.peer, ni.node_id, my_node_id, my_guid, true));
+
+        BambooNeighborInfo [] added = {
+            new BambooNeighborInfo (ni.peer, ni.node_id, ni.guid, rtt_ms)
+        };
+        notify_routing_table_changed (added, removed);
+
+        if (logger.isInfoEnabled ()) {
+            StringBuffer buf = null;
+            if (r == my_neighbor_info) {
+                buf = new StringBuffer (50);
+                buf.append ("added ");
+                buf.append (ni.node_id.address ().getHostAddress ());
+                buf.append (":");
+                buf.append (ni.node_id.port ());
+                buf.append (" to routing table");
+            }
+            else {
+                buf = new StringBuffer (80);
+                buf.append ("replaced ");
+                buf.append (r.node_id.address ().getHostAddress ());
+                buf.append (":");
+                buf.append (r.node_id.port ());
+                buf.append (" with ");
+                buf.append (ni.node_id.address ().getHostAddress ());
+                buf.append (":");
+                buf.append (ni.node_id.port ());
+                buf.append (" in routing table");
+            }
+            logger.info (buf);
+        }
+
+        return true;
+    }
+
+    protected boolean remove_from_rt (NeighborInfo ni) {
+
+	int level = rt.remove (ni);
+	if (level == -1)
+	    return false;
+
+        if (logger.isInfoEnabled ()) {
+            StringBuffer buf = new StringBuffer (50);
+            buf.append ("removed ");
+            buf.append (ni.node_id.address ().getHostAddress ());
+            buf.append (":");
+            buf.append (ni.node_id.port ());
+            buf.append (" from routing table");
+            logger.info (buf);
+        }
+
+	BambooNeighborInfo [] removed = {
+	    new BambooNeighborInfo (ni.peer, ni.node_id, ni.guid)
+	};
+
+	notify_routing_table_changed (null, removed);
+
+	return true;
+    }
+
+    //////////////////////////////////////////////////////////////////////
+    //
+    // 		       Reverse Routing Table Functions
+    //
+    //////////////////////////////////////////////////////////////////////
+
+    protected void add_to_rrt (NeighborInfo ni) {
+	if (! reverse_rt.contains (ni)) {
+
+	    reverse_rt.add (ni);
+
+	    BambooNeighborInfo [] added = {
+		new BambooNeighborInfo (ni.peer, ni.node_id, ni.guid)
+	    };
+
+	    notify_reverse_routing_table_changed (added, null);
+	}
+    }
+
+    protected boolean remove_from_rrt (NeighborInfo ni) {
+        if (reverse_rt.remove (ni)) {
+            BambooNeighborInfo [] removed = {
+                new BambooNeighborInfo (ni.peer, ni.node_id, ni.guid)
+            };
+
+            notify_reverse_routing_table_changed (null, removed);
+            return true;
+        }
+
+        return false;
+    }
+
+    //////////////////////////////////////////////////////////////////////
+    //
+    // 		          Node monitoring functions
+    //
+    //////////////////////////////////////////////////////////////////////
+
+    protected boolean have_rtt_ms (NeighborInfo ni) {
+	return latency_map.containsKey (ni);
+    }
+
+    protected double rtt_ms (NeighborInfo ni) {
+	Double result = latency_map.get (ni);
+        if (result == null) {
+            logger.fatal ("No latency for " + ni);
+            Iterator i = latency_map.keySet ().iterator ();
+            while (i.hasNext ()) {
+                NeighborInfo other = (NeighborInfo) i.next ();
+                Double lat = latency_map.get (other);
+                logger.fatal ("  " + other + ", " + lat + " ms");
+            }
+            throw new IllegalStateException ("No latency for " + ni);
+        }
+	return result.doubleValue ();
+    }
+
+    //////////////////////////////////////////////////////////////////////
+    //
+    // 		              Routing functions
+    //
+    //////////////////////////////////////////////////////////////////////
+
+    /**
+     * Calculate the next hop using the standard algorithm.  If we're within
+     * the range of the leaf set, returns the root.  Otherwise, if we can
+     * resolve another digit using a neighbor in the routing table, returns
+     * that neighbor.  If neither of the above, returns the closest node in
+     * the leaf set.  If my_neighbor_info is returned, we're the root.
+     */
+    public NeighborInfo calcNextHop(BigInteger key) {
+        return calc_next_hop(key, false);
+    }
+
+    protected NeighborInfo calc_next_hop (BigInteger guid, boolean use_lc) {
+
+	// It's important to check the leaf set first.  Consider:
+	//
+	//   search guid:  0x30000000
+	//   my guid:      0x2fffffff
+	//   another node: 0x3fffffff
+	//
+	// Clearly, I'm closer than the other node, but if I were to make
+	// my forwarding decision using the routing table, it would tell me
+	// to go to the other node, since it has a longer matching prefix
+	// than me with the search guid.  Since the end goal is to find the
+	// node with the closest (numerically) guid to the search guid,
+	// then, we always check the leaf set first.
+
+        Set<NeighborInfo> ignore = ignore_possibly_down
+            ? (new LinkedHashSet<NeighborInfo>()) : possibly_down.keySet();
+
+	if (leaf_set.within_leaf_set (guid)) {
+	    NeighborInfo result = leaf_set.closest_leaf (guid, ignore);
+	    if (logger.isDebugEnabled ()) logger.debug (
+		    "dst is in our leaf set, closest to " + result);
+	    return result;
+	}
+	else {
+
+	    NeighborInfo next_hop = rt.next_hop (guid, ignore);
+            NeighborInfo lc_nh =
+                use_lc ? location_cache.closest_node (guid) : null;
+
+	    if (next_hop == null) {
+		next_hop = leaf_set.closest_leaf (guid, ignore);
+                if (lc_nh != null) {
+                    BigInteger nhd = calc_dist (next_hop.guid, guid);
+                    BigInteger lc_nhd = calc_dist (lc_nh.guid, guid);
+                    if (lc_nhd.compareTo (nhd) < 0) {
+			if (logger.isDebugEnabled ()) logger.debug (
+                                "dst not in leaf set, and matches hole in " +
+                                " routing table; using " + lc_nh +
+                                " from location cache");
+                        return lc_nh;
+                    }
+                }
+
+		if (logger.isDebugEnabled ()) logger.debug (
+			"dst not in leaf set, and matches hole in routing" +
+			" table; using " + next_hop + " from leaf set");
+		return next_hop;
+	    }
+	    else {
+                if (lc_nh != null) {
+                    BigInteger nhd = calc_dist (next_hop.guid, guid);
+                    BigInteger lc_nhd = calc_dist (lc_nh.guid, guid);
+                    if (lc_nhd.compareTo (nhd) < 0) {
+                        if (logger.isDebugEnabled ()) logger.debug (
+                                "dst not in leaf set, using " + lc_nh +
+                                " from location cache");
+                        return lc_nh;
+                    }
+                }
+
+		if (logger.isDebugEnabled ()) logger.debug (
+			"dst not in leaf set, using " + next_hop +
+			" from routing table");
+		return next_hop;
+	    }
+	}
+    }
+
+    public LinkedHashMap<NeighborInfo,Long> allNeighbors() {
+        Set<NeighborInfo> n = leaf_set.as_set();
+        n.addAll(rt.as_list());
+        LinkedHashMap<NeighborInfo,Long> m = 
+            new LinkedHashMap<NeighborInfo,Long>();
+        for (NeighborInfo ni : n) {
+            long lat = network.estimatedRTTMillis(ni.node_id);
+            m.put(ni, new Long(lat == -1 ? Long.MAX_VALUE : lat));
+        }
+        return m;
+    }
+
+    /**
+     * Calculates the next hop using Proximity Route Selection (PRS).  I.e.
+     * make monotonic progress towards the root, but otherwise go to the
+     * neighbor closest in network latency.  If my_neighbor_info is returned,
+     * we're the root.
+     */
+    public NeighborInfo calcNextHopPRS(BigInteger key) {
+        return calcNextHopPRS(key, allNeighbors());
+    }
+
+    /**
+     * Calculates the next hop using Proximity Route Selection (PRS).  I.e.
+     * make monotonic progress towards the root, but otherwise go to the
+     * neighbor closest in network latency.  If my_neighbor_info is returned,
+     * we're the root.
+     */
+    public NeighborInfo calcNextHopPRS(BigInteger key, 
+                                       Map<NeighborInfo,Long> allNeighbors) {
+
+        NeighborInfo result = null;
+        BigInteger current = calc_dist(my_guid, key);
+        long min = Long.MAX_VALUE;
+        for (NeighborInfo ni : allNeighbors.keySet()) {
+            if (!possibly_down.containsKey(ni)) {
+                // This neighbor seems to be up.
+
+                BigInteger dist = calc_dist(ni.guid, key);
+                if ((dist.compareTo(current) < 0) 
+                    || ((dist.compareTo(current) == 0) 
+                        && in_range_mod (my_guid, ni.guid, key) 
+                        && (!in_range_mod (ni.guid, my_guid, key)))) {
+                    // And they make monotonic progress in the key space.
+
+                    long lat = allNeighbors.get(ni).longValue();
+                    if (result == null || lat < min) {
+                        // And they're the closest such node in the
+                        // physical network space.
+                        result = ni;
+                        min = lat;
+                    }
+                }
+            }
+        }
+        if (result == null) 
+            result = my_neighbor_info;
+        return result;
+    }
+
+    /**
+     * Calculates the next hop using scaled Proximity Route Selection (PRS).
+     * I.e.  make monotonic progress towards the root, but otherwise go to the
+     * neighbor that makes the most progress / network latency.  If
+     * my_neighbor_info is returned, we're the root.
+     */
+    public NeighborInfo calcNextHopScaledPRS(BigInteger key, 
+            Function2<BigInteger,BigInteger,Long> scalingFunc) {
+        return calcNextHopScaledPRS(key, scalingFunc, allNeighbors());
+    }
+
+    /**
+     * Calculates the next hop using scaled Proximity Route Selection (PRS).
+     * I.e.  make monotonic progress towards the root, but otherwise go to the
+     * neighbor that makes the most progress / network latency.  If
+     * my_neighbor_info is returned, we're the root.
+     */
+    public NeighborInfo calcNextHopScaledPRS(BigInteger key, 
+            Function2<BigInteger,BigInteger,Long> scalingFunc,
+            Map<NeighborInfo,Long> allNeighbors) {
+
+        NeighborInfo result = null;
+        BigInteger current = calc_dist(my_guid, key);
+        BigInteger max = BigInteger.ZERO;
+        for (NeighborInfo ni : allNeighbors.keySet()) {
+            if (!possibly_down.containsKey(ni)) {
+                // This neighbor seems to be up.
+
+                BigInteger dist = current.subtract(calc_dist(ni.guid, key));
+                if ((dist.compareTo(BigInteger.ZERO) > 0) 
+                    || ((dist.compareTo(BigInteger.ZERO) == 0) 
+                        && in_range_mod (my_guid, ni.guid, key) 
+                        && (!in_range_mod (ni.guid, my_guid, key)))) {
+                    // And they make monotonic progress in the key space.
+
+                    long lat = allNeighbors.get(ni).longValue();
+                    BigInteger scaled = scalingFunc.run(dist, new Long(lat));
+                    if (result == null || scaled.compareTo(max) > 0) {
+                        // And they make the most progress / latency.
+                        result = ni;
+                        max = scaled;
+                    }
+                }
+            }
+        }
+        if (result == null) 
+            result = my_neighbor_info;
+        return result;
+    }
+
+    public static Function2<BigInteger,BigInteger,Long> greedyScaling =
+        new Function2<BigInteger,BigInteger,Long>() {
+            public BigInteger run(BigInteger dist, Long lat) { return dist; }
+        };
+
+    /**
+     * Calculates the next hop using greedy routing.
+     */
+    public NeighborInfo calcNextHopGreedy(BigInteger key, 
+                                          Map<NeighborInfo,Long> allNeighbors) {
+        return calcNextHopScaledPRS(key, greedyScaling, allNeighbors);
+    }
+
+    /**
+     * Calculates the next hop using greedy routing.
+     */
+    public NeighborInfo calcNextHopGreedy(BigInteger key) {
+        return calcNextHopScaledPRS(key, allNeighbors());
+    }
+
+    public static Function2<BigInteger,BigInteger,Long> prsScaling =
+        new Function2<BigInteger,BigInteger,Long>() {
+            public BigInteger run(BigInteger dist, Long lat) {
+                return dist.divide(BigInteger.valueOf(lat.longValue()));
+            }
+        };
+
+    public NeighborInfo calcNextHopScaledPRS(BigInteger key) {
+        return calcNextHopScaledPRS(key, allNeighbors());
+    }
+
+    public NeighborInfo calcNextHopScaledPRS(BigInteger key,
+            Map<NeighborInfo,Long> allNeighbors) {
+        return calcNextHopScaledPRS(key, prsScaling, allNeighbors);
+    }
+
+    protected int est_hops_to_go (BigInteger guid, boolean use_lc) {
+        Set<NeighborInfo> ignore = possibly_down.keySet();
+	if (leaf_set.within_leaf_set (guid)) {
+            if (leaf_set.closest_leaf (guid, ignore) == my_neighbor_info)
+                return 0;
+            else
+                return 1;
+	}
+	else {
+            return rt.highest_level () - rt.matching_digits (guid);
+        }
+    }
+
+    public BigInteger calc_dist (BigInteger a, BigInteger b) {
+        return GuidTools.calc_dist (a, b, MODULUS);
+    }
+
+    public boolean in_range_mod(
+	    BigInteger low, BigInteger high, BigInteger query) {
+	return GuidTools.in_range_mod(low, high, query, MODULUS);
+    }
+
+    protected void add_to_down_nodes (NeighborInfo n) {
+        if (down_nodes_cap > 0) {
+            down_nodes.remove (n);
+            down_nodes.add (n);
+            if (down_nodes.size () > down_nodes_cap) {
+                Iterator<NeighborInfo> i = down_nodes.iterator ();
+                assert i.hasNext ();
+                i.next ();
+                i.remove ();
+            }
+        }
+    }
+
+    public interface LookupCb {
+        void lookup_cb (BigInteger lookup_id, BigInteger closest_id,
+                        NodeId closest_addr, Object user_data);
+    }
+
+    protected Map<BigInteger,PendingLookupInfo> pending_lookups = 
+        new LinkedHashMap<BigInteger,PendingLookupInfo>();
+
+    protected static class PendingLookupInfo {
+        public LinkedList<Pair<LookupCb,Object>> cbs = 
+            new LinkedList<Pair<LookupCb,Object>>();
+        public long last_start_time;
+        public PendingLookupInfo (long l) { last_start_time = l; }
+    }
+
+    public void lookup (BigInteger id, LookupCb cb, Object user_data) {
+        PendingLookupInfo pl = pending_lookups.get(id);
+        if (pl == null) {
+            pl = new PendingLookupInfo (now_ms ());
+            pending_lookups.put (id, pl);
+            BambooRouteInit outb = new BambooRouteInit (
+                    id, 0, false, false, new LookupReqPayload (my_node_id));
+            classifier.dispatch_later (outb, 0);
+            acore.registerTimer(60*1000, curry(lookupTimeout, id));
+        }
+        pl.cbs.addLast (new Pair<LookupCb,Object>(cb, user_data));
+    }
+
+    protected Thunk1<BigInteger> lookupTimeout = new Thunk1<BigInteger>() {
+        public void run(BigInteger id) {
+            PendingLookupInfo pl = pending_lookups.get(id);
+            if ((pl != null) && (now_ms () > 60*1000 + pl.last_start_time)) {
+                pl.last_start_time = now_ms ();
+                BambooRouteInit outb = new BambooRouteInit (
+                        id, 0, false, false, new LookupReqPayload (my_node_id));
+                classifier.dispatch_later (outb, 0);
+                acore.registerTimer(60*1000, curry(this, id));
+            }
+        }
+    };
+
+    ///////////////////////////////////////////////////////////////////    
+    //
+    //      Code to keep track of neighbors Vivaldi coordinates.
+    //
+    ///////////////////////////////////////////////////////////////////    
+
+    public VirtualCoordinate coordinate(NeighborInfo ni) {
+        Pair<VirtualCoordinate,Long> p = coords.get(ni);
+        return (p == null) ? null : p.first;
+    }
+
+    protected Map<NeighborInfo,Pair<VirtualCoordinate,Long>> coords = 
+        new LinkedHashMap<NeighborInfo,Pair<VirtualCoordinate,Long>>();
+
+    protected static int COORD_CHECK = 60*1000;
+
+    protected Runnable expireCoordsAlarm = new Runnable() {
+        public void run() {
+            long timer_ms = timer_ms();
+            Iterator<NeighborInfo> i = coords.keySet().iterator();
+            while (i.hasNext()) {
+                NeighborInfo ni = i.next();
+                Pair<VirtualCoordinate,Long> p = coords.get(ni);
+                if (p.second.longValue() + COORD_CHECK > timer_ms)
+                    i.remove();
+            }
+            acore.registerTimer(randomPeriod(COORD_CHECK), this);
+        }
+    };
+
+    protected LinkedList<NeighborInfo> sendCoordsShuffle = 
+        new LinkedList<NeighborInfo>();
+
+    protected int send_coord_period = 1000;
+
+    protected Runnable sendCoordsAlarm = new Runnable() {
+        public void run() {
+            if (sendCoordsShuffle.isEmpty()) {
+                Set<NeighborInfo> s = leaf_set.as_set();
+                s.addAll(rt.as_list());
+                sendCoordsShuffle.addAll(s);
+            }
+            if (!sendCoordsShuffle.isEmpty()) {
+                NeighborInfo ni = sendCoordsShuffle.removeFirst();
+                CoordReq req = 
+                    new CoordReq(my_node_id, my_guid, vivaldi.localCoordinates()); 
+                rpc.sendRequest(ni.node_id, req, 5, CoordResp.class, 
+                                curry(coordRespHandler, ni), null);
+            }
+            acore.registerTimer(randomPeriod(send_coord_period), this);
+        }
+    };
+
+    protected Thunk2<NeighborInfo,CoordResp> coordRespHandler = 
+        new Thunk2<NeighborInfo,CoordResp>() {
+        public void run(NeighborInfo ni, CoordResp resp) {
+            coords.put(ni, Pair.create(resp.coords, new Long(timer_ms())));
+        }
+    };
+
+    protected Thunk3<InetSocketAddress,CoordReq,Object> coordReqHandler = 
+        new Thunk3<InetSocketAddress,CoordReq,Object>() {
+        public void run(InetSocketAddress peer, CoordReq req, Object respTok) {
+            NeighborInfo other = 
+                new NeighborInfo(NodeId.create(peer), req.node_id, req.srcID);
+            coords.put(other, Pair.create(req.srcCoords, new Long(timer_ms())));
+            VirtualCoordinate local = vivaldi.localCoordinates();
+            rpc.sendResponse(new CoordResp(vivaldi.localCoordinates()),respTok);
+        }
+    };
+}
+
diff -urN bamboo/src/bamboo/router/RoutingNeighborAnnounce.java bamboo1/src/bamboo/router/RoutingNeighborAnnounce.java
--- bamboo/src/bamboo/router/RoutingNeighborAnnounce.java	2003-10-05 21:22:11.000000000 +0300
+++ bamboo1/src/bamboo/router/RoutingNeighborAnnounce.java	2008-05-15 16:36:38.000000000 +0300
@@ -26,8 +26,8 @@
     public BigInteger guid;
     public boolean add;
 
-    public RoutingNeighborAnnounce (NodeId dest, BigInteger g, boolean a) {
-	super (dest, false);  guid = g;  add = a;
+    public RoutingNeighborAnnounce (NodeId dest, NodeId dest_id, NodeId source_id, BigInteger g, boolean a) {
+	super (dest, dest_id, source_id, false);  guid = g;  add = a;
     }
 
     public RoutingNeighborAnnounce (InputBuffer buffer) throws QSException {
diff -urN bamboo/src/bamboo/router/RoutingTable.java bamboo1/src/bamboo/router/RoutingTable.java
--- bamboo/src/bamboo/router/RoutingTable.java	2005-12-15 23:16:14.000000000 +0200
+++ bamboo1/src/bamboo/router/RoutingTable.java	2008-05-13 16:09:30.000000000 +0300
@@ -181,6 +181,7 @@
      * that neighbor is returned; if it is added, but does not replace any
      * existing neighbor, then my_neigbor_info is returned.
      */
+    
     public NeighborInfo add (NeighborInfo ni, double rtt_ms, 
                              boolean pns, long now_ms) {
 
diff -urN bamboo/src/bamboo/router/RoutingTableReq.java bamboo1/src/bamboo/router/RoutingTableReq.java
--- bamboo/src/bamboo/router/RoutingTableReq.java	2003-10-05 21:22:11.000000000 +0300
+++ bamboo1/src/bamboo/router/RoutingTableReq.java	2008-05-15 16:37:22.000000000 +0300
@@ -27,9 +27,10 @@
     public BigInteger guid;
     public int level;
 
-    public RoutingTableReq (NodeId dest, BigInteger g, int l) {
-	super (dest, false);  guid = g;  level = l;
+    public RoutingTableReq (NodeId dest, NodeId dest_id, NodeId source_id, BigInteger g, int l) {
+	super (dest, dest_id, source_id, false);  guid = g;  level = l;
     }
+    
 
     public RoutingTableReq (InputBuffer buffer) throws QSException {
 	super (buffer);
diff -urN bamboo/src/bamboo/router/RoutingTableResp.java bamboo1/src/bamboo/router/RoutingTableResp.java
--- bamboo/src/bamboo/router/RoutingTableResp.java	2003-12-29 20:10:43.000000000 +0200
+++ bamboo1/src/bamboo/router/RoutingTableResp.java	2008-05-15 16:37:57.000000000 +0300
@@ -26,8 +26,8 @@
     public BigInteger peer_guid;
     public LinkedList neighbors;
 
-    public RoutingTableResp (NodeId dest, BigInteger g, LinkedList n) {
-	super (dest, false);
+    public RoutingTableResp (NodeId dest, NodeId dest_id, NodeId source_id, BigInteger g, LinkedList n) {
+	super (dest, dest_id, source_id, false);
         peer_guid = g;
 	neighbors = n;
     }
diff -urN bamboo/src/bamboo/router/RoutingTableTest.java bamboo1/src/bamboo/router/RoutingTableTest.java
--- bamboo/src/bamboo/router/RoutingTableTest.java	2004-02-13 06:28:01.000000000 +0200
+++ bamboo1/src/bamboo/router/RoutingTableTest.java	2008-05-19 17:21:29.000000000 +0300
@@ -103,7 +103,7 @@
 		    sh = new SHA1Hash(my_node_id);
 		}
 	    }
-	    my_ni = new NeighborInfo (my_node_id,
+	    my_ni = new NeighborInfo (my_node_id, my_node_id,    //TODO
 		    GuidTools.secure_hash_to_big_integer (sh));
 	} 
 	else {
@@ -119,12 +119,12 @@
                     Carp.die ("TClient.init:  Caught exception " + e +
                             " while trying to read pkey from disk.");
                 }
-                my_ni = new NeighborInfo (my_node_id,
+                my_ni = new NeighborInfo (my_node_id, my_node_id,   //TODO
                         GuidTools.secure_hash_to_big_integer (
                             new SHA1Hash (pkey)));
             }
             else {
-                my_ni = new NeighborInfo (my_node_id,
+                my_ni = new NeighborInfo (my_node_id, my_node_id,  //TODO
                         GuidTools.secure_hash_to_big_integer (
                             new SHA1Hash (my_node_id)));
             }
@@ -183,12 +183,12 @@
         else if (item instanceof BambooLeafSetChanged) {
             BambooLeafSetChanged event = (BambooLeafSetChanged) item;
             for (int i = 0; i < event.preds.length; ++i) {
-                NeighborInfo ni = new NeighborInfo (
+                NeighborInfo ni = new NeighborInfo (event.preds [i].peer,   //TODO
                         event.preds [i].node_id, event.preds [i].guid);
                 leaf_set.add (ni);
             }
             for (int i = 0; i < event.succs.length; ++i) {
-                NeighborInfo ni = new NeighborInfo (
+                NeighborInfo ni = new NeighborInfo (event.succs [i].peer, 
                         event.succs [i].node_id, event.succs [i].guid);
                 leaf_set.add (ni);
             }
@@ -226,7 +226,7 @@
             BambooRoutingTableChanged event = (BambooRoutingTableChanged) item;
             if (event.added != null) {
                 for (int i = 0; i < event.added.length; ++i) {
-                    NeighborInfo ni = new NeighborInfo (
+                    NeighborInfo ni = new NeighborInfo (event.added [i].peer,   //TODO
                             event.added [i].node_id, event.added [i].guid);
                     if (logger.isDebugEnabled ()) logger.debug ("added " + ni + " to rt_set");
                     rt_set.add (ni);
@@ -234,7 +234,7 @@
             }
             if (event.removed != null) {
                 for (int i = 0; i < event.removed.length; ++i) {
-                    NeighborInfo ni = new NeighborInfo (
+                    NeighborInfo ni = new NeighborInfo ( event.removed [i].peer,   //TODO
                             event.removed [i].node_id, event.removed [i].guid);
                     if (logger.isDebugEnabled ()) logger.debug ("removed " + ni + " from rt_set");
                     rt_set.remove (ni);
Binary files bamboo/src/bamboo/router/test/RoutePerf$Alarm.class and bamboo1/src/bamboo/router/test/RoutePerf$Alarm.class differ
Binary files bamboo/src/bamboo/router/test/RoutePerf.class and bamboo1/src/bamboo/router/test/RoutePerf.class differ
Binary files bamboo/src/bamboo/router/test/RoutePerf$Payload.class and bamboo1/src/bamboo/router/test/RoutePerf$Payload.class differ
diff -urN bamboo/src/bamboo/softscribe/MCastDownMsg.java bamboo1/src/bamboo/softscribe/MCastDownMsg.java
--- bamboo/src/bamboo/softscribe/MCastDownMsg.java	2004-08-04 22:23:27.000000000 +0300
+++ bamboo1/src/bamboo/softscribe/MCastDownMsg.java	2008-05-16 15:53:09.000000000 +0300
@@ -39,7 +39,7 @@
 
     public MCastDownMsg (BigInteger srcguid, NodeId srcid, NodeId dstid, 
 			 QuickSerializable o) {
-	super(dstid, false /* outbound */);
+	super(dstid, dstid, srcid, false /* outbound */);
 	this.srcguid = srcguid;
 	this.srcid = srcid;
 	this.dstid = dstid;
diff -urN bamboo/src/bamboo/util/StringUtil.java bamboo1/src/bamboo/util/StringUtil.java
--- bamboo/src/bamboo/util/StringUtil.java	2005-05-12 01:41:35.000000000 +0300
+++ bamboo1/src/bamboo/util/StringUtil.java	2008-05-16 17:30:35.000000000 +0300
@@ -8,6 +8,7 @@
 package bamboo.util;
 import java.text.NumberFormat;
 import java.net.InetSocketAddress;
+import bamboo.router.NeighborInfo;
 
 public class StringUtil {
 
@@ -22,7 +23,18 @@
         buf.append(":");
         buf.append(addr.getPort());
     }
-
+    
+    public static void addr_to_sbuf(NeighborInfo addr, StringBuffer buf) {
+        buf.append(addr.peer.getAddress().getHostAddress());
+        buf.append(":");
+        buf.append(addr.peer.getPort());
+        buf.append(",");
+        buf.append(addr.node_id.getAddress().getHostAddress());
+        buf.append(":");
+        buf.append(addr.node_id.getPort());
+    }
+    
+   
     private static final char[] digits = {
 	'0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,
 	'a' , 'b' , 'c' , 'd' , 'e' , 'f'
diff -urN bamboo/src/bamboo/vis/ExtendedNeighborInfo.java bamboo1/src/bamboo/vis/ExtendedNeighborInfo.java
--- bamboo/src/bamboo/vis/ExtendedNeighborInfo.java	2005-07-15 00:18:22.000000000 +0300
+++ bamboo1/src/bamboo/vis/ExtendedNeighborInfo.java	2008-05-19 17:03:48.000000000 +0300
@@ -24,15 +24,15 @@
     public long rtt_ms;
 
     public ExtendedNeighborInfo (NeighborInfo n) {
-        super (n.node_id, n.guid);
+        super (n.peer, n.node_id, n.guid);
     }
 
-    public ExtendedNeighborInfo (NodeId n, BigInteger g) {
-	super (n, g);
+    public ExtendedNeighborInfo (NodeId p, NodeId n, BigInteger g) {
+	super (p, n, g);
     }
 
-    public ExtendedNeighborInfo (NodeId a, BigInteger i, long r) {
-        super (a, i);
+    public ExtendedNeighborInfo (NodeId p, NodeId a, BigInteger i, long r) {
+        super (p, a, i);
         rtt_ms = r;
     }   
 }
diff -urN bamboo/src/bamboo/vis/FetchNodeInfoThread.java bamboo1/src/bamboo/vis/FetchNodeInfoThread.java
--- bamboo/src/bamboo/vis/FetchNodeInfoThread.java	2005-08-23 05:41:22.000000000 +0300
+++ bamboo1/src/bamboo/vis/FetchNodeInfoThread.java	2008-05-19 17:18:27.000000000 +0300
@@ -317,7 +317,7 @@
                 BigInteger id = new BigInteger(m.group (4), 16).multiply (mult);
                 int rtt_ms = Integer.parseInt (m.group (5));
                 NodeId n = new NodeId (port, addr);
-                ExtendedNeighborInfo neigh = new ExtendedNeighborInfo (n, id, rtt_ms);
+                ExtendedNeighborInfo neigh = new ExtendedNeighborInfo (n, n, id, rtt_ms);
                 if (position < 0) 
                     result.preds.addFirst (neigh);
                 else 
@@ -334,7 +334,7 @@
                 BigInteger id = new BigInteger(m.group (5), 16).multiply (mult);
                 int rtt_ms = Integer.parseInt (m.group (6));
                 NodeId n = new NodeId (port, addr);
-                ExtendedNeighborInfo neigh = new ExtendedNeighborInfo (n, id, rtt_ms);
+                ExtendedNeighborInfo neigh = new ExtendedNeighborInfo (n, n, id, rtt_ms);  //TODO
                 result.rt.addLast (neigh);
                 total_rtt_ms += rtt_ms;
                 ++total_neighbors;
@@ -396,7 +396,7 @@
                     node.ninfo = ninfo;
                     node.FNIT = FNIT;
 
-                    ExtendedNeighborInfo ni = new ExtendedNeighborInfo (ninfo.addr, ninfo.id);
+                    ExtendedNeighborInfo ni = new ExtendedNeighborInfo (ninfo.addr, ninfo.addr, ninfo.id);  //TODO
                     node.leaf_set = new LeafSet (
                                                  ni, Math.max(ninfo.preds.size (), ninfo.succs.size ()),
                                                  MODULUS);
@@ -430,7 +430,7 @@
                     int j = 0;
                     while (i.hasNext ()) {
 			ExtendedNeighborInfo n = (ExtendedNeighborInfo) i.next ();
-			node.routing_table.force_add (new ExtendedNeighborInfo (n.node_id, n.guid), n.rtt_ms);
+			node.routing_table.force_add (new ExtendedNeighborInfo (n.peer, n.node_id, n.guid), n.rtt_ms);
 			String nurl = nid2url (n.node_id);
 			if ((! nodes_by_id.containsKey (n.guid)) &&
                             (! outstanding (nurl))) {
diff -urN bamboo/src/bamboo/vis/Vis.java bamboo1/src/bamboo/vis/Vis.java
--- bamboo/src/bamboo/vis/Vis.java	2005-08-23 05:41:22.000000000 +0300
+++ bamboo1/src/bamboo/vis/Vis.java	2008-05-19 17:15:26.000000000 +0300
@@ -382,7 +382,7 @@
                     if (result == null) 
                         result = new ExtendedNeighborInfo (current.leaf_set.closest_leaf (guid, ignore));
                 }
-                if (result.equals (new ExtendedNeighborInfo (current.node_id, current.guid)))
+                if (result.equals (new ExtendedNeighborInfo (current.node_id, current.node_id, current.guid)))  //TODO
                     break;
                 BambooNode node = FNIT.nodes_by_id.get (result.guid);
                 if (node == null)
diff -urN bamboo/src/bamboo/vivaldi/LocateNodeMsg.java bamboo1/src/bamboo/vivaldi/LocateNodeMsg.java
--- bamboo/src/bamboo/vivaldi/LocateNodeMsg.java	2004-03-10 00:04:37.000000000 +0200
+++ bamboo1/src/bamboo/vivaldi/LocateNodeMsg.java	2008-05-16 18:28:51.000000000 +0300
@@ -36,6 +36,7 @@
    **/
   private NodeId _requestor;
 
+  private NodeId _requestor_node_id;
   /**
    * The orginator's virtual coordinate.
    **/
@@ -55,6 +56,7 @@
    **/
   public LocateNodeMsg(NodeId requestor, VirtualCoordinate coord, int version){
     _requestor = requestor;
+    _requestor_node_id = requestor;
     _coordinate = coord;
     _version_number = version;
   }
@@ -68,6 +70,7 @@
 
     _version_number = buffer.nextInt();
     _requestor = (NodeId) buffer.nextObject();
+    _requestor_node_id = (NodeId) buffer.nextObject();
     _coordinate = (VirtualCoordinate) buffer.nextObject();
   }
 
@@ -81,6 +84,9 @@
     return _requestor;
   }
 
+  public NodeId getRequestorNodeId() {
+	    return _requestor_node_id;
+	  }
   /**
    * Returns the virtual coordinate of the requestor.
    **/
@@ -103,6 +109,7 @@
   public void serialize (OutputBuffer buffer) {
     buffer.add(_version_number);
     buffer.add(_requestor);
+    buffer.add(_requestor_node_id);
     buffer.add(_coordinate);
   }
 
diff -urN bamboo/src/bamboo/vivaldi/LocateNodeResp.java bamboo1/src/bamboo/vivaldi/LocateNodeResp.java
--- bamboo/src/bamboo/vivaldi/LocateNodeResp.java	2004-03-04 23:22:20.000000000 +0200
+++ bamboo1/src/bamboo/vivaldi/LocateNodeResp.java	2008-05-15 16:40:07.000000000 +0300
@@ -44,11 +44,11 @@
    * @param locatedCoordinate The discovered node's virtual coordinate.
    **/
 
-  public LocateNodeResp(NodeId requestor, NodeId locatedId,
+  public LocateNodeResp(NodeId requestor, NodeId dest_id, NodeId source_id, 
                         VirtualCoordinate locatedCoordinate) {
-    super (requestor, false);
+    super (requestor, dest_id, source_id, false);
     _located_coord = locatedCoordinate;
-    _located_id = locatedId;
+    _located_id = source_id;
   }
   
   public LocateNodeResp(InputBuffer buffer) throws QSException { 
diff -urN bamboo/src/bamboo/vivaldi/PingNodeMsg.java bamboo1/src/bamboo/vivaldi/PingNodeMsg.java
--- bamboo/src/bamboo/vivaldi/PingNodeMsg.java	2004-03-04 23:22:20.000000000 +0200
+++ bamboo1/src/bamboo/vivaldi/PingNodeMsg.java	2008-05-15 16:44:58.000000000 +0300
@@ -37,8 +37,8 @@
    * @param coord The sender's current virtual coordinate.
    **/
 
-  public PingNodeMsg(NodeId dest, VirtualCoordinate coord) {
-    super (dest, false);
+  public PingNodeMsg(NodeId dest, NodeId dest_id, NodeId source_id, VirtualCoordinate coord) {
+    super (dest, dest_id, source_id, false);
     _sender_coord = coord;
   }
   
diff -urN bamboo/src/bamboo/vivaldi/PingVCResp.java bamboo1/src/bamboo/vivaldi/PingVCResp.java
--- bamboo/src/bamboo/vivaldi/PingVCResp.java	2004-03-10 00:04:37.000000000 +0200
+++ bamboo1/src/bamboo/vivaldi/PingVCResp.java	2008-05-15 16:45:52.000000000 +0300
@@ -26,7 +26,7 @@
     public VirtualCoordinate coordinate;
     public int version_number;
     public PingVCResp (PingMsg msg, VirtualCoordinate coord, int version_number) {
-        super (msg.peer, false);
+        super (msg.peer, msg.source_id, msg.dest_id, false);
         coordinate = coord;
         this.version_number = version_number;
     }
diff -urN bamboo/src/bamboo/vivaldi/Vivaldi.java bamboo1/src/bamboo/vivaldi/Vivaldi.java
--- bamboo/src/bamboo/vivaldi/Vivaldi.java	2005-08-16 00:49:06.000000000 +0300
+++ bamboo1/src/bamboo/vivaldi/Vivaldi.java	2008-05-22 17:04:53.000000000 +0300
@@ -307,7 +307,7 @@
       if (resp.version_number != _version_number)
         return;
       
-      dispatch(new NetworkLatencyReq(resp.peer, my_sink, resp.coordinate));
+      dispatch(new NetworkLatencyReq(resp.peer, resp.source_id, my_sink, resp.coordinate));   //TODO
     } else if (item instanceof NetworkLatencyResp) {
       NetworkLatencyResp resp = (NetworkLatencyResp) item;
       if (resp.success)
@@ -386,8 +386,8 @@
        it. */
     if (msg.getVersion() != _version_number)
       return;
-    
-    LocateNodeResp reply = new LocateNodeResp(msg.getRequestor(),my_node_id,
+    //logger.info("msg.getRequestor()" + msg.getRequestor() + ", msg.getRequestorNodeId()" + msg.getRequestorNodeId() + ", my_nodi_id" + my_node_id);
+    LocateNodeResp reply = new LocateNodeResp(msg.getRequestor(), msg.getRequestorNodeId(), my_node_id,
                                               _my_coordinate);
     if (_use_reverse_ping) {
       reply.user_data = new PingCB(msg.getRequestorCoord(), now_ms());
@@ -397,7 +397,7 @@
   }
   
   private void handleNodeResponse(LocateNodeResp msg) {
-    PingMsg reply = new PingMsg(msg.getLocatedId());
+    PingMsg reply = new PingMsg(msg.peer, msg.source_id, my_node_id);
     reply.user_data = new PingCB(msg.getLocatedCoordinate(), now_ms());
     reply.comp_q = my_sink;
     dispatch(reply);
diff -urN bamboo/src/bamboo/www/WebInterface.java bamboo1/src/bamboo/www/WebInterface.java
--- bamboo/src/bamboo/www/WebInterface.java	2005-12-14 21:23:46.000000000 +0200
+++ bamboo1/src/bamboo/www/WebInterface.java	2008-05-22 17:06:30.000000000 +0300
@@ -55,7 +55,7 @@
 public class WebInterface extends bamboo.util.StandardStage
 implements StorageManager.StorageMonitor {
 
-    protected static HashMap<NodeId,WebInterface> instances = 
+    public static HashMap<NodeId,WebInterface> instances = 
         new HashMap<NodeId,WebInterface> ();
 
     public static WebInterface instance (NodeId node_id) {
@@ -158,7 +158,7 @@
             web_appender.setLayout (pl);
             Logger.getRoot ().addAppender (web_appender);
         }
-	init_start_time_ms = now_ms ();
+	    init_start_time_ms = now_ms ();
         listen_port = my_node_id.port () + 1;
         latencies.put (my_node_id, new Long (0));
         classifier.dispatch_later (new VivaldiRequestVC (my_sink, null), 5000);
@@ -204,9 +204,9 @@
 
             my_guid = router.id();
             my_neighbor_info =
-                new BambooNeighborInfo (my_node_id, my_guid, 0.0);
+                new BambooNeighborInfo (my_node_id, my_node_id, my_guid, 0.0);
 
-            rt = new RoutingTable (new NeighborInfo (my_node_id, my_guid),
+            rt = new RoutingTable (new NeighborInfo (my_node_id, my_node_id, my_guid),
                     1.0, MODULUS, router.digitsPerID(), DIGIT_VALUES);
 
             {
@@ -261,13 +261,13 @@
 
             if (preds != null) {
                 for (int i = preds.length - 1; i >= 0; --i)
-                    dispatch (new NetworkLatencyReq (preds [i].node_id,
+                    dispatch (new NetworkLatencyReq (preds [i].peer, preds [i].node_id, 
                                 my_sink, preds [i].node_id));
             }
 
             if (succs != null) {
                 for (int i = succs.length - 1; i >= 0; --i)
-                    dispatch (new NetworkLatencyReq (succs [i].node_id,
+                    dispatch (new NetworkLatencyReq (succs [i].peer, succs [i].node_id,
                                 my_sink, succs [i].node_id));
             }
 
@@ -276,8 +276,9 @@
                     RoutingTable.RoutingEntry re = rt.primary_re (i, j);
                     if (re != null) {
                         BambooNeighborInfo ni = new BambooNeighborInfo (
-                                re.ni.node_id, re.ni.guid, re.rtt_ms);
-                        dispatch (new NetworkLatencyReq (re.ni.node_id,
+                                re.ni.peer, re.ni.node_id, re.ni.guid, re.rtt_ms);
+                        logger.info ("periodic_timer_cb in WebInterface.");
+                        dispatch (new NetworkLatencyReq (re.ni.peer, re.ni.node_id,
                                     my_sink, re.ni.node_id));
                     }
                 }
@@ -290,6 +291,7 @@
 
     protected void handle_accept_ready () {
         SocketChannel channel = null;
+        logger.info("In the handle_accept_ready of WebInterface.");
         try {
             channel = svr_ch.accept ();
             if (channel == null)
@@ -298,7 +300,7 @@
             ConnState state = new ConnState (channel);
 
             InetSocketAddress remote = (InetSocketAddress)
-                channel.socket ().getRemoteSocketAddress ();
+                channel.socket ().getRemoteSocketAddress ();            
             logger.info ("got connection from " +
                     remote.getAddress ().getHostAddress () + ":" +
                     remote.getPort ());
@@ -356,8 +358,8 @@
                 return;
             }
             int count = 0;
-            try {
-                count = state.channel.read (state.req);
+            try {            	
+                count = state.channel.read (state.req);                
             }
             catch (IOException e) {
                 close (state);
@@ -799,12 +801,12 @@
         public void run(BambooNeighborInfo add[], BambooNeighborInfo rem[]) {
             if (add != null) {
                 for (int i = 0; i < add.length; ++i)
-                    rt.force_add(new NeighborInfo(add[i].node_id, add[i].guid),
+                    rt.force_add(new NeighborInfo(add[i].peer, add[i].node_id, add[i].guid),
                                  add[i].rtt_ms);
             }
             if (rem != null) {
                 for (int i = 0; i < rem.length; ++i)
-                    rt.remove(new NeighborInfo(rem[i].node_id, rem[i].guid));
+                    rt.remove(new NeighborInfo(rem[i].peer, rem[i].node_id, rem[i].guid));
             }
         }
     };
