#
# HIP midauth protocol patch for wireshark-1.0.0
#
# Requires application of wireshark-1.0.0-hip.patch before applying this
# patch.
#
# 4/08 draft-heer-hip-middle-auth-00
#
# Author:       Thomas Jansen <mithi@mithi.net>
#
diff -crN wireshark-1.0.0-hip/epan/dissectors/packet-hip.c wireshark-1.0.0-hip-midauth/epan/dissectors/packet-hip.c
*** wireshark-1.0.0-hip/epan/dissectors/packet-hip.c	2008-05-08 16:30:53.000000000 +0200
--- wireshark-1.0.0-hip-midauth/epan/dissectors/packet-hip.c	2008-05-08 15:25:18.000000000 +0200
***************
*** 1,7 ****
  /* packet-hip.c
   * Routines for HIP packet disassembly
   *
!  * 04/2008 UDP encapsulation support
   * 03/2006 draft-ietf-hip-base-05, -esp-02, -mm-03, -registration-01, -rvs-04
   * 07/2005 draft-ietf-hip-base-03, -esp-00, and -mm-02
   * 03/2005 draft-ietf-hip-base-01
--- 1,7 ----
  /* packet-hip.c
   * Routines for HIP packet disassembly
   *
!  * 04/2008 draft-heer-hip-middle-auth-00, UDP encapsulation support
   * 03/2006 draft-ietf-hip-base-05, -esp-02, -mm-03, -registration-01, -rvs-04
   * 07/2005 draft-ietf-hip-base-03, -esp-00, and -mm-02
   * 03/2005 draft-ietf-hip-base-01
***************
*** 86,91 ****
--- 86,96 ----
  static int hf_hip_tlv_puzzle_o = -1;
  static int hf_hip_tlv_puzzle_i = -1;
  static int hf_hip_tlv_puzzle_j = -1;
+ static int hf_hip_tlv_puzzle_m_k = -1;
+ static int hf_hip_tlv_puzzle_m_life = -1;
+ static int hf_hip_tlv_puzzle_m_o = -1;
+ static int hf_hip_tlv_puzzle_m_i = -1;
+ static int hf_hip_tlv_puzzle_m_j = -1;
  static int hf_hip_tlv_seq_updid = -1;
  static int hf_hip_tlv_ack_updid = -1;
  static int hf_hip_tlv_dh_group_id = -1;
***************
*** 178,183 ****
--- 183,189 ----
  #define PARAM_LOCATOR			193
  #define PARAM_PUZZLE			257
  #define PARAM_SOLUTION			321
+ #define PARAM_SOLUTION_M		322
  #define PARAM_SEQ			385
  #define PARAM_ACK			449
  #define PARAM_DIFFIE_HELLMAN		513
***************
*** 192,197 ****
--- 198,204 ----
  #define PARAM_REG_RESPONSE		934
  #define PARAM_REG_FAILED		936
  #define PARAM_ECHO_RESPONSE		961
+ #define PARAM_ECHO_RESPONSE_M		962
  #define PARAM_ESP_TRANSFORM		4095
  #define PARAM_TRANSFORM_LOW		2048 /* defines range for transforms */
  #define PARAM_TRANSFORM_HIGH		4095
***************
*** 201,206 ****
--- 208,215 ----
  #define PARAM_HIP_SIGNATURE		61697
  #define PARAM_ECHO_REQUEST_NOSIG	63661
  #define PARAM_ECHO_RESPONSE_NOSIG	63425
+ #define PARAM_ECHO_REQUEST_M		65332
+ #define PARAM_PUZZLE_M			65334
  #define PARAM_FROM			65498
  #define PARAM_RVS_HMAC			65500
  #define PARAM_VIA_RVS			65502
***************
*** 537,542 ****
--- 546,566 ----
  	        { &hf_hip_tlv_puzzle_j,
  		{ "Puzzle Solution J",    "hip.tlv_puzzle_j", FT_BYTES, BASE_HEX, NULL, 0x0, "", HFILL }},
  		
+ 	        { &hf_hip_tlv_puzzle_m_k,
+ 		{ "Puzzle_M Difficulty K","hip.tlv_puzzle_m_k", FT_UINT8, BASE_DEC, NULL, 0x0, "", HFILL }},
+ 		
+ 	        { &hf_hip_tlv_puzzle_m_life,
+ 		{ "Puzzle_M Lifetime","hip.tlv_puzzle_m_life", FT_UINT8, BASE_DEC, NULL, 0x0, "", HFILL }},
+ 		
+ 	        { &hf_hip_tlv_puzzle_m_o,
+ 		{ "Puzzle_M Opaque Data","hip.tlv_puzzle_m_o", FT_BYTES, BASE_HEX, NULL, 0x0, "", HFILL }},
+ 		
+ 	        { &hf_hip_tlv_puzzle_m_i,
+ 		{ "Puzzle_M Random I",    "hip.tlv.puzzle_m_i", FT_BYTES, BASE_HEX, NULL, 0x0, "", HFILL }},
+ 		
+ 	        { &hf_hip_tlv_puzzle_m_j,
+ 		{ "Puzzle_M Solution J",    "hip.tlv_puzzle_m_j", FT_BYTES, BASE_HEX, NULL, 0x0, "", HFILL }},
+ 		
  	        { &hf_hip_tlv_ei_res,
  		{ "Reserved", "hip.tlv_ei_res", FT_UINT16, BASE_HEX, NULL, 0x0, "", HFILL }},
  		
***************
*** 797,802 ****
--- 821,838 ----
  	case PARAM_ECHO_RESPONSE_NOSIG:
  	    sprintf(s, "ECHO_RESPONSE (No sig.)");
  	    break;
+ 	case PARAM_ECHO_REQUEST_M:
+ 	    sprintf(s, "ECHO_REQUEST_M");
+ 	    break;
+ 	case PARAM_ECHO_RESPONSE_M:
+ 	    sprintf(s, "ECHO_RESPONSE_M");
+ 	    break;
+ 	case PARAM_PUZZLE_M:
+ 	    sprintf(s, "PUZZLE_M");
+ 	    break;
+ 	case PARAM_SOLUTION_M:
+ 	    sprintf(s, "SOLUTION_M");
+ 	    break;
  	default:
  	    sprintf(s, "?UNKNOWN?");
  	    break;
***************
*** 972,977 ****
--- 1008,1030 ----
  			data);
  	    }
  	    break;
+ 	case PARAM_PUZZLE_M:
+ 	case PARAM_SOLUTION_M:
+ 	    t = proto_item_add_subtree(ti, ett_hip_tlv_data);
+ 	    proto_tree_add_uint(t, hf_hip_tlv_puzzle_m_k, tvb, offset+4, 1,
+ 				tvb_get_guint8(tvb, offset+4));
+ 	    proto_tree_add_uint(t, hf_hip_tlv_puzzle_m_life, tvb, offset+5, 1,
+ 				tvb_get_guint8(tvb, offset+5));
+ 	    tvb_memcpy(tvb, (guint8*)data, offset+6, 6);
+ 	    proto_tree_add_bytes(t, hf_hip_tlv_puzzle_m_o, tvb,offset+6, 6, data);
+ 	    tvb_memcpy(tvb, (guint8*)data, offset+12, 8);
+ 	    proto_tree_add_bytes(t, hf_hip_tlv_puzzle_m_i, tvb,offset+12, 8, data);
+ 	    if (type == PARAM_SOLUTION_M) { /* solution also contains J */
+ 		tvb_memcpy(tvb, (guint8*)data, offset+20, 8);
+ 		proto_tree_add_bytes(t, hf_hip_tlv_puzzle_m_j, tvb, offset+20, 8,
+ 			data);
+ 	    }
+ 	    break;
  	case PARAM_SEQ: /* SEQ */
  	    t = proto_item_add_subtree(ti, ett_hip_tlv_data);
  	    proto_tree_add_uint(t, hf_hip_tlv_seq_updid, tvb, offset+4, 4,
***************
*** 1175,1180 ****
--- 1228,1235 ----
  	    break;
  	case PARAM_ECHO_REQUEST: /* ECHO REQUEST */
  	case PARAM_ECHO_RESPONSE: /* ECHO RESPONSE */
+ 	case PARAM_ECHO_REQUEST_M: /* ECHO REQUEST */
+ 	case PARAM_ECHO_RESPONSE_M: /* ECHO RESPONSE */
  	case PARAM_ECHO_REQUEST_NOSIG: /* ECHO REQUEST */
  	case PARAM_ECHO_RESPONSE_NOSIG: /* ECHO RESPONSE */
  	    t = proto_item_add_subtree(ti, ett_hip_tlv_data);
