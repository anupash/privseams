AUTOMAKE_OPTIONS = foreign

CLEANFILES = dnshipproxy parsehipkey

EXTRA_DIST = gen-python-starter.sh

if HAVE_PYTHON

# These two scripts are generated in the end to get the python paths correct.
# Currently, I don't know a better way to deal with the python code. -miika
dist_sbin_SCRIPTS = dnshipproxy parsehipkey

dns_PYTHON = DNS/Base.py DNS/Lib.py DNS/Type.py DNS/Class.py
dns_PYTHON += DNS/Opcode.py DNS/win32dns.py DNS/__init__.py
dns_PYTHON += DNS/pyip6.py DNS/lazy.py DNS/Status.py
dnsdir = $(pyexecdir)/DNS

dnshipproxy_PYTHON = dnsproxy.py pyip6.py hosts.py util.py
dnshipproxydir = $(pyexecdir)/dnshipproxy

parsehipkey_PYTHON = parse-key-3.py myasn.py
parsehipkeydir = $(pyexecdir)/parsehipkey

endif

# Note: .. is included because libinet6/debug.h is included; otherwise this
# won't build because there is also the linux/net/ipv6/hip/debug.h include.
#

CFLAGS = $(hipl_common_cflags) # -L$(HIPL_LIBINET6_LIB)
INCLUDES = $(hipl_common_include_paths) -I$(HIPL_LIBINET6_INCLUDE)

include_HEADERS = hipconftool.h

LDFLAGS = @LDFLAGS@ -lc -lcrypto $(HIP_XMLL) $(OPENWRT)

if HIP_OPENDHT
  INCLUDES += -I../opendht
endif

INCLUDES += -I../i3/i3_client -I../i3/utils -I../i3/i3

LDADD=
#if HIP_OPPORTUNISTIC
#  LDADD += ../libopphip/.libs/libopphip.a
#endif

LDADD += ../libinet6/.libs/libinet6.a
if HIP_CORPORATE
  LDADD += -lhiptool
else
  LDADD += ../libhiptool/.libs/libhiptool.a
endif

if HIP_OPENWRT
LDADD += $(OPENWRT_LIB_STATIC)
else
CFLAGS += -L$(HIPL_LIBINET6_LIB)
LDADD += ../libinet6/.libs/libinet6.a
LDADD += ../libhiptool/.libs/libhiptool.a
INCLUDES += -I$(HIPL_LIBINET6_INCLUDE)
endif

if HIP_OPENWRT
LDADD += $(OPENWRT_LIB_STATIC)
else
CFLAGS += -L$(HIPL_LIBINET6_LIB)
LDADD += ../libinet6/.libs/libinet6.a
LDADD += ../libhiptool/.libs/libhiptool.a
INCLUDES += -I$(HIPL_LIBINET6_INCLUDE)
endif

LDADD += ../opendht/.libs/libhipopendht.a

# For some weird reason, you cannot use $(HIPL_LIBINET6_LIB_STATIC) below

sbin_PROGRAMS = hipconf
hipconf_SOURCES = hipconftool.c

# The sources depend on builder, but it is located elsewhere. Linking is
# the best way to access it because the object must be built on this
# directory and we don't want to make reduntant copies.
#
$(HIPL_LIBINET6_LIB_STATIC):
	$(MAKE) -C $(HIPL_LIBINET6)

dnshipproxy:
	@sh gen-python-starter.sh $(pyexecdir)/dnshipproxy dnsproxy.py dnshipproxy

parsehipkey:
	@sh gen-python-starter.sh $(pyexecdir)/parsehipkey parse-key-3.py parsehipkey
