Warning
=======

HIPL code is currently at a very experimental level. Use at your own
responsibility! Using VMWare or User Mode Linux is recommended for
testing HIPL.

Requirements
============

As the first requirement, you also need know the basics on Linux kernel
compilation and usage. Refer to linux/README for further instructions.

You need the following software to build and run the HIPL 
software bundle:

* Mandatory
  * Linux Operating System
  * OpenSSL-library and developer headers
  * GNU make
  * the latest versions of autoconf and automake
  * perl, lorder

* Optional
  * iputils-ping (or netkit-ping): ping, ping6
  * ipsec-tools: setkey
  * netcat6
  * latex, dvips, dvipdf, fig2dev, docbook-utils (for building the
    HIPL documentation)
  * java compiler for "jip" (java hip resolver) if you want to build
    HIP enabled java programs

The HIPL patched kernel is based on the official Linux kernel and it
should be distribution independent. The kernel has been tested on the
Debian Linux (Woody, Sarge) distribution.

Building the HIPL Documentation
===============================

Architectural documentation:

  % cd hipl/doc
  % make design_choices.dvi design_choices.ps design_choices.pdf

Kernelspace API:

This compiles the whole kernel documentation (may take a while) along
with HIPL kernel module documentation:

  % cd hipl/linux
  % make sgmldocs htmldocs pdfdocs psdocs

The HIPL kernel module documentation will appear on the following files
(depending on the format you selected for building the documentation):

  hipl/linux/Documentation/DocBook/hipl-kernelspace-api.*

The building of kernel documentation may take a while, so please be
patient.

Compiling the Kernel
====================

If you haven't configured linux kernel before, please consult
hipl/linux/README before doing that. We have some example
configurations files in hipl/test/configs for "typical" systems. You
can use one of those as a template, and modify it to suite the needs
of your system. Read hipl/test/configs/README before doing so.

If you haven't configured linux kernel before, please consult
hipl/linux/README before doing that. We have some example
configurations files in hipl/test/configs for "typical" systems. You
can use one of those as a template, and modify it to suite the needs
of your system. Read hipl/test/configs/README before doing so.

The 2.6 kernel series should be compilable with both gcc 2.9x and 3.x
series. We recommend the latter.

HIPL kernel is in hipl/linux folder. Compile the kernel with
at least the following options:

  Legend: [*] built-in  [ ] excluded  <M> module  < > module capable

  Code maturity level options
  [*] Prompt for development and/or incomplete code/drivers

  Processor type and features
  [*] Preemptible Kernel

  Device Drivers ---> Networking support ---> Networking options
  [*] TCP/IP networking
  <*> The IPv6 protocol (EXPERIMENTAL)
  <M> Host Identity Protocol
  [*]   HIP: debugging (NEW)

We urge you to enable the preemptive kernel option. You can run HIP
without this, but you will experience losses of interaction with
underlying host. This typically happens when you load the HIP module,
or when the module sends HIP messages to the network.

IPsec, IPv6 security support, SHA1 and 3DES should be auto enabled as
dependencies after you have selected HIP. We recommend that you
compile HIP as a kernel module. Currently, there is bug in the HIP
module compilation. IPv6 must compiled as built in. Otherwise, the
compilation of the HIP module fails (with an error message "undefined
reference to hip_functions").

HIP debugging is not mandatory, but use of it is highly recommended in
order to get more information when problems arise. HIP debugging
information is logged using syslog's facility "kernel" and priority
"debug". Remember to set up your /etc/syslog.conf correctly if you do
not see the log messages (see syslog.conf manual page for more info).

Turn the option CONFIG_REGPARM OFF! It segfaults HIP module upon
loading! You can find it from here:

  Processor type and features
  -> Use register arguments (EXPERIMENTAL)

Compiling Userland Applications
=================================

After you have successfully compiled and installed the HIP kernel and
rebooted both of the hosts, you need to compile the HIP command line
configurator (hipconf). Hipconf is located in hipl/tools folder and it
is compiled simply as follows:

  cd hipl/tools
  ./configure
  make

You should have an IPv6 application for creating a connection between
hosts. There is also a very simple application in hipl/test
folder. You can compile it as follows:

  cd hipl/libinet6
  ./configure
  make
  cd ../test
  ./configure
  make conntest-client-gai conntest-server

It is not necessary to "make install" the applications. You can
execute them straight from their source directories.

If you experience weird problems when executing configure script, try
invoking "autoreconf". See also that the versions of your automake and
autoconf tools are up-to-date.

Testing a HIP connection between two hosts
==========================================

HIPL developers test HIP using two machines called crash (3ffe::1) and
oops (3ffe::2). They are used through this whole document as examples
even though you probably have your own naming and addressing
conventions.

We expect that you have two hosts for testing HIP which will be
referred to as "crash" and "oops". You should run these commands in
the testing hosts as root. conntest-client-gai and
conntest-server can also be run as a non-root user, with
conntest-server using port numbers less than 1024 still requires root
privileges.

oops:

  /etc/hosts:
    3ffe::1 crash

  /etc/hip/hosts:
    HIT_OF_CRASH crash

  ifconfig eth0 inet6 add 3ffe::2/64
  modprobe hipmod
  cd somewhere/hipl
  tools/hipconf new hi default # only the first time when you run hip
  tools/hipconf add hi default
  test/conntest-server tcp 1111

crash:

  ifconfig eth0 inet6 add 3ffe::1/64
  mknod /dev/hip c 126 0
  modprobe hipmod
  cd somewhere/hipl
  tools/hipconf new hi default # only the first time when you run hip
  tools/hipconf add hi default
  test/conntest-client-gai oops tcp 1111
  <type some text in crash, press enter and ctrl+d and you
   should see some text appearing in the output of the hosts>

This will setup a HIP connection between the two hosts. You should
replace HIT_OF_XXX with the HIT of the host XXX. The host default HI
is generated with the command "hipconf new hi default" (only needed on
the first run) and sent to the kernel module with ".hipconf add hi
default" The value of the HIT can be found from file
/proc/net/hip/lhi. You can see information on current HIP connections
from file /proc/net/hip/sdb_state. Support for both of these /proc
files require that you select HIP debugging option during the kernel
compilation process. mknod command can be omitted if you already have
device file /dev/hip.

Mappings between HITs and IPv6 addresses are usually set up
automatically with the hosts files. Manual configuration is also
possible but not necessary:

  tools/hipconf add map PEER_HIT PEER_IP

Link local IPv6 addresses are not supported well, so do not use
them. Use global IPv6 addresses instead for testing. The reason for
this is that it is hard to know if the peer belongs to the same local
network as we are or not.

See the log messages for information about the result of HIP base
exchange and USAGI IPSec negotiation. Tcpdump or ethereal are good
tools for dumping the network traffic during the base exchange.

There is also a script called "hipsetup" in "hipl/test" directory for
quick testing of the base exchange. Run it without arguments to see
how it is used. The script requires some external applications that
will be prompted if they are not found.

Testing Handover
================

The handover code is based on draft-nikander-hip-mm-00
specification. Not all of the features all yet implemented and the
code quality is still far from bullet proof.

A naive handover test example is below. It assumes that you have
already established the base exchange between the hosts. You also need
to have the nc6 tool which can be found from e.g. "www.freshmeat.net".

  <first, establish a HIP connection as intructed in the previous section>
  oops  # nc6 -l -p 12345
  crash # nc6 <the HIT of oops> 12345
  crash # <type some text and press enter>
  oops  # <the text that you typed in crash should appear in oops console>
  crash # ifconfig eth0 inet6 del 3ffe::1/64
  crash # ifconfig eth0 inet6 add 3ffe::3/64
  crash # <type some text and press enter>
  oops  # <the text that you typed in crash should appear in oops console>

Do not use link local addresses for the mobility scenarios for the
hosts, unless you know what you are doing! For example, you are asking
for trouble if you establish HIP SA between the mobile and
correspondent node using link local addresses, and move the mobile
node to a different network. The readdressing fails, because either
node has no way of reaching the other node.

Compiling Java Applications
===========================

HIPL software bundle includes also a java wrapper library to the HIP
enabled libinet6 resolver library. The library is called "jip" and it
is located in "path-to-hipl/jip".

You need to have either Blackdown or Sun java jdk 1.4.x or later to
compile jip. The code does *not* work on java 1.3.  The installation
assumes that you are using Blackdown 1.4 jdk, but if you are Sun jdk
or other version of blackdown java, just set up the environment
variable "JAVA_HOME" to point to the correct java installation
directory.

Compile libinet6.so and jip:

# cd path-to-hipl/libinet6
# ./configure
# make libinet6.so
# cd ../jip
# make

The outcome of the previous operation is jip/jip.jar which you should
use in your java applications to enable HIP. You can also run "make
apidoc" to build the Javadoc documentation into the directory
path-to-hipl/doc/jip-api.

There are three example java applications in "test" directory that you
must compile manually with the following procedure:

# cd ../test
# javac -classpath ../jip/jip.jar HipClient.java
# javac -classpath ../jip/jip.jar HipUserkeyClient.java
# javac -classpath ../jip/jip.jar HipServer.java

You should have setup your networking environment as explained in
section "Testing a HIP Connection Between Two Hosts", that is, you
should have configured your /etc/hosts and /etc/hip/hosts
properly. You should have also created default host identities for
both of the hosts with "hipconf new hi default".

You cannot quite convert your normal Java networking application to a
HIP application by just setting the socket factories.  You will need
to either ensure that a used host name always resolves only to IPv6
addresses, or that you never pass host names to methods in Socket and
ServerSocket classes.  This latter can be achieved by using the
resolver methods in the HipAddress class as is done in the example.

Run the example applications as follows:

crash # cd path-to-hipl/test
crash # modprobe hipmod
crash # ../tools/hipconf add hi default
crash # ./java HipServer 12345

oops # cd test
oops # modprobe hipmod
oops # ../tools/hipconf add hi default
oops # ./java HipClient crash 12345 54321
<wait for the prompt, type some text and press enter>

The shell script "test/java" contains some LD_PRELOAD, library and
class path information necessary for executing the HIP enabled java
applications.

The HipUserkeyClient class is otherwise the same as the HipClient
class, except that its optional fourth argument is the name of a file
from which to read an application-specified endpoint.

HIP Enabled Telnet
=========================

We have modified netkit-telnet from usagi (www.linux-ipv6.org) to
support native HIP API. HIP is a compile time option, so that you can
see the required modifications to the code (ifdef USE_HIP). Here's how
you compile the telnet applications:

# cd libinet
# ./configure
# make
# cd ../test/telnetd
# ./configure
# make
# cd ../telnet
# ./configure
# make

oops  # telnetd/telnetd -debug 12345
crash # telnet/telnet -l username oops 12345

Note: the username must be non-root.


How to Use HIP in Other C Based Applications?
=============================================

Use on the following methods:

1. Port it to use the native HIP API. See the telnet code for a
   practical example. The API is documented in url:
   http://hipl.hiit.fi/hipl/hip-native-api-final.pdf

2. Relink the application to use the libinet6 library provided in the HIPL
   software bundle. Then, use either of the following methods:

   a) Set the AI_HIP flag in the getaddrinfo call. This will make the
      getaddrinfo function to return only HITs in the place of IP addresses
      (no IP addresses are returned). Also, the getaddrinfo function sends
      the HIT-to-IPv6-address mapping to the kernel.
   b) You are using the transparent mode in the resolver (see the
      HIP_TRANSPARENT_API compilation flag in libinet6/Makefile.in). Only
      relinking is required, no changes are needed in the application.

3. Override the getaddrinfo function from the command line:
   http://www-106.ibm.com/developerworks/linux/library/l-glibc.html?ca=3Ddgr-ln=

Note! Methods two and three assume two prequisites! First, the
application must be IPv6 enabled because the implementation currently
supports only IPv6. Second, the application must really use the
getaddrinfo interface because otherwise the getaddrinfo hack
(i.e. sending HIT-to-IPv6 mapping to the HIP module) does not work.

Testing HIP Rendezvous Server/Mechanism
=======================================

The rendezvous server is similar to the home agent in Mobile IP. The
rendezvous server provides a stable IP for the responder and forwards
the initial I1 packet to the current location of the responder.

The rendezvous server is similar to the home agent in Mobile IP. The
rendezvous server provides a stable IP for the responder and forwards
the initial I1 packet to the current location of the responder.

Prerequisites:
Kernel must be compiled with the following extra option(s) included.
[*]  HIP: Rendezvous Mechanism 

The hipconf tool must support rvs option:
hipconf rvs <hit> <ip>

For now it is best if all the hosts involved in communications have
the Rendezvous Mechanism option enabled. Although, for the initiator
this should not be a requirement.

The participants:

  I = Initiator
  RVS = The Rendezvous server
  R = Responder

The idea is that I wants to connect to R, but only knows RVS's IP
address (and that RVS is representing R).

Steps:
-----

1. Start and initialize HIP module in each host:

  each-host # modprobe hipmod
  each-host # hipl/tools/hipconf add hi default

2. R has to tell the RVS that it would like to use RVS's services:

  responder # hipconf rvs <RVS-hit> <RVS-ip>

3. Send a TCP packet to the RVS-hit (to run the base exchange):

  responder # nc6 <RVS-hit> 12345 

  The port number does not matter. There need not be anything listening
  to that port.

  Now the Rendezvous Association is established.

4. Put some server listening at R:

  responder # nc6 -l -p 5000

5. Now the initiator will have to do the IP-HIT mapping:

  initiator # hipconf add map <R-hit> <RVS-ip>

  (alternatively, you can use the HIP enabled resolver libary)

6. Start a connection at I:

  initiator # nc6 <R-hit> 5000

7. Type some text...

Notes:

  * The implemented mechanism is simple forwarding of I1 packet with 
    source and  destination IPv6 addresses rewritten.
  * No changes were  made to the REA / mm-code,  which means that, for 
    example, the double jump scenario does not work.
    * Changes will be made when upgrade from mm-00 to mm-02 is finished.
  * The mechanism  does not comply 100% with the RVS draft.
    * We don't use REA TLV in R1 (from responder to initiator). The same 
      functionality is achieved by using the sender's IP address of 
      the R1 packet.
    * The VIA_RVS TLV is also left out, since it is meant only for 
      diagnostic purposes, and doesn't really add anything to the
      implementation, except for bugs. :)
    * The rendezvous mechanism is not yet guaranteed to be interoperable 
      with other implementations than HIPL
