<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN"[]>
<book id="hipl-userspace-api">
 <bookinfo>
  <title>HIP for Linux Userspace Internal API Reference Manual</title>

  <authorgroup>
    <author>
      <firstname>Miika</firstname>
      <surname>Komu</surname>
      <affiliation>
        <address>
          <email>miika@iki.fi</email>
        </address>
      </affiliation>
    </author>
    <author>
      <firstname>Mika</firstname>
      <surname>Kousa</surname>
      <affiliation>
        <address>
          <email>mika.kousa@hiit.fi</email>
        </address>
      </affiliation>
    </author>
    <author>
      <firstname>Kristian</firstname>
      <surname>Slavov</surname>
      <affiliation>
        <address>
          <email>ksl@iki.fi</email>
        </address>
      </affiliation>
    </author>
  </authorgroup>

  <copyright>
   <year>2002</year>
   <holder>Helsinki Institute for Information Technology</holder>
  </copyright>
 
  <legalnotice>

   <para>
     This documentation is free software; you can redistribute
     it and/or modify it under the terms of the GNU General Public
     License as published by the Free Software Foundation; either
     version 2 of the License, or (at your option) any later
     version.
   </para>

   <para>
    This program is distributed in the hope that it will be
    useful, but WITHOUT ANY WARRANTY; without even the implied
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.
   </para>
   
   <para>
    You should have received a copy of the GNU General Public
    License along with this program; if not, write to the Free
    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
    MA 02111-1307 USA
   </para>
   
   <para>
    For more details see the file <filename>hipl/doc/COPYING</filename>.
   </para>

  </legalnotice>
 </bookinfo>

<toc></toc>

  <preface id="intro">
     <title>Introduction</title>

     <para>

     <ulink url="http://hipl.hiit.fi/hipl/">Host Identity Protocol for
     Linux (HIPL)</ulink> is implemented both in the Linux kernelspace
     and userspace in C language. The userspace function interfaces
     are described here. The userspace functions are only to be used
     internally by the implementation; using them outside the
     implementation is not recommended.
  
     </para>

     <para>
     All the file names are relative to the main directory
     <filename>hipl</filename>. Some of the files are shared between
     kernelspace and userspace. In those cases, the file is located in
     the kernelspace source directory,
     <filename>linux/net/ipv6/hip</filename>, to emphasize the fact
     that the kernelspace has a very restricted set of utility
     functions, and the shared code should survive without any
     external libraries.
     </para>

  </preface>

  <chapter id="debug">
     <title>Debugging interface</title>

     <para>
     HIPL code uses a common debugging interface in the userspace
     (<filename>debug.c</filename>) and in the kernelspace. There
     reasons for the shared debugging interface are:
     </para>

     <itemizedlist>
       <listitem><para>
           It is convinient to use the debugging interface the same way
           in both userspace and kernelspace.
       </para></listitem>
       <listitem><para>
           Software for production use can be built easily just by
           excluding a flag. Including the debug flag in builds
           enables verbose debugging for developers.
       </para></listitem>
       <listitem><para>
           The amount of detail of shown in the debugging messages
           can be controlled using a single interface.
       </para></listitem>
       <listitem><para>
           The destination of the output can be controlled via a unified
           interface. This is especially useful in the userspace daemon
           which usually can output to stdin or stderr in developer
           builds and to syslog interface in production level builds.
       </para></listitem>
     </itemizedlist>

     <para>
     Debugging interface should be used only with HIP_DEBUG, HIP_INFO
     HIP_ERROR, HIP_ASSERT and other corresponding macros. Do not use
     the actual functions (described below) that implement the actual
     debugging interface. Please do not removed the debugging
     statements if you do not need them; consider prefixing the
     debugging macro call statements with an underscore
     (e.g. _HIP_DEBUG). The debug statements prefixed with an
     underscore will not be compiled in but they may be useful to
     other developers.
     </para>

!I../tools/debug.c

  </chapter>

  <chapter id="builder">
     <title>Message Interface and Builder</title>

     <sect1><title>Messaging Interface</title>

     <para>
     The messaging interface in <filename>tools/message.c</filename>is
     a small set of wrapper functions to hide the details how the
     messages are exchanged with the HIP kernel module.  The messaging
     mechanism is implemented with simple <function>ioctl </function>
     calls.
     </para>

!I../tools/message.c

     </sect1>

     <sect1><title>Message Builder Interface</title>

     <!-- Note: the text below is also in hipl-kernelspace-api.tmpl. If
          you make changes to the text below, copy the text also into
          hipl-kernelspace-api.tmpl -->

     <para>
     The HIP daemon reuses the same TLV structure as the HIP kernel
     module so that the userspace and kernelspace may share the same
     library for building messages. The header of a daemon message is
     used a bit differently; it is used for carrying errors and the
     type of the operation to be performed on the daemon. The rest of
     the TLV structures are the same as in HIP drafts but there are
     some "extended" types that serve their purpose only in the
     context of the HIP daemon (such as querying the public-private
     DSA key pair of the host). The message builder is located in
     <filename>linux/net/ipv6/hip/builder.c</filename>
     </para>

     <para>
     The are one major benefits in using the builder interface. It
     keeps the code simple because the details of building parameters
     can be separated from "control" code. Doing otherwise results in
     spaghetti code. The builder interface introduces an extra layer
     of indirection which can be seen also as a slight performance
     drawback. The benefits from the better readability of the code and
     less bugs in the code are undisputable and they weight more than
     slight than slight performance optimizations. 
     </para>

     <para>
     The extra layer of indirection is realized with builder accessors
     functions that manipulate the HIP parameter data structures. This
     means that the members in the structures should not be accesses
     directly in the code; it is the responsibility of the accessor
     functions to manipulate the members in structures and hide the
     details of network byte ordering, padding issues and size
     conversion.
     </para>

!I../linux/net/ipv6/hip/builder.c
     </sect1>

  </chapter>

  <chapter id="resolver">
     <title>Resolver interface</title>

     <para>
     The resolver library is used by userspace applications for
     querying FQDNs, HITs and IP addresses. The resolver library is
     based on the <ulink
     url="http://www.linux-ipv6.org/">USAGI</ulink> resolver
     library. This is the only part of the HIPL project that can be
     and should be used by other network applications. The network
     applications can use HIP by linking them to the library and using
     the functionality provided the library. The resolver library is
     located in <filename>libinet6</filename> directory.
     </para>

  <chapter id="other">
     <title>Other userspace applications</title>

     <para>
     Miscellaneous HIPL related applications are described in this chapter.
     </para>

     <sect1><title>HIP Command Line Configuration Tool</title>

     <para>
     The command line configuration tool in
     <filename>tools/hipconf.c</filename> is used for manual
     configuration of the HIP kernel module. For example, mappings
     from HITs to IP addresses can be set using this tool.
     </para>

!I../tools/hipconf.c
     </sect1>

     <sect1><title>Unit Testing Environment</title>

     <!-- Note: the text below is also in hipl-kernelspace-api.tmpl. If
          you make changes to the text below, copy the text also into
          hipl-kernelspace-api.tmpl -->

     <para>
     The unit testing environment in
     <filename>linux/net/ipv6/hip/unit.c</filename> is used for
     triggering unit tests from the command line. The unit testing
     environment separates test cases a special kind of hierarchy:
     testspaces, testsuites and testcases. The testspace divides the
     testcases to those that will be executed in the userspace and to
     those that will be executed in the kernelspace. Testsuites can
     refer to e.g. "crypto", "message" in the context of the
     testspace.  Testcases name the individual testcases in the
     context of the testspace.
     </para>

!I../linux/net/ipv6/hip/unit.c

     </sect1>

     <sect1><title>HIP test setup application</title>

     <para>
     Script <filename>test/hipsetup</filename> can be used for quick
     testing of base exchange between two hosts. It requires some
     external software that will be prompted if not found.
     </para>

     </sect1>

  </chapter>

</book>
